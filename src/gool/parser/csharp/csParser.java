// $ANTLR 3.5 C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g 2014-01-30 16:38:23

  package gool.parser.csharp;
  import gool.parser.csharp.ast.literal.literaltype;
  import gool.parser.csharp.ast.*;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class csParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "Character_literal", 
		"DECIMAL_DIGIT", "DEFINE", "DEFINE_TOKEN", "DOC_LINE_COMMENT", "DOT", 
		"Decimal_digits", "Decimal_integer_literal", "ELIF", "ELSE_TOKEN", "ENDIF", 
		"ENDIF_TOKEN", "ENUM", "EscapeSequence", "Exponent_part", "FALSE", "GT", 
		"GooBall", "GooBallIdentifier", "HEX_DIGIT", "HEX_DIGITS", "Hex_number", 
		"IDENTIFIER", "IF", "IF_TOKEN", "INTEGER_TYPE_SUFFIX", "IdentifierPart", 
		"IdentifierStart", "LINE_COMMENT", "MINUS", "NULL", "NUMBER", "PP_AND_EXPRESSION", 
		"PP_CONDITIONAL", "PP_EQUALITY_EXPRESSION", "PP_EXPRESSION", "PP_OR_EXPRESSION", 
		"PP_PRIMARY_EXPRESSION", "PP_UNARY_EXPRESSION", "PREPROCESSOR_DIRECTIVE", 
		"PTR", "Pragma", "RPAREN", "Real_literal", "Real_type_suffix", "SEMI", 
		"STRINGLITERAL", "Sign", "TRUE", "TS", "UNDEF", "UNDEF_TOKEN", "USING", 
		"Verbatim_string_literal", "Verbatim_string_literal_character", "WS", 
		"'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", 
		"'+'", "'++'", "'+='", "','", "'--'", "'-='", "'/'", "'/='", "':'", "'::'", 
		"'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>='", "'?'", 
		"'??'", "'['", "']'", "'^'", "'^='", "'__arglist'", "'abstract'", "'add'", 
		"'alias'", "'as'", "'ascending'", "'assembly'", "'base'", "'bool'", "'break'", 
		"'by'", "'byte'", "'case'", "'catch'", "'char'", "'checked'", "'class'", 
		"'const'", "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", 
		"'do'", "'double'", "'dynamic'", "'else'", "'equals'", "'event'", "'explicit'", 
		"'extern'", "'field'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
		"'from'", "'get'", "'goto'", "'group'", "'implicit'", "'in'", "'int'", 
		"'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", 
		"'long'", "'method'", "'module'", "'namespace'", "'new'", "'object'", 
		"'on'", "'operator'", "'orderby'", "'out'", "'override'", "'param'", "'params'", 
		"'partial'", "'pragma'", "'private'", "'property'", "'protected'", "'public'", 
		"'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", 
		"'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", 
		"'string'", "'struct'", "'switch'", "'this'", "'throw'", "'try'", "'type'", 
		"'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", 
		"'var'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", "'yield'", 
		"'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public static final int EOF=-1;
	public static final int T__61=61;
	public static final int T__62=62;
	public static final int T__63=63;
	public static final int T__64=64;
	public static final int T__65=65;
	public static final int T__66=66;
	public static final int T__67=67;
	public static final int T__68=68;
	public static final int T__69=69;
	public static final int T__70=70;
	public static final int T__71=71;
	public static final int T__72=72;
	public static final int T__73=73;
	public static final int T__74=74;
	public static final int T__75=75;
	public static final int T__76=76;
	public static final int T__77=77;
	public static final int T__78=78;
	public static final int T__79=79;
	public static final int T__80=80;
	public static final int T__81=81;
	public static final int T__82=82;
	public static final int T__83=83;
	public static final int T__84=84;
	public static final int T__85=85;
	public static final int T__86=86;
	public static final int T__87=87;
	public static final int T__88=88;
	public static final int T__89=89;
	public static final int T__90=90;
	public static final int T__91=91;
	public static final int T__92=92;
	public static final int T__93=93;
	public static final int T__94=94;
	public static final int T__95=95;
	public static final int T__96=96;
	public static final int T__97=97;
	public static final int T__98=98;
	public static final int T__99=99;
	public static final int T__100=100;
	public static final int T__101=101;
	public static final int T__102=102;
	public static final int T__103=103;
	public static final int T__104=104;
	public static final int T__105=105;
	public static final int T__106=106;
	public static final int T__107=107;
	public static final int T__108=108;
	public static final int T__109=109;
	public static final int T__110=110;
	public static final int T__111=111;
	public static final int T__112=112;
	public static final int T__113=113;
	public static final int T__114=114;
	public static final int T__115=115;
	public static final int T__116=116;
	public static final int T__117=117;
	public static final int T__118=118;
	public static final int T__119=119;
	public static final int T__120=120;
	public static final int T__121=121;
	public static final int T__122=122;
	public static final int T__123=123;
	public static final int T__124=124;
	public static final int T__125=125;
	public static final int T__126=126;
	public static final int T__127=127;
	public static final int T__128=128;
	public static final int T__129=129;
	public static final int T__130=130;
	public static final int T__131=131;
	public static final int T__132=132;
	public static final int T__133=133;
	public static final int T__134=134;
	public static final int T__135=135;
	public static final int T__136=136;
	public static final int T__137=137;
	public static final int T__138=138;
	public static final int T__139=139;
	public static final int T__140=140;
	public static final int T__141=141;
	public static final int T__142=142;
	public static final int T__143=143;
	public static final int T__144=144;
	public static final int T__145=145;
	public static final int T__146=146;
	public static final int T__147=147;
	public static final int T__148=148;
	public static final int T__149=149;
	public static final int T__150=150;
	public static final int T__151=151;
	public static final int T__152=152;
	public static final int T__153=153;
	public static final int T__154=154;
	public static final int T__155=155;
	public static final int T__156=156;
	public static final int T__157=157;
	public static final int T__158=158;
	public static final int T__159=159;
	public static final int T__160=160;
	public static final int T__161=161;
	public static final int T__162=162;
	public static final int T__163=163;
	public static final int T__164=164;
	public static final int T__165=165;
	public static final int T__166=166;
	public static final int T__167=167;
	public static final int T__168=168;
	public static final int T__169=169;
	public static final int T__170=170;
	public static final int T__171=171;
	public static final int T__172=172;
	public static final int T__173=173;
	public static final int T__174=174;
	public static final int T__175=175;
	public static final int T__176=176;
	public static final int T__177=177;
	public static final int T__178=178;
	public static final int T__179=179;
	public static final int T__180=180;
	public static final int T__181=181;
	public static final int T__182=182;
	public static final int T__183=183;
	public static final int T__184=184;
	public static final int T__185=185;
	public static final int T__186=186;
	public static final int T__187=187;
	public static final int T__188=188;
	public static final int T__189=189;
	public static final int T__190=190;
	public static final int T__191=191;
	public static final int T__192=192;
	public static final int T__193=193;
	public static final int T__194=194;
	public static final int T__195=195;
	public static final int T__196=196;
	public static final int T__197=197;
	public static final int T__198=198;
	public static final int T__199=199;
	public static final int T__200=200;
	public static final int T__201=201;
	public static final int T__202=202;
	public static final int COMMENT=4;
	public static final int Character_literal=5;
	public static final int DECIMAL_DIGIT=6;
	public static final int DEFINE=7;
	public static final int DEFINE_TOKEN=8;
	public static final int DOC_LINE_COMMENT=9;
	public static final int DOT=10;
	public static final int Decimal_digits=11;
	public static final int Decimal_integer_literal=12;
	public static final int ELIF=13;
	public static final int ELSE_TOKEN=14;
	public static final int ENDIF=15;
	public static final int ENDIF_TOKEN=16;
	public static final int ENUM=17;
	public static final int EscapeSequence=18;
	public static final int Exponent_part=19;
	public static final int FALSE=20;
	public static final int GT=21;
	public static final int GooBall=22;
	public static final int GooBallIdentifier=23;
	public static final int HEX_DIGIT=24;
	public static final int HEX_DIGITS=25;
	public static final int Hex_number=26;
	public static final int IDENTIFIER=27;
	public static final int IF=28;
	public static final int IF_TOKEN=29;
	public static final int INTEGER_TYPE_SUFFIX=30;
	public static final int IdentifierPart=31;
	public static final int IdentifierStart=32;
	public static final int LINE_COMMENT=33;
	public static final int MINUS=34;
	public static final int NULL=35;
	public static final int NUMBER=36;
	public static final int PP_AND_EXPRESSION=37;
	public static final int PP_CONDITIONAL=38;
	public static final int PP_EQUALITY_EXPRESSION=39;
	public static final int PP_EXPRESSION=40;
	public static final int PP_OR_EXPRESSION=41;
	public static final int PP_PRIMARY_EXPRESSION=42;
	public static final int PP_UNARY_EXPRESSION=43;
	public static final int PREPROCESSOR_DIRECTIVE=44;
	public static final int PTR=45;
	public static final int Pragma=46;
	public static final int RPAREN=47;
	public static final int Real_literal=48;
	public static final int Real_type_suffix=49;
	public static final int SEMI=50;
	public static final int STRINGLITERAL=51;
	public static final int Sign=52;
	public static final int TRUE=53;
	public static final int TS=54;
	public static final int UNDEF=55;
	public static final int UNDEF_TOKEN=56;
	public static final int USING=57;
	public static final int Verbatim_string_literal=58;
	public static final int Verbatim_string_literal_character=59;
	public static final int WS=60;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public csParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public csParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[356+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return csParser.tokenNames; }
	@Override public String getGrammarFileName() { return "C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g"; }


	public static class compilation_unit_return extends ParserRuleReturnScope {
		public compilation_unit t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "compilation_unit"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:24:1: compilation_unit returns [compilation_unit t] : a= namespace_body[true] ;
	public final csParser.compilation_unit_return compilation_unit() throws RecognitionException {
		csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
		retval.start = input.LT(1);
		int compilation_unit_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:25:32: (a= namespace_body[true] )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:26:9: a= namespace_body[true]
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_namespace_body_in_compilation_unit90);
			a=namespace_body(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = new compilation_unit((a!=null?((csParser.namespace_body_return)a).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, compilation_unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class namespace_declaration_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:28:1: namespace_declaration returns [UnknownNode t] : 'namespace' qualified_identifier namespace_block ( ';' )? ;
	public final csParser.namespace_declaration_return namespace_declaration() throws RecognitionException {
		csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
		retval.start = input.LT(1);
		int namespace_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal1=null;
		Token char_literal4=null;
		ParserRuleReturnScope qualified_identifier2 =null;
		ParserRuleReturnScope namespace_block3 =null;

		CommonTree string_literal1_tree=null;
		CommonTree char_literal4_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:29:37: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:30:2: 'namespace' qualified_identifier namespace_block ( ';' )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal1=(Token)match(input,149,FOLLOW_149_in_namespace_declaration111); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal1_tree = (CommonTree)adaptor.create(string_literal1);
			adaptor.addChild(root_0, string_literal1_tree);
			}

			pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration115);
			qualified_identifier2=qualified_identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_identifier2.getTree());

			pushFollow(FOLLOW_namespace_block_in_namespace_declaration119);
			namespace_block3=namespace_block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_block3.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:30:57: ( ';' )?
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==SEMI) ) {
				alt1=1;
			}
			switch (alt1) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:30:57: ';'
					{
					char_literal4=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration123); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal4_tree = (CommonTree)adaptor.create(char_literal4);
					adaptor.addChild(root_0, char_literal4_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, namespace_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_declaration"


	public static class namespace_block_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_block"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:31:1: namespace_block : '{' namespace_body[false] '}' ;
	public final csParser.namespace_block_return namespace_block() throws RecognitionException {
		csParser.namespace_block_return retval = new csParser.namespace_block_return();
		retval.start = input.LT(1);
		int namespace_block_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal5=null;
		Token char_literal7=null;
		ParserRuleReturnScope namespace_body6 =null;

		CommonTree char_literal5_tree=null;
		CommonTree char_literal7_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:31:16: ( '{' namespace_body[false] '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:32:2: '{' namespace_body[false] '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal5=(Token)match(input,197,FOLLOW_197_in_namespace_block132); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal5_tree = (CommonTree)adaptor.create(char_literal5);
			adaptor.addChild(root_0, char_literal5_tree);
			}

			pushFollow(FOLLOW_namespace_body_in_namespace_block136);
			namespace_body6=namespace_body(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_body6.getTree());

			char_literal7=(Token)match(input,201,FOLLOW_201_in_namespace_block141); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal7_tree = (CommonTree)adaptor.create(char_literal7);
			adaptor.addChild(root_0, char_literal7_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, namespace_block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_block"


	public static class namespace_body_return extends ParserRuleReturnScope {
		public namespace_body t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:33:1: namespace_body[boolean bGlobal] returns [namespace_body t] : (a= extern_alias_directives )? (b= using_directives )? (c= global_attributes )? (d= namespace_member_declarations )? ;
	public final csParser.namespace_body_return namespace_body(boolean bGlobal) throws RecognitionException {
		csParser.namespace_body_return retval = new csParser.namespace_body_return();
		retval.start = input.LT(1);
		int namespace_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:34:32: ( (a= extern_alias_directives )? (b= using_directives )? (c= global_attributes )? (d= namespace_member_declarations )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:9: (a= extern_alias_directives )? (b= using_directives )? (c= global_attributes )? (d= namespace_member_declarations )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:10: (a= extern_alias_directives )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==125) ) {
				int LA2_1 = input.LA(2);
				if ( (LA2_1==98) ) {
					alt2=1;
				}
			}
			switch (alt2) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:10: a= extern_alias_directives
					{
					pushFollow(FOLLOW_extern_alias_directives_in_namespace_body169);
					a=extern_alias_directives();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:39: (b= using_directives )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USING) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:39: b= using_directives
					{
					pushFollow(FOLLOW_using_directives_in_namespace_body176);
					b=using_directives();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:61: (c= global_attributes )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==91) ) {
				int LA4_1 = input.LA(2);
				if ( (LA4_1==101||LA4_1==148) ) {
					int LA4_3 = input.LA(3);
					if ( (LA4_3==79) ) {
						alt4=1;
					}
				}
			}
			switch (alt4) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:61: c= global_attributes
					{
					pushFollow(FOLLOW_global_attributes_in_namespace_body183);
					c=global_attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:84: (d= namespace_member_declarations )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==ENUM||LA5_0==91||LA5_0==96||LA5_0==111||LA5_0==116||LA5_0==125||(LA5_0 >= 139 && LA5_0 <= 140)||(LA5_0 >= 149 && LA5_0 <= 150)||LA5_0==156||LA5_0==159||LA5_0==161||(LA5_0 >= 163 && LA5_0 <= 165)||LA5_0==170||LA5_0==176||LA5_0==178||LA5_0==188||LA5_0==191||LA5_0==193) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:35:84: d= namespace_member_declarations
					{
					pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body190);
					d=namespace_member_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t =new namespace_body((a!=null?((csParser.extern_alias_directives_return)a).t:null),(b!=null?((csParser.using_directives_return)b).t:null),(c!=null?((csParser.global_attributes_return)c).t:null), (d!=null?((csParser.namespace_member_declarations_return)d).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, namespace_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_body"


	public static class extern_alias_directives_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "extern_alias_directives"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:37:1: extern_alias_directives returns [UnknownNode t] : ( extern_alias_directive )+ ;
	public final csParser.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
		csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
		retval.start = input.LT(1);
		int extern_alias_directives_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope extern_alias_directive8 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:38:37: ( ( extern_alias_directive )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:39:9: ( extern_alias_directive )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:39:9: ( extern_alias_directive )+
			int cnt6=0;
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==125) ) {
					int LA6_2 = input.LA(2);
					if ( (LA6_2==98) ) {
						alt6=1;
					}

				}

				switch (alt6) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:39:9: extern_alias_directive
					{
					pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives228);
					extern_alias_directive8=extern_alias_directive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_alias_directive8.getTree());

					}
					break;

				default :
					if ( cnt6 >= 1 ) break loop6;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(6, input);
					throw eee;
				}
				cnt6++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, extern_alias_directives_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "extern_alias_directives"


	public static class extern_alias_directive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "extern_alias_directive"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:40:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
	public final csParser.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
		csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
		retval.start = input.LT(1);
		int extern_alias_directive_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal9=null;
		Token string_literal10=null;
		Token char_literal12=null;
		ParserRuleReturnScope identifier11 =null;

		CommonTree string_literal9_tree=null;
		CommonTree string_literal10_tree=null;
		CommonTree char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:40:23: ( 'extern' 'alias' identifier ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:41:9: 'extern' 'alias' identifier ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal9=(Token)match(input,125,FOLLOW_125_in_extern_alias_directive244); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (CommonTree)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			string_literal10=(Token)match(input,98,FOLLOW_98_in_extern_alias_directive248); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal10_tree = (CommonTree)adaptor.create(string_literal10);
			adaptor.addChild(root_0, string_literal10_tree);
			}

			pushFollow(FOLLOW_identifier_in_extern_alias_directive252);
			identifier11=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier11.getTree());

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive255); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (CommonTree)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, extern_alias_directive_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "extern_alias_directive"


	public static class using_directives_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "using_directives"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:42:1: using_directives returns [UnknownNode t] : ( using_directive )+ ;
	public final csParser.using_directives_return using_directives() throws RecognitionException {
		csParser.using_directives_return retval = new csParser.using_directives_return();
		retval.start = input.LT(1);
		int using_directives_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope using_directive13 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:43:37: ( ( using_directive )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:44:9: ( using_directive )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:44:9: ( using_directive )+
			int cnt7=0;
			loop7:
			while (true) {
				int alt7=2;
				int LA7_0 = input.LA(1);
				if ( (LA7_0==USING) ) {
					alt7=1;
				}

				switch (alt7) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:44:9: using_directive
					{
					pushFollow(FOLLOW_using_directive_in_using_directives281);
					using_directive13=using_directive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, using_directive13.getTree());

					}
					break;

				default :
					if ( cnt7 >= 1 ) break loop7;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(7, input);
					throw eee;
				}
				cnt7++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, using_directives_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "using_directives"


	public static class using_directive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "using_directive"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:46:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
	public final csParser.using_directive_return using_directive() throws RecognitionException {
		csParser.using_directive_return retval = new csParser.using_directive_return();
		retval.start = input.LT(1);
		int using_directive_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope using_alias_directive14 =null;
		ParserRuleReturnScope using_namespace_directive15 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:46:16: ( ( using_alias_directive | using_namespace_directive ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:47:2: ( using_alias_directive | using_namespace_directive )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:47:2: ( using_alias_directive | using_namespace_directive )
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==USING) ) {
				int LA8_1 = input.LA(2);
				if ( (LA8_1==IDENTIFIER||LA8_1==95||(LA8_1 >= 97 && LA8_1 <= 98)||(LA8_1 >= 100 && LA8_1 <= 101)||LA8_1==105||LA8_1==117||LA8_1==120||LA8_1==122||LA8_1==126||LA8_1==132||LA8_1==135||LA8_1==141||(LA8_1 >= 143 && LA8_1 <= 144)||(LA8_1 >= 147 && LA8_1 <= 148)||LA8_1==152||LA8_1==154||LA8_1==157||LA8_1==160||LA8_1==162||LA8_1==167||(LA8_1 >= 171 && LA8_1 <= 172)||LA8_1==183||LA8_1==190||LA8_1==194||LA8_1==196) ) {
					int LA8_2 = input.LA(3);
					if ( (LA8_2==85) ) {
						alt8=1;
					}
					else if ( (LA8_2==DOT||LA8_2==SEMI||(LA8_2 >= 80 && LA8_2 <= 81)) ) {
						alt8=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 8, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}

			switch (alt8) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:47:3: using_alias_directive
					{
					pushFollow(FOLLOW_using_alias_directive_in_using_directive292);
					using_alias_directive14=using_alias_directive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, using_alias_directive14.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:48:4: using_namespace_directive
					{
					pushFollow(FOLLOW_using_namespace_directive_in_using_directive297);
					using_namespace_directive15=using_namespace_directive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, using_namespace_directive15.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, using_directive_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "using_directive"


	public static class using_alias_directive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "using_alias_directive"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:49:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
	public final csParser.using_alias_directive_return using_alias_directive() throws RecognitionException {
		csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
		retval.start = input.LT(1);
		int using_alias_directive_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal16=null;
		Token char_literal18=null;
		Token char_literal20=null;
		ParserRuleReturnScope identifier17 =null;
		ParserRuleReturnScope namespace_or_type_name19 =null;

		CommonTree string_literal16_tree=null;
		CommonTree char_literal18_tree=null;
		CommonTree char_literal20_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:49:22: ( 'using' identifier '=' namespace_or_type_name ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:50:2: 'using' identifier '=' namespace_or_type_name ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal16=(Token)match(input,USING,FOLLOW_USING_in_using_alias_directive306); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal16_tree = (CommonTree)adaptor.create(string_literal16);
			adaptor.addChild(root_0, string_literal16_tree);
			}

			pushFollow(FOLLOW_identifier_in_using_alias_directive310);
			identifier17=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier17.getTree());

			char_literal18=(Token)match(input,85,FOLLOW_85_in_using_alias_directive314); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal18_tree = (CommonTree)adaptor.create(char_literal18);
			adaptor.addChild(root_0, char_literal18_tree);
			}

			pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive318);
			namespace_or_type_name19=namespace_or_type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name19.getTree());

			char_literal20=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive322); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal20_tree = (CommonTree)adaptor.create(char_literal20);
			adaptor.addChild(root_0, char_literal20_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, using_alias_directive_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "using_alias_directive"


	public static class using_namespace_directive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "using_namespace_directive"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:51:1: using_namespace_directive : 'using' namespace_name ';' ;
	public final csParser.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
		csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
		retval.start = input.LT(1);
		int using_namespace_directive_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal21=null;
		Token char_literal23=null;
		ParserRuleReturnScope namespace_name22 =null;

		CommonTree string_literal21_tree=null;
		CommonTree char_literal23_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:51:26: ( 'using' namespace_name ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:52:2: 'using' namespace_name ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal21=(Token)match(input,USING,FOLLOW_USING_in_using_namespace_directive330); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal21_tree = (CommonTree)adaptor.create(string_literal21);
			adaptor.addChild(root_0, string_literal21_tree);
			}

			pushFollow(FOLLOW_namespace_name_in_using_namespace_directive334);
			namespace_name22=namespace_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_name22.getTree());

			char_literal23=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive338); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal23_tree = (CommonTree)adaptor.create(char_literal23);
			adaptor.addChild(root_0, char_literal23_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, using_namespace_directive_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "using_namespace_directive"


	public static class namespace_member_declarations_return extends ParserRuleReturnScope {
		public namespace_member_declarations t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_member_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:54:1: namespace_member_declarations returns [namespace_member_declarations t] : (a= namespace_member_declaration )+ ;
	public final csParser.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
		csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
		retval.start = input.LT(1);
		int namespace_member_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		retval.t =new namespace_member_declarations();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:56:32: ( (a= namespace_member_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:57:9: (a= namespace_member_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:57:9: (a= namespace_member_declaration )+
			int cnt9=0;
			loop9:
			while (true) {
				int alt9=2;
				int LA9_0 = input.LA(1);
				if ( (LA9_0==ENUM||LA9_0==91||LA9_0==96||LA9_0==111||LA9_0==116||LA9_0==125||(LA9_0 >= 139 && LA9_0 <= 140)||(LA9_0 >= 149 && LA9_0 <= 150)||LA9_0==156||LA9_0==159||LA9_0==161||(LA9_0 >= 163 && LA9_0 <= 165)||LA9_0==170||LA9_0==176||LA9_0==178||LA9_0==188||LA9_0==191||LA9_0==193) ) {
					alt9=1;
				}

				switch (alt9) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:57:10: a= namespace_member_declaration
					{
					pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations374);
					a=namespace_member_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {((namespace_member_declarations)retval.t).add((a!=null?((csParser.namespace_member_declaration_return)a).t:null));}
					}
					break;

				default :
					if ( cnt9 >= 1 ) break loop9;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(9, input);
					throw eee;
				}
				cnt9++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, namespace_member_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_member_declarations"


	public static class namespace_member_declaration_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_member_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:59:1: namespace_member_declaration returns [CsharpNode t] : (d= namespace_declaration | (a= attributes )? (b= modifiers )? c= type_declaration );
	public final csParser.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
		csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
		retval.start = input.LT(1);
		int namespace_member_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope d =null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:60:32: (d= namespace_declaration | (a= attributes )? (b= modifiers )? c= type_declaration )
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==149) ) {
				alt12=1;
			}
			else if ( (LA12_0==ENUM||LA12_0==91||LA12_0==96||LA12_0==111||LA12_0==116||LA12_0==125||(LA12_0 >= 139 && LA12_0 <= 140)||LA12_0==150||LA12_0==156||LA12_0==159||LA12_0==161||(LA12_0 >= 163 && LA12_0 <= 165)||LA12_0==170||LA12_0==176||LA12_0==178||LA12_0==188||LA12_0==191||LA12_0==193) ) {
				alt12=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 12, 0, input);
				throw nvae;
			}

			switch (alt12) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:61:9: d= namespace_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration415);
					d=namespace_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					if ( state.backtracking==0 ) {retval.t =(d!=null?((csParser.namespace_declaration_return)d).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:62:11: (a= attributes )? (b= modifiers )? c= type_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:62:12: (a= attributes )?
					int alt10=2;
					int LA10_0 = input.LA(1);
					if ( (LA10_0==91) ) {
						alt10=1;
					}
					switch (alt10) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:62:12: a= attributes
							{
							pushFollow(FOLLOW_attributes_in_namespace_member_declaration431);
							a=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:62:28: (b= modifiers )?
					int alt11=2;
					int LA11_0 = input.LA(1);
					if ( (LA11_0==96||LA11_0==125||LA11_0==140||LA11_0==150||LA11_0==156||LA11_0==161||(LA11_0 >= 163 && LA11_0 <= 165)||LA11_0==170||LA11_0==176||LA11_0==188||LA11_0==191||LA11_0==193) ) {
						alt11=1;
					}
					switch (alt11) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:62:28: b= modifiers
							{
							pushFollow(FOLLOW_modifiers_in_namespace_member_declaration438);
							b=modifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration445);
					c=type_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =new namespace_member_declaration((a!=null?((csParser.attributes_return)a).t:null),(b!=null?((csParser.modifiers_return)b).t:null), (c!=null?((csParser.type_declaration_return)c).t:null));}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, namespace_member_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_member_declaration"


	public static class type_declaration_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:64:1: type_declaration returns [CsharpNode t] : ( ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) ) |a= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
	public final csParser.type_declaration_return type_declaration() throws RecognitionException {
		csParser.type_declaration_return retval = new csParser.type_declaration_return();
		retval.start = input.LT(1);
		int type_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal24=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope class_declaration25 =null;
		ParserRuleReturnScope struct_declaration26 =null;
		ParserRuleReturnScope interface_declaration27 =null;
		ParserRuleReturnScope struct_declaration28 =null;
		ParserRuleReturnScope interface_declaration29 =null;
		ParserRuleReturnScope enum_declaration30 =null;
		ParserRuleReturnScope delegate_declaration31 =null;

		CommonTree string_literal24_tree=null;

		CsharpNode res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:66:88: ( ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) ) |a= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
			int alt14=6;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==159) && (synpred1_cs())) {
				alt14=1;
			}
			else if ( (LA14_0==111) ) {
				alt14=2;
			}
			else if ( (LA14_0==178) ) {
				alt14=3;
			}
			else if ( (LA14_0==139) ) {
				alt14=4;
			}
			else if ( (LA14_0==ENUM) ) {
				alt14=5;
			}
			else if ( (LA14_0==116) ) {
				alt14=6;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 14, 0, input);
				throw nvae;
			}

			switch (alt14) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:9: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:9: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:10: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
					{
					string_literal24=(Token)match(input,159,FOLLOW_159_in_type_declaration495); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal24_tree = (CommonTree)adaptor.create(string_literal24);
					adaptor.addChild(root_0, string_literal24_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:37: ( class_declaration | struct_declaration | interface_declaration )
					int alt13=3;
					switch ( input.LA(1) ) {
					case 111:
						{
						alt13=1;
						}
						break;
					case 178:
						{
						alt13=2;
						}
						break;
					case 139:
						{
						alt13=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 13, 0, input);
						throw nvae;
					}
					switch (alt13) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:38: class_declaration
							{
							pushFollow(FOLLOW_class_declaration_in_type_declaration500);
							class_declaration25=class_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration25.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:68:67: struct_declaration
							{
							pushFollow(FOLLOW_struct_declaration_in_type_declaration568);
							struct_declaration26=struct_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration26.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:69:67: interface_declaration
							{
							pushFollow(FOLLOW_interface_declaration_in_type_declaration636);
							interface_declaration27=interface_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration27.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:70:11: a= class_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_class_declaration_in_type_declaration652);
					a=class_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res = (a!=null?((csParser.class_declaration_return)a).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:71:11: struct_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_struct_declaration_in_type_declaration666);
					struct_declaration28=struct_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration28.getTree());

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:72:11: interface_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_interface_declaration_in_type_declaration678);
					interface_declaration29=interface_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration29.getTree());

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:73:11: enum_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_enum_declaration_in_type_declaration690);
					enum_declaration30=enum_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration30.getTree());

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:74:11: delegate_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_delegate_declaration_in_type_declaration702);
					delegate_declaration31=delegate_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration31.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, type_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_declaration"


	public static class qualified_identifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qualified_identifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:77:1: qualified_identifier : identifier ( '.' identifier )* ;
	public final csParser.qualified_identifier_return qualified_identifier() throws RecognitionException {
		csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
		retval.start = input.LT(1);
		int qualified_identifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal33=null;
		ParserRuleReturnScope identifier32 =null;
		ParserRuleReturnScope identifier34 =null;

		CommonTree char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:77:21: ( identifier ( '.' identifier )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:78:2: identifier ( '.' identifier )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_qualified_identifier712);
			identifier32=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier32.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:78:13: ( '.' identifier )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==DOT) ) {
					alt15=1;
				}

				switch (alt15) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:78:14: '.' identifier
					{
					char_literal33=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_identifier715); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal33_tree = (CommonTree)adaptor.create(char_literal33);
					adaptor.addChild(root_0, char_literal33_tree);
					}

					pushFollow(FOLLOW_identifier_in_qualified_identifier717);
					identifier34=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier34.getTree());

					}
					break;

				default :
					break loop15;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, qualified_identifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualified_identifier"


	public static class namespace_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:79:1: namespace_name : namespace_or_type_name ;
	public final csParser.namespace_name_return namespace_name() throws RecognitionException {
		csParser.namespace_name_return retval = new csParser.namespace_name_return();
		retval.start = input.LT(1);
		int namespace_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope namespace_or_type_name35 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:80:2: ( namespace_or_type_name )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:80:4: namespace_or_type_name
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name728);
			namespace_or_type_name35=namespace_or_type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name35.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, namespace_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_name"


	public static class modifiers_return extends ParserRuleReturnScope {
		public modifiers t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:82:1: modifiers returns [modifiers t] : (a= modifier )+ ;
	public final csParser.modifiers_return modifiers() throws RecognitionException {
		csParser.modifiers_return retval = new csParser.modifiers_return();
		retval.start = input.LT(1);
		int modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		modifiers res=new modifiers();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:84:42: ( (a= modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:85:9: (a= modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:85:9: (a= modifier )+
			int cnt16=0;
			loop16:
			while (true) {
				int alt16=2;
				int LA16_0 = input.LA(1);
				if ( (LA16_0==96||LA16_0==125||LA16_0==140||LA16_0==150||LA16_0==156||LA16_0==161||(LA16_0 >= 163 && LA16_0 <= 165)||LA16_0==170||LA16_0==176||LA16_0==188||LA16_0==191||LA16_0==193) ) {
					alt16=1;
				}

				switch (alt16) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:85:10: a= modifier
					{
					pushFollow(FOLLOW_modifier_in_modifiers767);
					a=modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.modifier_return)a).t:null));}
					}
					break;

				default :
					if ( cnt16 >= 1 ) break loop16;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(16, input);
					throw eee;
				}
				cnt16++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t = res; retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "modifiers"


	public static class modifier_return extends ParserRuleReturnScope {
		public modifier t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "modifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:86:1: modifier returns [modifier t] : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
	public final csParser.modifier_return modifier() throws RecognitionException {
		csParser.modifier_return retval = new csParser.modifier_return();
		retval.start = input.LT(1);
		int modifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set36=null;

		CommonTree set36_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:87:34: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set36=input.LT(1);
			if ( input.LA(1)==96||input.LA(1)==125||input.LA(1)==140||input.LA(1)==150||input.LA(1)==156||input.LA(1)==161||(input.LA(1) >= 163 && input.LA(1) <= 165)||input.LA(1)==170||input.LA(1)==176||input.LA(1)==188||input.LA(1)==191||input.LA(1)==193 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set36));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new modifier(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, modifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "modifier"


	public static class class_member_declaration_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_member_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:92:1: class_member_declaration returns [CsharpNode t] : (b= attributes )? (c= modifiers )? ( 'const' type constant_declarators ';' | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) |e= 'void' aa= method_declaration |d= type ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration ) |a= class_declaration | struct_declaration | enum_declaration | event_declaration | interface_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
	public final csParser.class_member_declaration_return class_member_declaration() throws RecognitionException {
		csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
		retval.start = input.LT(1);
		int class_member_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token e=null;
		Token string_literal37=null;
		Token char_literal40=null;
		Token string_literal41=null;
		Token char_literal48=null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope aa =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope ab =null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope type38 =null;
		ParserRuleReturnScope constant_declarators39 =null;
		ParserRuleReturnScope method_declaration42 =null;
		ParserRuleReturnScope interface_declaration43 =null;
		ParserRuleReturnScope class_declaration44 =null;
		ParserRuleReturnScope struct_declaration45 =null;
		ParserRuleReturnScope property_declaration46 =null;
		ParserRuleReturnScope type_name47 =null;
		ParserRuleReturnScope indexer_declaration49 =null;
		ParserRuleReturnScope indexer_declaration50 =null;
		ParserRuleReturnScope operator_declaration51 =null;
		ParserRuleReturnScope struct_declaration52 =null;
		ParserRuleReturnScope enum_declaration53 =null;
		ParserRuleReturnScope event_declaration54 =null;
		ParserRuleReturnScope interface_declaration55 =null;
		ParserRuleReturnScope delegate_declaration56 =null;
		ParserRuleReturnScope conversion_operator_declaration57 =null;
		ParserRuleReturnScope constructor_declaration58 =null;
		ParserRuleReturnScope destructor_declaration59 =null;

		CommonTree e_tree=null;
		CommonTree string_literal37_tree=null;
		CommonTree char_literal40_tree=null;
		CommonTree string_literal41_tree=null;
		CommonTree char_literal48_tree=null;

		CsharpNode res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:94:88: ( (b= attributes )? (c= modifiers )? ( 'const' type constant_declarators ';' | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) |e= 'void' aa= method_declaration |d= type ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration ) |a= class_declaration | struct_declaration | enum_declaration | event_declaration | interface_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:95:9: (b= attributes )? (c= modifiers )? ( 'const' type constant_declarators ';' | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) |e= 'void' aa= method_declaration |d= type ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration ) |a= class_declaration | struct_declaration | enum_declaration | event_declaration | interface_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:95:10: (b= attributes )?
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==91) ) {
				alt17=1;
			}
			switch (alt17) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:95:10: b= attributes
					{
					pushFollow(FOLLOW_attributes_in_class_member_declaration878);
					b=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:96:10: (c= modifiers )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==96||LA18_0==125||LA18_0==140||LA18_0==150||LA18_0==156||LA18_0==161||(LA18_0 >= 163 && LA18_0 <= 165)||LA18_0==170||LA18_0==176||LA18_0==188||LA18_0==191||LA18_0==193) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:96:10: c= modifiers
					{
					pushFollow(FOLLOW_modifiers_in_class_member_declaration891);
					c=modifiers();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:97:9: ( 'const' type constant_declarators ';' | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) |e= 'void' aa= method_declaration |d= type ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration ) |a= class_declaration | struct_declaration | enum_declaration | event_declaration | interface_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			int alt21=13;
			switch ( input.LA(1) ) {
			case 112:
				{
				alt21=1;
				}
				break;
			case 159:
				{
				alt21=2;
				}
				break;
			case 192:
				{
				int LA21_3 = input.LA(2);
				if ( (LA21_3==Character_literal||LA21_3==FALSE||(LA21_3 >= Hex_number && LA21_3 <= IDENTIFIER)||(LA21_3 >= NULL && LA21_3 <= NUMBER)||LA21_3==Real_literal||LA21_3==STRINGLITERAL||LA21_3==TRUE||LA21_3==Verbatim_string_literal||LA21_3==95||(LA21_3 >= 97 && LA21_3 <= 98)||(LA21_3 >= 100 && LA21_3 <= 101)||LA21_3==103||(LA21_3 >= 105 && LA21_3 <= 106)||LA21_3==109||LA21_3==114||LA21_3==117||(LA21_3 >= 119 && LA21_3 <= 120)||LA21_3==122||LA21_3==126||LA21_3==129||LA21_3==132||LA21_3==135||LA21_3==138||LA21_3==141||(LA21_3 >= 143 && LA21_3 <= 144)||(LA21_3 >= 146 && LA21_3 <= 148)||(LA21_3 >= 151 && LA21_3 <= 152)||LA21_3==154||LA21_3==157||LA21_3==160||LA21_3==162||LA21_3==167||LA21_3==169||(LA21_3 >= 171 && LA21_3 <= 173)||LA21_3==177||LA21_3==183||(LA21_3 >= 185 && LA21_3 <= 186)||(LA21_3 >= 189 && LA21_3 <= 190)||LA21_3==194||LA21_3==196) ) {
					alt21=3;
				}
				else if ( (LA21_3==69) ) {
					alt21=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 21, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt21=4;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA21_5 = input.LA(2);
				if ( (LA21_5==Character_literal||LA21_5==DOT||LA21_5==FALSE||(LA21_5 >= Hex_number && LA21_5 <= IDENTIFIER)||(LA21_5 >= NULL && LA21_5 <= NUMBER)||LA21_5==Real_literal||LA21_5==STRINGLITERAL||LA21_5==TRUE||LA21_5==Verbatim_string_literal||LA21_5==69||(LA21_5 >= 80 && LA21_5 <= 81)||LA21_5==89||LA21_5==91||LA21_5==95||(LA21_5 >= 97 && LA21_5 <= 98)||(LA21_5 >= 100 && LA21_5 <= 101)||LA21_5==103||(LA21_5 >= 105 && LA21_5 <= 106)||LA21_5==109||LA21_5==114||LA21_5==117||(LA21_5 >= 119 && LA21_5 <= 120)||LA21_5==122||LA21_5==126||LA21_5==129||LA21_5==132||LA21_5==135||LA21_5==138||LA21_5==141||(LA21_5 >= 143 && LA21_5 <= 144)||(LA21_5 >= 146 && LA21_5 <= 148)||(LA21_5 >= 151 && LA21_5 <= 154)||LA21_5==157||LA21_5==160||LA21_5==162||LA21_5==167||LA21_5==169||(LA21_5 >= 171 && LA21_5 <= 173)||LA21_5==177||LA21_5==180||LA21_5==183||(LA21_5 >= 185 && LA21_5 <= 186)||(LA21_5 >= 189 && LA21_5 <= 190)||LA21_5==194||LA21_5==196) ) {
					alt21=4;
				}
				else if ( (LA21_5==68) ) {
					alt21=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 21, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 111:
				{
				alt21=5;
				}
				break;
			case 178:
				{
				alt21=6;
				}
				break;
			case ENUM:
				{
				alt21=7;
				}
				break;
			case 123:
				{
				alt21=8;
				}
				break;
			case 139:
				{
				alt21=9;
				}
				break;
			case 116:
				{
				alt21=10;
				}
				break;
			case 124:
			case 136:
				{
				alt21=11;
				}
				break;
			case 202:
				{
				alt21=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 21, 0, input);
				throw nvae;
			}
			switch (alt21) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:97:11: 'const' type constant_declarators ';'
					{
					string_literal37=(Token)match(input,112,FOLLOW_112_in_class_member_declaration904); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal37_tree = (CommonTree)adaptor.create(string_literal37);
					adaptor.addChild(root_0, string_literal37_tree);
					}

					pushFollow(FOLLOW_type_in_class_member_declaration908);
					type38=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type38.getTree());

					pushFollow(FOLLOW_constant_declarators_in_class_member_declaration912);
					constant_declarators39=constant_declarators();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators39.getTree());

					char_literal40=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_member_declaration916); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal40_tree = (CommonTree)adaptor.create(char_literal40);
					adaptor.addChild(root_0, char_literal40_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:98:11: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
					{
					string_literal41=(Token)match(input,159,FOLLOW_159_in_class_member_declaration929); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal41_tree = (CommonTree)adaptor.create(string_literal41);
					adaptor.addChild(root_0, string_literal41_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:98:21: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
					int alt19=4;
					switch ( input.LA(1) ) {
					case Character_literal:
					case FALSE:
					case Hex_number:
					case IDENTIFIER:
					case NULL:
					case NUMBER:
					case Real_literal:
					case STRINGLITERAL:
					case TRUE:
					case Verbatim_string_literal:
					case 95:
					case 97:
					case 98:
					case 100:
					case 101:
					case 103:
					case 105:
					case 106:
					case 109:
					case 114:
					case 117:
					case 119:
					case 120:
					case 122:
					case 126:
					case 129:
					case 132:
					case 135:
					case 138:
					case 141:
					case 143:
					case 144:
					case 146:
					case 147:
					case 148:
					case 151:
					case 152:
					case 154:
					case 157:
					case 160:
					case 162:
					case 167:
					case 169:
					case 171:
					case 172:
					case 173:
					case 177:
					case 183:
					case 185:
					case 186:
					case 189:
					case 190:
					case 194:
					case 196:
						{
						alt19=1;
						}
						break;
					case 139:
						{
						alt19=2;
						}
						break;
					case 111:
						{
						alt19=3;
						}
						break;
					case 178:
						{
						alt19=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 19, 0, input);
						throw nvae;
					}
					switch (alt19) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:98:22: method_declaration
							{
							pushFollow(FOLLOW_method_declaration_in_class_member_declaration932);
							method_declaration42=method_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration42.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:99:30: interface_declaration
							{
							pushFollow(FOLLOW_interface_declaration_in_class_member_declaration964);
							interface_declaration43=interface_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration43.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:100:30: class_declaration
							{
							pushFollow(FOLLOW_class_declaration_in_class_member_declaration996);
							class_declaration44=class_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration44.getTree());

							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:101:30: struct_declaration
							{
							pushFollow(FOLLOW_struct_declaration_in_class_member_declaration1028);
							struct_declaration45=struct_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration45.getTree());

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:102:11: e= 'void' aa= method_declaration
					{
					e=(Token)match(input,192,FOLLOW_192_in_class_member_declaration1044); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					e_tree = (CommonTree)adaptor.create(e);
					adaptor.addChild(root_0, e_tree);
					}

					pushFollow(FOLLOW_method_declaration_in_class_member_declaration1049);
					aa=method_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, aa.getTree());

					if ( state.backtracking==0 ) {res=new class_member_declaration_meth((b!=null?((csParser.attributes_return)b).t:null),(c!=null?((csParser.modifiers_return)c).t:null),new type(e_tree),(aa!=null?((csParser.method_declaration_return)aa).t:null));}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:103:11: d= type ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration )
					{
					pushFollow(FOLLOW_type_in_class_member_declaration1065);
					d=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:103:18: ( ( member_name '(' )=>aa= method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration |ab= field_declaration | operator_declaration )
					int alt20=6;
					switch ( input.LA(1) ) {
					case 103:
					case 106:
					case 109:
					case 114:
					case 119:
					case 129:
					case 138:
					case 146:
					case 151:
					case 169:
					case 173:
					case 177:
					case 185:
					case 186:
					case 189:
						{
						int LA20_1 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENTIFIER:
					case 95:
					case 97:
					case 98:
					case 100:
					case 101:
					case 105:
					case 117:
					case 120:
					case 122:
					case 126:
					case 132:
					case 135:
					case 141:
					case 143:
					case 144:
					case 147:
					case 148:
					case 152:
					case 154:
					case 157:
					case 160:
					case 162:
					case 167:
					case 171:
					case 172:
					case 183:
					case 190:
					case 194:
					case 196:
						{
						int LA20_2 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}
						else if ( (synpred4_cs()) ) {
							alt20=3;
						}
						else if ( (true) ) {
							alt20=5;
						}

						}
						break;
					case Real_literal:
						{
						int LA20_3 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NUMBER:
						{
						int LA20_4 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Hex_number:
						{
						int LA20_5 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Character_literal:
						{
						int LA20_6 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case STRINGLITERAL:
						{
						int LA20_7 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 7, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Verbatim_string_literal:
						{
						int LA20_8 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 8, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TRUE:
						{
						int LA20_9 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 9, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case FALSE:
						{
						int LA20_10 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NULL:
						{
						int LA20_11 = input.LA(2);
						if ( (synpred2_cs()) ) {
							alt20=1;
						}
						else if ( (synpred3_cs()) ) {
							alt20=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 20, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case 180:
						{
						alt20=4;
						}
						break;
					case 153:
						{
						alt20=6;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 20, 0, input);
						throw nvae;
					}
					switch (alt20) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:103:20: ( member_name '(' )=>aa= method_declaration
							{
							pushFollow(FOLLOW_method_declaration_in_class_member_declaration1081);
							aa=method_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, aa.getTree());

							if ( state.backtracking==0 ) {res=new class_member_declaration_meth((b!=null?((csParser.attributes_return)b).t:null),(c!=null?((csParser.modifiers_return)c).t:null),(d!=null?((csParser.type_return)d).t:null),(aa!=null?((csParser.method_declaration_return)aa).t:null));}
							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:104:22: ( member_name '{' )=> property_declaration
							{
							pushFollow(FOLLOW_property_declaration_in_class_member_declaration1116);
							property_declaration46=property_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration46.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:105:22: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
							{
							pushFollow(FOLLOW_type_name_in_class_member_declaration1153);
							type_name47=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name47.getTree());

							char_literal48=(Token)match(input,DOT,FOLLOW_DOT_in_class_member_declaration1155); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal48_tree = (CommonTree)adaptor.create(char_literal48);
							adaptor.addChild(root_0, char_literal48_tree);
							}

							pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration1157);
							indexer_declaration49=indexer_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration49.getTree());

							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:106:18: indexer_declaration
							{
							pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration1176);
							indexer_declaration50=indexer_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration50.getTree());

							}
							break;
						case 5 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:107:18: ab= field_declaration
							{
							pushFollow(FOLLOW_field_declaration_in_class_member_declaration1205);
							ab=field_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ab.getTree());

							if ( state.backtracking==0 ) {res=new class_member_declaration_field((b!=null?((csParser.attributes_return)b).t:null),(c!=null?((csParser.modifiers_return)c).t:null),(d!=null?((csParser.type_return)d).t:null),(ab!=null?((csParser.field_declaration_return)ab).t:null));}
							}
							break;
						case 6 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:108:18: operator_declaration
							{
							pushFollow(FOLLOW_operator_declaration_in_class_member_declaration1232);
							operator_declaration51=operator_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declaration51.getTree());

							}
							break;

					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:113:11: a= class_declaration
					{
					pushFollow(FOLLOW_class_declaration_in_class_member_declaration1290);
					a=class_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res=new class_member_declaration((b!=null?((csParser.attributes_return)b).t:null),(c!=null?((csParser.modifiers_return)c).t:null),(a!=null?((csParser.class_declaration_return)a).t:null));}
					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:114:11: struct_declaration
					{
					pushFollow(FOLLOW_struct_declaration_in_class_member_declaration1323);
					struct_declaration52=struct_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration52.getTree());

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:115:11: enum_declaration
					{
					pushFollow(FOLLOW_enum_declaration_in_class_member_declaration1343);
					enum_declaration53=enum_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration53.getTree());

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:116:11: event_declaration
					{
					pushFollow(FOLLOW_event_declaration_in_class_member_declaration1357);
					event_declaration54=event_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_declaration54.getTree());

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:117:11: interface_declaration
					{
					pushFollow(FOLLOW_interface_declaration_in_class_member_declaration1385);
					interface_declaration55=interface_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration55.getTree());

					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:118:11: delegate_declaration
					{
					pushFollow(FOLLOW_delegate_declaration_in_class_member_declaration1405);
					delegate_declaration56=delegate_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration56.getTree());

					}
					break;
				case 11 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:119:11: conversion_operator_declaration
					{
					pushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration1425);
					conversion_operator_declaration57=conversion_operator_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declaration57.getTree());

					}
					break;
				case 12 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:120:11: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_class_member_declaration1437);
					constructor_declaration58=constructor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration58.getTree());

					}
					break;
				case 13 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:121:11: destructor_declaration
					{
					pushFollow(FOLLOW_destructor_declaration_in_class_member_declaration1457);
					destructor_declaration59=destructor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, destructor_declaration59.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, class_member_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_member_declaration"


	public static class primary_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:126:1: primary_expression returns [expression t] : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* |a= primary_expression_start (b= primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=>c= object_creation_expression (d= primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression |e= object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
	public final csParser.primary_expression_return primary_expression() throws RecognitionException {
		csParser.primary_expression_return retval = new csParser.primary_expression_return();
		retval.start = input.LT(1);
		int primary_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal60=null;
		Token string_literal63=null;
		Token string_literal66=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope e =null;
		ParserRuleReturnScope brackets61 =null;
		ParserRuleReturnScope primary_expression_part62 =null;
		ParserRuleReturnScope brackets64 =null;
		ParserRuleReturnScope primary_expression_part65 =null;
		ParserRuleReturnScope delegate_creation_expression67 =null;
		ParserRuleReturnScope anonymous_object_creation_expression68 =null;
		ParserRuleReturnScope sizeof_expression69 =null;
		ParserRuleReturnScope checked_expression70 =null;
		ParserRuleReturnScope unchecked_expression71 =null;
		ParserRuleReturnScope default_value_expression72 =null;
		ParserRuleReturnScope anonymous_method_expression73 =null;

		CommonTree string_literal60_tree=null;
		CommonTree string_literal63_tree=null;
		CommonTree string_literal66_tree=null;

		expression res = null;primary_expression res2=null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:128:132: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* |a= primary_expression_start (b= primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=>c= object_creation_expression (d= primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression |e= object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
			int alt27=9;
			switch ( input.LA(1) ) {
			case 180:
				{
				int LA27_1 = input.LA(2);
				if ( (synpred5_cs()) ) {
					alt27=1;
				}
				else if ( (synpred6_cs()) ) {
					alt27=2;
				}
				else if ( (true) ) {
					alt27=3;
				}

				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 68:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt27=3;
				}
				break;
			case 150:
				{
				alt27=4;
				}
				break;
			case 174:
				{
				alt27=5;
				}
				break;
			case 110:
				{
				alt27=6;
				}
				break;
			case 187:
				{
				alt27=7;
				}
				break;
			case 115:
				{
				alt27=8;
				}
				break;
			case 116:
				{
				alt27=9;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 27, 0, input);
				throw nvae;
			}
			switch (alt27) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:129:3: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal60=(Token)match(input,180,FOLLOW_180_in_primary_expression1516); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal60_tree = (CommonTree)adaptor.create(string_literal60);
					adaptor.addChild(root_0, string_literal60_tree);
					}

					pushFollow(FOLLOW_brackets_in_primary_expression1520);
					brackets61=brackets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets61.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:129:47: ( primary_expression_part )*
					loop22:
					while (true) {
						int alt22=2;
						int LA22_0 = input.LA(1);
						if ( (LA22_0==DOT||LA22_0==PTR||LA22_0==68||LA22_0==91) ) {
							alt22=1;
						}

						switch (alt22) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:129:47: primary_expression_part
							{
							pushFollow(FOLLOW_primary_expression_part_in_primary_expression1524);
							primary_expression_part62=primary_expression_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part62.getTree());

							}
							break;

						default :
							break loop22;
						}
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:130:4: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal63=(Token)match(input,180,FOLLOW_180_in_primary_expression1540); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal63_tree = (CommonTree)adaptor.create(string_literal63);
					adaptor.addChild(root_0, string_literal63_tree);
					}

					pushFollow(FOLLOW_brackets_in_primary_expression1544);
					brackets64=brackets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets64.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:130:47: ( primary_expression_part )*
					loop23:
					while (true) {
						int alt23=2;
						int LA23_0 = input.LA(1);
						if ( (LA23_0==DOT||LA23_0==PTR||LA23_0==68||LA23_0==91) ) {
							alt23=1;
						}

						switch (alt23) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:130:47: primary_expression_part
							{
							pushFollow(FOLLOW_primary_expression_part_in_primary_expression1548);
							primary_expression_part65=primary_expression_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part65.getTree());

							}
							break;

						default :
							break loop23;
						}
					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:131:5: a= primary_expression_start (b= primary_expression_part )*
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primary_expression_start_in_primary_expression1557);
					a=primary_expression_start();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res2 = new primary_expression((a!=null?((csParser.primary_expression_start_return)a).t:null));}
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:131:71: (b= primary_expression_part )*
					loop24:
					while (true) {
						int alt24=2;
						int LA24_0 = input.LA(1);
						if ( (LA24_0==DOT||LA24_0==PTR||LA24_0==68||LA24_0==91) ) {
							alt24=1;
						}

						switch (alt24) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:131:72: b= primary_expression_part
							{
							pushFollow(FOLLOW_primary_expression_part_in_primary_expression1564);
							b=primary_expression_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

							if ( state.backtracking==0 ) {if(res2.isArrayNull()){res2.creerArray();res2.add((b!=null?((csParser.primary_expression_part_return)b).t:null));}else res2.add((b!=null?((csParser.primary_expression_part_return)b).t:null));}
							}
							break;

						default :
							break loop24;
						}
					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:132:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=>c= object_creation_expression (d= primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression |e= object_creation_expression | anonymous_object_creation_expression )
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal66=(Token)match(input,150,FOLLOW_150_in_primary_expression1573); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal66_tree = (CommonTree)adaptor.create(string_literal66);
					adaptor.addChild(root_0, string_literal66_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:132:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=>c= object_creation_expression (d= primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression |e= object_creation_expression | anonymous_object_creation_expression )
					int alt26=4;
					switch ( input.LA(1) ) {
					case 103:
					case 106:
					case 109:
					case 114:
					case 119:
					case 129:
					case 138:
					case 146:
					case 151:
					case 169:
					case 173:
					case 177:
					case 185:
					case 186:
					case 189:
						{
						int LA26_1 = input.LA(2);
						if ( (synpred7_cs()) ) {
							alt26=1;
						}
						else if ( (true) ) {
							alt26=3;
						}

						}
						break;
					case IDENTIFIER:
					case 95:
					case 97:
					case 98:
					case 100:
					case 101:
					case 105:
					case 117:
					case 120:
					case 122:
					case 126:
					case 132:
					case 135:
					case 141:
					case 143:
					case 144:
					case 147:
					case 148:
					case 152:
					case 154:
					case 157:
					case 160:
					case 162:
					case 167:
					case 171:
					case 172:
					case 183:
					case 190:
					case 194:
					case 196:
						{
						int LA26_2 = input.LA(2);
						if ( (synpred7_cs()) ) {
							alt26=1;
						}
						else if ( (synpred8_cs()) ) {
							alt26=2;
						}
						else if ( (true) ) {
							alt26=3;
						}

						}
						break;
					case 192:
						{
						int LA26_3 = input.LA(2);
						if ( (synpred7_cs()) ) {
							alt26=1;
						}
						else if ( (true) ) {
							alt26=3;
						}

						}
						break;
					case 197:
						{
						alt26=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 26, 0, input);
						throw nvae;
					}
					switch (alt26) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:132:14: ( object_creation_expression ( '.' | '->' | '[' ) )=>c= object_creation_expression (d= primary_expression_part )+
							{
							pushFollow(FOLLOW_object_creation_expression_in_primary_expression1603);
							c=object_creation_expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:133:38: (d= primary_expression_part )+
							int cnt25=0;
							loop25:
							while (true) {
								int alt25=2;
								int LA25_0 = input.LA(1);
								if ( (LA25_0==DOT||LA25_0==PTR||LA25_0==68||LA25_0==91) ) {
									alt25=1;
								}

								switch (alt25) {
								case 1 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:133:38: d= primary_expression_part
									{
									pushFollow(FOLLOW_primary_expression_part_in_primary_expression1609);
									d=primary_expression_part();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

									}
									break;

								default :
									if ( cnt25 >= 1 ) break loop25;
									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee = new EarlyExitException(25, input);
									throw eee;
								}
								cnt25++;
							}

							if ( state.backtracking==0 ) {res = new primary_expression_new((c!=null?((csParser.object_creation_expression_return)c).t:null));}
							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:136:7: ( delegate_creation_expression )=> delegate_creation_expression
							{
							pushFollow(FOLLOW_delegate_creation_expression_in_primary_expression1637);
							delegate_creation_expression67=delegate_creation_expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_creation_expression67.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:137:7: e= object_creation_expression
							{
							pushFollow(FOLLOW_object_creation_expression_in_primary_expression1647);
							e=object_creation_expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

							if ( state.backtracking==0 ) {res = new primary_expression_new((e!=null?((csParser.object_creation_expression_return)e).t:null));}
							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:138:7: anonymous_object_creation_expression
							{
							pushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression1657);
							anonymous_object_creation_expression68=anonymous_object_creation_expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_creation_expression68.getTree());

							}
							break;

					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:139:4: sizeof_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_sizeof_expression_in_primary_expression1670);
					sizeof_expression69=sizeof_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sizeof_expression69.getTree());

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:140:4: checked_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_checked_expression_in_primary_expression1681);
					checked_expression70=checked_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, checked_expression70.getTree());

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:141:4: unchecked_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unchecked_expression_in_primary_expression1700);
					unchecked_expression71=unchecked_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unchecked_expression71.getTree());

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:142:4: default_value_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_default_value_expression_in_primary_expression1717);
					default_value_expression72=default_value_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, default_value_expression72.getTree());

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:143:4: anonymous_method_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression1730);
					anonymous_method_expression73=anonymous_method_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_method_expression73.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null)retval.t =res; else{ if(res2!=null) {retval.t =(expression)res2;}else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, primary_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primary_expression"


	public static class primary_expression_start_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary_expression_start"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:146:1: primary_expression_start returns [CsharpNode t] : (a= predefined_type | ( identifier '<' )=> identifier generic_argument_list |d= identifier ( '::' identifier )? | 'this' | 'base' |b= paren_expression | typeof_expression |c= literal );
	public final csParser.primary_expression_start_return primary_expression_start() throws RecognitionException {
		csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
		retval.start = input.LT(1);
		int primary_expression_start_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal76=null;
		Token string_literal78=null;
		Token string_literal79=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope identifier74 =null;
		ParserRuleReturnScope generic_argument_list75 =null;
		ParserRuleReturnScope identifier77 =null;
		ParserRuleReturnScope typeof_expression80 =null;

		CommonTree string_literal76_tree=null;
		CommonTree string_literal78_tree=null;
		CommonTree string_literal79_tree=null;

		CsharpNode res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:148:87: (a= predefined_type | ( identifier '<' )=> identifier generic_argument_list |d= identifier ( '::' identifier )? | 'this' | 'base' |b= paren_expression | typeof_expression |c= literal )
			int alt29=8;
			switch ( input.LA(1) ) {
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt29=1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA29_2 = input.LA(2);
				if ( (synpred9_cs()) ) {
					alt29=2;
				}
				else if ( (true) ) {
					alt29=3;
				}

				}
				break;
			case 180:
				{
				alt29=4;
				}
				break;
			case 102:
				{
				alt29=5;
				}
				break;
			case 68:
				{
				alt29=6;
				}
				break;
			case 184:
				{
				alt29=7;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt29=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:149:2: a= predefined_type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_predefined_type_in_primary_expression_start1760);
					a=predefined_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res=(a!=null?((csParser.predefined_type_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:150:4: ( identifier '<' )=> identifier generic_argument_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_primary_expression_start1790);
					identifier74=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier74.getTree());

					pushFollow(FOLLOW_generic_argument_list_in_primary_expression_start1794);
					generic_argument_list75=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list75.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:151:4: d= identifier ( '::' identifier )?
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_primary_expression_start1801);
					d=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:151:17: ( '::' identifier )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==80) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:151:18: '::' identifier
							{
							string_literal76=(Token)match(input,80,FOLLOW_80_in_primary_expression_start1804); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal76_tree = (CommonTree)adaptor.create(string_literal76);
							adaptor.addChild(root_0, string_literal76_tree);
							}

							pushFollow(FOLLOW_identifier_in_primary_expression_start1808);
							identifier77=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier77.getTree());

							}
							break;

					}

					if ( state.backtracking==0 ) {res = (d!=null?((csParser.identifier_return)d).t:null);}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:152:4: 'this'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal78=(Token)match(input,180,FOLLOW_180_in_primary_expression_start1817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal78_tree = (CommonTree)adaptor.create(string_literal78);
					adaptor.addChild(root_0, string_literal78_tree);
					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:153:4: 'base'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal79=(Token)match(input,102,FOLLOW_102_in_primary_expression_start1823); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal79_tree = (CommonTree)adaptor.create(string_literal79);
					adaptor.addChild(root_0, string_literal79_tree);
					}

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:154:4: b= paren_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_paren_expression_in_primary_expression_start1830);
					b=paren_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res=(b!=null?((csParser.paren_expression_return)b).t:null);}
					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:155:4: typeof_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_typeof_expression_in_primary_expression_start1836);
					typeof_expression80=typeof_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression80.getTree());

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:156:4: c= literal
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_literal_in_primary_expression_start1856);
					c=literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {res=(c!=null?((csParser.literal_return)c).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, primary_expression_start_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primary_expression_start"


	public static class primary_expression_part_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary_expression_part"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:159:1: primary_expression_part returns [CsharpNode t] : (a= access_identifier |b= brackets_or_arguments );
	public final csParser.primary_expression_part_return primary_expression_part() throws RecognitionException {
		csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
		retval.start = input.LT(1);
		int primary_expression_part_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:159:48: (a= access_identifier |b= brackets_or_arguments )
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==DOT||LA30_0==PTR) ) {
				alt30=1;
			}
			else if ( (LA30_0==68||LA30_0==91) ) {
				alt30=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 30, 0, input);
				throw nvae;
			}

			switch (alt30) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:160:3: a= access_identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_access_identifier_in_primary_expression_part1876);
					a=access_identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.access_identifier_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:161:4: b= brackets_or_arguments
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part1884);
					b=brackets_or_arguments();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.brackets_or_arguments_return)b).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, primary_expression_part_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primary_expression_part"


	public static class access_identifier_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "access_identifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:162:1: access_identifier returns [CsharpNode t] : a= access_operator b= type_or_generic ;
	public final csParser.access_identifier_return access_identifier() throws RecognitionException {
		csParser.access_identifier_return retval = new csParser.access_identifier_return();
		retval.start = input.LT(1);
		int access_identifier_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:163:31: (a= access_operator b= type_or_generic )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:164:2: a= access_operator b= type_or_generic
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_access_operator_in_access_identifier1904);
			a=access_operator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_type_or_generic_in_access_identifier1910);
			b=type_or_generic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t =new access_identifier((a!=null?((csParser.access_operator_return)a).t:null),(b!=null?((csParser.type_or_generic_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, access_identifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "access_identifier"


	public static class access_operator_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "access_operator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:165:1: access_operator returns [CsharpNode t] : ( '.' | '->' );
	public final csParser.access_operator_return access_operator() throws RecognitionException {
		csParser.access_operator_return retval = new csParser.access_operator_return();
		retval.start = input.LT(1);
		int access_operator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set81=null;

		CommonTree set81_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:166:40: ( '.' | '->' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set81=input.LT(1);
			if ( input.LA(1)==DOT||input.LA(1)==PTR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set81));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new acces_operator(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, access_operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "access_operator"


	public static class brackets_or_arguments_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brackets_or_arguments"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:168:1: brackets_or_arguments returns [CsharpNode t] : (a= brackets |b= arguments );
	public final csParser.brackets_or_arguments_return brackets_or_arguments() throws RecognitionException {
		csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
		retval.start = input.LT(1);
		int brackets_or_arguments_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:168:45: (a= brackets |b= arguments )
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==91) ) {
				alt31=1;
			}
			else if ( (LA31_0==68) ) {
				alt31=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 31, 0, input);
				throw nvae;
			}

			switch (alt31) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:169:2: a= brackets
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brackets_in_brackets_or_arguments1949);
					a=brackets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.brackets_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:169:25: b= arguments
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arguments_in_brackets_or_arguments1956);
					b=arguments();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t = (b!=null?((csParser.arguments_return)b).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, brackets_or_arguments_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "brackets_or_arguments"


	public static class brackets_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brackets"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:170:1: brackets returns [expression t] : '[' (a= expression_list )? ']' ;
	public final csParser.brackets_return brackets() throws RecognitionException {
		csParser.brackets_return retval = new csParser.brackets_return();
		retval.start = input.LT(1);
		int brackets_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal82=null;
		Token char_literal83=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal82_tree=null;
		CommonTree char_literal83_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:170:32: ( '[' (a= expression_list )? ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:171:2: '[' (a= expression_list )? ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal82=(Token)match(input,91,FOLLOW_91_in_brackets1970); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal82_tree = (CommonTree)adaptor.create(char_literal82);
			adaptor.addChild(root_0, char_literal82_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:171:9: (a= expression_list )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==Character_literal||LA32_0==FALSE||(LA32_0 >= Hex_number && LA32_0 <= IDENTIFIER)||(LA32_0 >= MINUS && LA32_0 <= NUMBER)||LA32_0==Real_literal||LA32_0==STRINGLITERAL||LA32_0==TRUE||LA32_0==Verbatim_string_literal||LA32_0==61||LA32_0==66||(LA32_0 >= 68 && LA32_0 <= 69)||(LA32_0 >= 71 && LA32_0 <= 72)||LA32_0==75||LA32_0==95||(LA32_0 >= 97 && LA32_0 <= 98)||(LA32_0 >= 100 && LA32_0 <= 103)||(LA32_0 >= 105 && LA32_0 <= 106)||(LA32_0 >= 109 && LA32_0 <= 110)||(LA32_0 >= 114 && LA32_0 <= 117)||(LA32_0 >= 119 && LA32_0 <= 120)||LA32_0==122||LA32_0==126||LA32_0==129||LA32_0==132||LA32_0==135||LA32_0==138||LA32_0==141||(LA32_0 >= 143 && LA32_0 <= 144)||(LA32_0 >= 146 && LA32_0 <= 148)||(LA32_0 >= 150 && LA32_0 <= 152)||LA32_0==154||LA32_0==157||LA32_0==160||LA32_0==162||LA32_0==167||LA32_0==169||(LA32_0 >= 171 && LA32_0 <= 174)||LA32_0==177||LA32_0==180||(LA32_0 >= 183 && LA32_0 <= 187)||(LA32_0 >= 189 && LA32_0 <= 190)||LA32_0==194||LA32_0==196||LA32_0==202) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:171:9: a= expression_list
					{
					pushFollow(FOLLOW_expression_list_in_brackets1976);
					a=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.expression_list_return)a).t:null);}
			char_literal83=(Token)match(input,92,FOLLOW_92_in_brackets1982); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal83_tree = (CommonTree)adaptor.create(char_literal83);
			adaptor.addChild(root_0, char_literal83_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, brackets_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "brackets"


	public static class paren_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "paren_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:172:1: paren_expression returns [expression t] : '(' a= expression ')' ;
	public final csParser.paren_expression_return paren_expression() throws RecognitionException {
		csParser.paren_expression_return retval = new csParser.paren_expression_return();
		retval.start = input.LT(1);
		int paren_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal84=null;
		Token char_literal85=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal84_tree=null;
		CommonTree char_literal85_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:172:40: ( '(' a= expression ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:173:2: '(' a= expression ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal84=(Token)match(input,68,FOLLOW_68_in_paren_expression1996); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal84_tree = (CommonTree)adaptor.create(char_literal84);
			adaptor.addChild(root_0, char_literal84_tree);
			}

			pushFollow(FOLLOW_expression_in_paren_expression2002);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal85=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression2006); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal85_tree = (CommonTree)adaptor.create(char_literal85);
			adaptor.addChild(root_0, char_literal85_tree);
			}

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, paren_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "paren_expression"


	public static class arguments_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arguments"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:174:1: arguments returns [CsharpNode t] : '(' (a= argument_list )? ')' ;
	public final csParser.arguments_return arguments() throws RecognitionException {
		csParser.arguments_return retval = new csParser.arguments_return();
		retval.start = input.LT(1);
		int arguments_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal86=null;
		Token char_literal87=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal86_tree=null;
		CommonTree char_literal87_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:174:33: ( '(' (a= argument_list )? ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:175:2: '(' (a= argument_list )? ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal86=(Token)match(input,68,FOLLOW_68_in_arguments2020); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal86_tree = (CommonTree)adaptor.create(char_literal86);
			adaptor.addChild(root_0, char_literal86_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:175:9: (a= argument_list )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==Character_literal||LA33_0==FALSE||(LA33_0 >= Hex_number && LA33_0 <= IDENTIFIER)||(LA33_0 >= MINUS && LA33_0 <= NUMBER)||LA33_0==Real_literal||LA33_0==STRINGLITERAL||LA33_0==TRUE||LA33_0==Verbatim_string_literal||LA33_0==61||LA33_0==66||(LA33_0 >= 68 && LA33_0 <= 69)||(LA33_0 >= 71 && LA33_0 <= 72)||LA33_0==75||LA33_0==79||LA33_0==95||(LA33_0 >= 97 && LA33_0 <= 98)||(LA33_0 >= 100 && LA33_0 <= 103)||(LA33_0 >= 105 && LA33_0 <= 106)||(LA33_0 >= 109 && LA33_0 <= 110)||(LA33_0 >= 114 && LA33_0 <= 117)||(LA33_0 >= 119 && LA33_0 <= 120)||LA33_0==122||LA33_0==126||LA33_0==129||LA33_0==132||LA33_0==135||LA33_0==138||LA33_0==141||(LA33_0 >= 143 && LA33_0 <= 144)||(LA33_0 >= 146 && LA33_0 <= 148)||(LA33_0 >= 150 && LA33_0 <= 152)||(LA33_0 >= 154 && LA33_0 <= 155)||LA33_0==157||LA33_0==160||LA33_0==162||(LA33_0 >= 166 && LA33_0 <= 167)||LA33_0==169||(LA33_0 >= 171 && LA33_0 <= 174)||LA33_0==177||LA33_0==180||(LA33_0 >= 183 && LA33_0 <= 187)||(LA33_0 >= 189 && LA33_0 <= 190)||LA33_0==194||LA33_0==196||LA33_0==202) ) {
				alt33=1;
			}
			switch (alt33) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:175:9: a= argument_list
					{
					pushFollow(FOLLOW_argument_list_in_arguments2026);
					a=argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.argument_list_return)a).t:null);}
			char_literal87=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments2033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal87_tree = (CommonTree)adaptor.create(char_literal87);
			adaptor.addChild(root_0, char_literal87_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, arguments_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arguments"


	public static class argument_list_return extends ParserRuleReturnScope {
		public argument_list t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "argument_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:176:1: argument_list returns [argument_list t] : a= argument ( ',' a= argument )* ;
	public final csParser.argument_list_return argument_list() throws RecognitionException {
		csParser.argument_list_return retval = new csParser.argument_list_return();
		retval.start = input.LT(1);
		int argument_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal88=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal88_tree=null;

		argument_list res = new argument_list();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:178:38: (a= argument ( ',' a= argument )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:179:2: a= argument ( ',' a= argument )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_argument_in_argument_list2057);
			a=argument();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.argument_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:179:30: ( ',' a= argument )*
			loop34:
			while (true) {
				int alt34=2;
				int LA34_0 = input.LA(1);
				if ( (LA34_0==74) ) {
					alt34=1;
				}

				switch (alt34) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:179:31: ',' a= argument
					{
					char_literal88=(Token)match(input,74,FOLLOW_74_in_argument_list2062); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal88_tree = (CommonTree)adaptor.create(char_literal88);
					adaptor.addChild(root_0, char_literal88_tree);
					}

					pushFollow(FOLLOW_argument_in_argument_list2066);
					a=argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.argument_return)a).t:null));}
					}
					break;

				default :
					break loop34;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, argument_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "argument_list"


	public static class argument_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "argument"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:181:1: argument returns [CsharpNode t] : ( argument_name argument_value |a= argument_value );
	public final csParser.argument_return argument() throws RecognitionException {
		csParser.argument_return retval = new csParser.argument_return();
		retval.start = input.LT(1);
		int argument_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope argument_name89 =null;
		ParserRuleReturnScope argument_value90 =null;


		CsharpNode res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:183:87: ( argument_name argument_value |a= argument_value )
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==79) ) {
				alt35=1;
			}
			else if ( (LA35_0==Character_literal||LA35_0==FALSE||(LA35_0 >= Hex_number && LA35_0 <= IDENTIFIER)||(LA35_0 >= MINUS && LA35_0 <= NUMBER)||LA35_0==Real_literal||LA35_0==STRINGLITERAL||LA35_0==TRUE||LA35_0==Verbatim_string_literal||LA35_0==61||LA35_0==66||(LA35_0 >= 68 && LA35_0 <= 69)||(LA35_0 >= 71 && LA35_0 <= 72)||LA35_0==75||LA35_0==95||(LA35_0 >= 97 && LA35_0 <= 98)||(LA35_0 >= 100 && LA35_0 <= 103)||(LA35_0 >= 105 && LA35_0 <= 106)||(LA35_0 >= 109 && LA35_0 <= 110)||(LA35_0 >= 114 && LA35_0 <= 117)||(LA35_0 >= 119 && LA35_0 <= 120)||LA35_0==122||LA35_0==126||LA35_0==129||LA35_0==132||LA35_0==135||LA35_0==138||LA35_0==141||(LA35_0 >= 143 && LA35_0 <= 144)||(LA35_0 >= 146 && LA35_0 <= 148)||(LA35_0 >= 150 && LA35_0 <= 152)||(LA35_0 >= 154 && LA35_0 <= 155)||LA35_0==157||LA35_0==160||LA35_0==162||(LA35_0 >= 166 && LA35_0 <= 167)||LA35_0==169||(LA35_0 >= 171 && LA35_0 <= 174)||LA35_0==177||LA35_0==180||(LA35_0 >= 183 && LA35_0 <= 187)||(LA35_0 >= 189 && LA35_0 <= 190)||LA35_0==194||LA35_0==196||LA35_0==202) ) {
				alt35=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 35, 0, input);
				throw nvae;
			}

			switch (alt35) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:184:2: argument_name argument_value
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_argument_name_in_argument2093);
					argument_name89=argument_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name89.getTree());

					pushFollow(FOLLOW_argument_value_in_argument2097);
					argument_value90=argument_value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_value90.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:185:5: a= argument_value
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_argument_value_in_argument2105);
					a=argument_value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res = new argument((a!=null?((csParser.argument_value_return)a).t:null));}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, argument_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class argument_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "argument_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:186:1: argument_name : ':' ;
	public final csParser.argument_name_return argument_name() throws RecognitionException {
		csParser.argument_name_return retval = new csParser.argument_name_return();
		retval.start = input.LT(1);
		int argument_name_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal91=null;

		CommonTree char_literal91_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:186:14: ( ':' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:187:5: ':'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal91=(Token)match(input,79,FOLLOW_79_in_argument_name2116); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal91_tree = (CommonTree)adaptor.create(char_literal91);
			adaptor.addChild(root_0, char_literal91_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, argument_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "argument_name"


	public static class argument_value_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "argument_value"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:188:1: argument_value returns [CsharpNode t] : (a= expression | ref_variable_reference | 'out' variable_reference );
	public final csParser.argument_value_return argument_value() throws RecognitionException {
		csParser.argument_value_return retval = new csParser.argument_value_return();
		retval.start = input.LT(1);
		int argument_value_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal93=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope ref_variable_reference92 =null;
		ParserRuleReturnScope variable_reference94 =null;

		CommonTree string_literal93_tree=null;

		CsharpNode res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:190:87: (a= expression | ref_variable_reference | 'out' variable_reference )
			int alt36=3;
			switch ( input.LA(1) ) {
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt36=1;
				}
				break;
			case 166:
				{
				alt36=2;
				}
				break;
			case 155:
				{
				alt36=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 36, 0, input);
				throw nvae;
			}
			switch (alt36) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:191:2: a= expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_argument_value2140);
					a=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res = (a!=null?((csParser.expression_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:192:4: ref_variable_reference
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ref_variable_reference_in_argument_value2147);
					ref_variable_reference92=ref_variable_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference92.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:193:4: 'out' variable_reference
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal93=(Token)match(input,155,FOLLOW_155_in_argument_value2153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal93_tree = (CommonTree)adaptor.create(string_literal93);
					adaptor.addChild(root_0, string_literal93_tree);
					}

					pushFollow(FOLLOW_variable_reference_in_argument_value2157);
					variable_reference94=variable_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference94.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, argument_value_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "argument_value"


	public static class ref_variable_reference_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ref_variable_reference"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:194:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
	public final csParser.ref_variable_reference_return ref_variable_reference() throws RecognitionException {
		csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
		retval.start = input.LT(1);
		int ref_variable_reference_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal95=null;
		Token char_literal96=null;
		Token char_literal98=null;
		ParserRuleReturnScope type97 =null;
		ParserRuleReturnScope ref_variable_reference99 =null;
		ParserRuleReturnScope variable_reference100 =null;
		ParserRuleReturnScope variable_reference101 =null;

		CommonTree string_literal95_tree=null;
		CommonTree char_literal96_tree=null;
		CommonTree char_literal98_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:194:23: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:195:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal95=(Token)match(input,166,FOLLOW_166_in_ref_variable_reference2165); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal95_tree = (CommonTree)adaptor.create(string_literal95);
			adaptor.addChild(root_0, string_literal95_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==68) ) {
				int LA38_1 = input.LA(2);
				if ( (synpred10_cs()) ) {
					alt38=1;
				}
				else if ( (true) ) {
					alt38=2;
				}

			}
			else if ( (LA38_0==Character_literal||LA38_0==FALSE||(LA38_0 >= Hex_number && LA38_0 <= IDENTIFIER)||(LA38_0 >= MINUS && LA38_0 <= NUMBER)||LA38_0==Real_literal||LA38_0==STRINGLITERAL||LA38_0==TRUE||LA38_0==Verbatim_string_literal||LA38_0==61||LA38_0==66||LA38_0==69||(LA38_0 >= 71 && LA38_0 <= 72)||LA38_0==75||LA38_0==95||(LA38_0 >= 97 && LA38_0 <= 98)||(LA38_0 >= 100 && LA38_0 <= 103)||(LA38_0 >= 105 && LA38_0 <= 106)||(LA38_0 >= 109 && LA38_0 <= 110)||(LA38_0 >= 114 && LA38_0 <= 117)||(LA38_0 >= 119 && LA38_0 <= 120)||LA38_0==122||LA38_0==126||LA38_0==129||LA38_0==132||LA38_0==135||LA38_0==138||LA38_0==141||(LA38_0 >= 143 && LA38_0 <= 144)||(LA38_0 >= 146 && LA38_0 <= 148)||(LA38_0 >= 150 && LA38_0 <= 152)||LA38_0==154||LA38_0==157||LA38_0==160||LA38_0==162||LA38_0==167||LA38_0==169||(LA38_0 >= 171 && LA38_0 <= 174)||LA38_0==177||LA38_0==180||(LA38_0 >= 183 && LA38_0 <= 187)||(LA38_0 >= 189 && LA38_0 <= 190)||LA38_0==194||LA38_0==196||LA38_0==202) ) {
				alt38=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}

			switch (alt38) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
					{
					char_literal96=(Token)match(input,68,FOLLOW_68_in_ref_variable_reference2187); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal96_tree = (CommonTree)adaptor.create(char_literal96);
					adaptor.addChild(root_0, char_literal96_tree);
					}

					pushFollow(FOLLOW_type_in_ref_variable_reference2191);
					type97=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type97.getTree());

					char_literal98=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference2195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal98_tree = (CommonTree)adaptor.create(char_literal98);
					adaptor.addChild(root_0, char_literal98_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:47: ( ref_variable_reference | variable_reference )
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==166) ) {
						alt37=1;
					}
					else if ( (LA37_0==Character_literal||LA37_0==FALSE||(LA37_0 >= Hex_number && LA37_0 <= IDENTIFIER)||(LA37_0 >= MINUS && LA37_0 <= NUMBER)||LA37_0==Real_literal||LA37_0==STRINGLITERAL||LA37_0==TRUE||LA37_0==Verbatim_string_literal||LA37_0==61||LA37_0==66||(LA37_0 >= 68 && LA37_0 <= 69)||(LA37_0 >= 71 && LA37_0 <= 72)||LA37_0==75||LA37_0==95||(LA37_0 >= 97 && LA37_0 <= 98)||(LA37_0 >= 100 && LA37_0 <= 103)||(LA37_0 >= 105 && LA37_0 <= 106)||(LA37_0 >= 109 && LA37_0 <= 110)||(LA37_0 >= 114 && LA37_0 <= 117)||(LA37_0 >= 119 && LA37_0 <= 120)||LA37_0==122||LA37_0==126||LA37_0==129||LA37_0==132||LA37_0==135||LA37_0==138||LA37_0==141||(LA37_0 >= 143 && LA37_0 <= 144)||(LA37_0 >= 146 && LA37_0 <= 148)||(LA37_0 >= 150 && LA37_0 <= 152)||LA37_0==154||LA37_0==157||LA37_0==160||LA37_0==162||LA37_0==167||LA37_0==169||(LA37_0 >= 171 && LA37_0 <= 174)||LA37_0==177||LA37_0==180||(LA37_0 >= 183 && LA37_0 <= 187)||(LA37_0 >= 189 && LA37_0 <= 190)||LA37_0==194||LA37_0==196||LA37_0==202) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 37, 0, input);
						throw nvae;
					}

					switch (alt37) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:48: ref_variable_reference
							{
							pushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference2200);
							ref_variable_reference99=ref_variable_reference();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference99.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:73: variable_reference
							{
							pushFollow(FOLLOW_variable_reference_in_ref_variable_reference2204);
							variable_reference100=variable_reference();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference100.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:198:5: variable_reference
					{
					pushFollow(FOLLOW_variable_reference_in_ref_variable_reference2240);
					variable_reference101=variable_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference101.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, ref_variable_reference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ref_variable_reference"


	public static class variable_reference_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variable_reference"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:200:1: variable_reference : expression ;
	public final csParser.variable_reference_return variable_reference() throws RecognitionException {
		csParser.variable_reference_return retval = new csParser.variable_reference_return();
		retval.start = input.LT(1);
		int variable_reference_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression102 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:200:19: ( expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:201:2: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_variable_reference2250);
			expression102=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression102.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, variable_reference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variable_reference"


	public static class rank_specifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rank_specifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:202:1: rank_specifiers : ( rank_specifier )+ ;
	public final csParser.rank_specifiers_return rank_specifiers() throws RecognitionException {
		csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
		retval.start = input.LT(1);
		int rank_specifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope rank_specifier103 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:202:16: ( ( rank_specifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:203:2: ( rank_specifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:203:2: ( rank_specifier )+
			int cnt39=0;
			loop39:
			while (true) {
				int alt39=2;
				int LA39_0 = input.LA(1);
				if ( (LA39_0==91) ) {
					int LA39_2 = input.LA(2);
					if ( (LA39_2==74||LA39_2==92) ) {
						alt39=1;
					}

				}

				switch (alt39) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:203:2: rank_specifier
					{
					pushFollow(FOLLOW_rank_specifier_in_rank_specifiers2258);
					rank_specifier103=rank_specifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier103.getTree());

					}
					break;

				default :
					if ( cnt39 >= 1 ) break loop39;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(39, input);
					throw eee;
				}
				cnt39++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, rank_specifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "rank_specifiers"


	public static class rank_specifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rank_specifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:204:1: rank_specifier : '[' ( dim_separators )? ']' ;
	public final csParser.rank_specifier_return rank_specifier() throws RecognitionException {
		csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
		retval.start = input.LT(1);
		int rank_specifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal104=null;
		Token char_literal106=null;
		ParserRuleReturnScope dim_separators105 =null;

		CommonTree char_literal104_tree=null;
		CommonTree char_literal106_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:204:15: ( '[' ( dim_separators )? ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:205:2: '[' ( dim_separators )? ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal104=(Token)match(input,91,FOLLOW_91_in_rank_specifier2276); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal104_tree = (CommonTree)adaptor.create(char_literal104);
			adaptor.addChild(root_0, char_literal104_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:205:8: ( dim_separators )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==74) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:205:8: dim_separators
					{
					pushFollow(FOLLOW_dim_separators_in_rank_specifier2280);
					dim_separators105=dim_separators();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dim_separators105.getTree());

					}
					break;

			}

			char_literal106=(Token)match(input,92,FOLLOW_92_in_rank_specifier2285); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal106_tree = (CommonTree)adaptor.create(char_literal106);
			adaptor.addChild(root_0, char_literal106_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, rank_specifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "rank_specifier"


	public static class dim_separators_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dim_separators"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:206:1: dim_separators : ( ',' )+ ;
	public final csParser.dim_separators_return dim_separators() throws RecognitionException {
		csParser.dim_separators_return retval = new csParser.dim_separators_return();
		retval.start = input.LT(1);
		int dim_separators_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal107=null;

		CommonTree char_literal107_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:206:15: ( ( ',' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:207:2: ( ',' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:207:2: ( ',' )+
			int cnt41=0;
			loop41:
			while (true) {
				int alt41=2;
				int LA41_0 = input.LA(1);
				if ( (LA41_0==74) ) {
					alt41=1;
				}

				switch (alt41) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:207:2: ','
					{
					char_literal107=(Token)match(input,74,FOLLOW_74_in_dim_separators2294); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal107_tree = (CommonTree)adaptor.create(char_literal107);
					adaptor.addChild(root_0, char_literal107_tree);
					}

					}
					break;

				default :
					if ( cnt41 >= 1 ) break loop41;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(41, input);
					throw eee;
				}
				cnt41++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, dim_separators_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dim_separators"


	public static class delegate_creation_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delegate_creation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:209:1: delegate_creation_expression : type_name '(' type_name ')' ;
	public final csParser.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
		csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
		retval.start = input.LT(1);
		int delegate_creation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal109=null;
		Token char_literal111=null;
		ParserRuleReturnScope type_name108 =null;
		ParserRuleReturnScope type_name110 =null;

		CommonTree char_literal109_tree=null;
		CommonTree char_literal111_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:209:29: ( type_name '(' type_name ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:211:2: type_name '(' type_name ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_name_in_delegate_creation_expression2307);
			type_name108=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name108.getTree());

			char_literal109=(Token)match(input,68,FOLLOW_68_in_delegate_creation_expression2311); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal109_tree = (CommonTree)adaptor.create(char_literal109);
			adaptor.addChild(root_0, char_literal109_tree);
			}

			pushFollow(FOLLOW_type_name_in_delegate_creation_expression2315);
			type_name110=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name110.getTree());

			char_literal111=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression2319); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal111_tree = (CommonTree)adaptor.create(char_literal111);
			adaptor.addChild(root_0, char_literal111_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, delegate_creation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "delegate_creation_expression"


	public static class anonymous_object_creation_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_object_creation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:212:1: anonymous_object_creation_expression : anonymous_object_initializer ;
	public final csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
		csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
		retval.start = input.LT(1);
		int anonymous_object_creation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope anonymous_object_initializer112 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:212:37: ( anonymous_object_initializer )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:214:2: anonymous_object_initializer
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2330);
			anonymous_object_initializer112=anonymous_object_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_initializer112.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, anonymous_object_creation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_object_creation_expression"


	public static class anonymous_object_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_object_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:215:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
	public final csParser.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
		csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
		retval.start = input.LT(1);
		int anonymous_object_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal113=null;
		Token char_literal115=null;
		Token char_literal116=null;
		ParserRuleReturnScope member_declarator_list114 =null;

		CommonTree char_literal113_tree=null;
		CommonTree char_literal115_tree=null;
		CommonTree char_literal116_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:215:29: ( '{' ( member_declarator_list )? ( ',' )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:216:2: '{' ( member_declarator_list )? ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal113=(Token)match(input,197,FOLLOW_197_in_anonymous_object_initializer2339); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal113_tree = (CommonTree)adaptor.create(char_literal113);
			adaptor.addChild(root_0, char_literal113_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:216:8: ( member_declarator_list )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==IDENTIFIER||LA42_0==95||(LA42_0 >= 97 && LA42_0 <= 98)||(LA42_0 >= 100 && LA42_0 <= 101)||LA42_0==105||LA42_0==117||LA42_0==120||LA42_0==122||LA42_0==126||LA42_0==132||LA42_0==135||LA42_0==141||(LA42_0 >= 143 && LA42_0 <= 144)||(LA42_0 >= 147 && LA42_0 <= 148)||LA42_0==152||LA42_0==154||LA42_0==157||LA42_0==160||LA42_0==162||LA42_0==167||(LA42_0 >= 171 && LA42_0 <= 172)||LA42_0==183||LA42_0==190||LA42_0==194||LA42_0==196) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:216:8: member_declarator_list
					{
					pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer2343);
					member_declarator_list114=member_declarator_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator_list114.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:216:34: ( ',' )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==74) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:216:34: ','
					{
					char_literal115=(Token)match(input,74,FOLLOW_74_in_anonymous_object_initializer2348); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal115_tree = (CommonTree)adaptor.create(char_literal115);
					adaptor.addChild(root_0, char_literal115_tree);
					}

					}
					break;

			}

			char_literal116=(Token)match(input,201,FOLLOW_201_in_anonymous_object_initializer2353); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal116_tree = (CommonTree)adaptor.create(char_literal116);
			adaptor.addChild(root_0, char_literal116_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, anonymous_object_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_object_initializer"


	public static class member_declarator_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "member_declarator_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:217:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
	public final csParser.member_declarator_list_return member_declarator_list() throws RecognitionException {
		csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
		retval.start = input.LT(1);
		int member_declarator_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal118=null;
		ParserRuleReturnScope member_declarator117 =null;
		ParserRuleReturnScope member_declarator119 =null;

		CommonTree char_literal118_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:217:23: ( member_declarator ( ',' member_declarator )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:218:2: member_declarator ( ',' member_declarator )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_member_declarator_in_member_declarator_list2361);
			member_declarator117=member_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator117.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:218:21: ( ',' member_declarator )*
			loop44:
			while (true) {
				int alt44=2;
				int LA44_0 = input.LA(1);
				if ( (LA44_0==74) ) {
					int LA44_1 = input.LA(2);
					if ( (LA44_1==IDENTIFIER||LA44_1==95||(LA44_1 >= 97 && LA44_1 <= 98)||(LA44_1 >= 100 && LA44_1 <= 101)||LA44_1==105||LA44_1==117||LA44_1==120||LA44_1==122||LA44_1==126||LA44_1==132||LA44_1==135||LA44_1==141||(LA44_1 >= 143 && LA44_1 <= 144)||(LA44_1 >= 147 && LA44_1 <= 148)||LA44_1==152||LA44_1==154||LA44_1==157||LA44_1==160||LA44_1==162||LA44_1==167||(LA44_1 >= 171 && LA44_1 <= 172)||LA44_1==183||LA44_1==190||LA44_1==194||LA44_1==196) ) {
						alt44=1;
					}

				}

				switch (alt44) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:218:22: ',' member_declarator
					{
					char_literal118=(Token)match(input,74,FOLLOW_74_in_member_declarator_list2365); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal118_tree = (CommonTree)adaptor.create(char_literal118);
					adaptor.addChild(root_0, char_literal118_tree);
					}

					pushFollow(FOLLOW_member_declarator_in_member_declarator_list2367);
					member_declarator119=member_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator119.getTree());

					}
					break;

				default :
					break loop44;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, member_declarator_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "member_declarator_list"


	public static class member_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "member_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:219:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
	public final csParser.member_declarator_return member_declarator() throws RecognitionException {
		csParser.member_declarator_return retval = new csParser.member_declarator_return();
		retval.start = input.LT(1);
		int member_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal122=null;
		Token char_literal124=null;
		ParserRuleReturnScope identifier120 =null;
		ParserRuleReturnScope generic_argument_list121 =null;
		ParserRuleReturnScope primary_or_array_creation_expression123 =null;
		ParserRuleReturnScope expression125 =null;

		CommonTree char_literal122_tree=null;
		CommonTree char_literal124_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:219:18: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:220:2: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_member_declarator2379);
			identifier120=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier120.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:220:15: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			int alt45=3;
			switch ( input.LA(1) ) {
			case 81:
				{
				alt45=1;
				}
				break;
			case DOT:
				{
				alt45=2;
				}
				break;
			case 85:
				{
				alt45=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 45, 0, input);
				throw nvae;
			}
			switch (alt45) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:220:16: generic_argument_list
					{
					pushFollow(FOLLOW_generic_argument_list_in_member_declarator2384);
					generic_argument_list121=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list121.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:221:8: ( '.' primary_or_array_creation_expression )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:221:8: ( '.' primary_or_array_creation_expression )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:221:9: '.' primary_or_array_creation_expression
					{
					char_literal122=(Token)match(input,DOT,FOLLOW_DOT_in_member_declarator2394); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal122_tree = (CommonTree)adaptor.create(char_literal122);
					adaptor.addChild(root_0, char_literal122_tree);
					}

					pushFollow(FOLLOW_primary_or_array_creation_expression_in_member_declarator2398);
					primary_or_array_creation_expression123=primary_or_array_creation_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_or_array_creation_expression123.getTree());

					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:222:8: '=' expression
					{
					char_literal124=(Token)match(input,85,FOLLOW_85_in_member_declarator2408); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal124_tree = (CommonTree)adaptor.create(char_literal124);
					adaptor.addChild(root_0, char_literal124_tree);
					}

					pushFollow(FOLLOW_expression_in_member_declarator2412);
					expression125=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression125.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, member_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "member_declarator"


	public static class primary_or_array_creation_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary_or_array_creation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:223:1: primary_or_array_creation_expression returns [expression t] : ( ( array_creation_expression )=> array_creation_expression |a= primary_expression );
	public final csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression() throws RecognitionException {
		csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
		retval.start = input.LT(1);
		int primary_or_array_creation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope array_creation_expression126 =null;


		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:225:88: ( ( array_creation_expression )=> array_creation_expression |a= primary_expression )
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==150) ) {
				int LA46_1 = input.LA(2);
				if ( (synpred11_cs()) ) {
					alt46=1;
				}
				else if ( (true) ) {
					alt46=2;
				}

			}
			else if ( (LA46_0==Character_literal||LA46_0==FALSE||(LA46_0 >= Hex_number && LA46_0 <= IDENTIFIER)||(LA46_0 >= NULL && LA46_0 <= NUMBER)||LA46_0==Real_literal||LA46_0==STRINGLITERAL||LA46_0==TRUE||LA46_0==Verbatim_string_literal||LA46_0==68||LA46_0==95||(LA46_0 >= 97 && LA46_0 <= 98)||(LA46_0 >= 100 && LA46_0 <= 103)||(LA46_0 >= 105 && LA46_0 <= 106)||(LA46_0 >= 109 && LA46_0 <= 110)||(LA46_0 >= 114 && LA46_0 <= 117)||(LA46_0 >= 119 && LA46_0 <= 120)||LA46_0==122||LA46_0==126||LA46_0==129||LA46_0==132||LA46_0==135||LA46_0==138||LA46_0==141||(LA46_0 >= 143 && LA46_0 <= 144)||(LA46_0 >= 146 && LA46_0 <= 148)||(LA46_0 >= 151 && LA46_0 <= 152)||LA46_0==154||LA46_0==157||LA46_0==160||LA46_0==162||LA46_0==167||LA46_0==169||(LA46_0 >= 171 && LA46_0 <= 174)||LA46_0==177||LA46_0==180||(LA46_0 >= 183 && LA46_0 <= 187)||(LA46_0 >= 189 && LA46_0 <= 190)||LA46_0==194||LA46_0==196) ) {
				alt46=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 46, 0, input);
				throw nvae;
			}

			switch (alt46) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:226:2: ( array_creation_expression )=> array_creation_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2443);
					array_creation_expression126=array_creation_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, array_creation_expression126.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:227:4: a= primary_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression2450);
					a=primary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res = (a!=null?((csParser.primary_expression_return)a).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, primary_or_array_creation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primary_or_array_creation_expression"


	public static class array_creation_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "array_creation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:230:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
	public final csParser.array_creation_expression_return array_creation_expression() throws RecognitionException {
		csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
		retval.start = input.LT(1);
		int array_creation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal127=null;
		Token char_literal129=null;
		Token char_literal131=null;
		ParserRuleReturnScope type128 =null;
		ParserRuleReturnScope expression_list130 =null;
		ParserRuleReturnScope rank_specifiers132 =null;
		ParserRuleReturnScope array_initializer133 =null;
		ParserRuleReturnScope arguments134 =null;
		ParserRuleReturnScope invocation_part135 =null;
		ParserRuleReturnScope invocation_part136 =null;
		ParserRuleReturnScope arguments137 =null;
		ParserRuleReturnScope array_initializer138 =null;
		ParserRuleReturnScope rank_specifier139 =null;
		ParserRuleReturnScope array_initializer140 =null;

		CommonTree string_literal127_tree=null;
		CommonTree char_literal129_tree=null;
		CommonTree char_literal131_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:230:26: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:231:2: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal127=(Token)match(input,150,FOLLOW_150_in_array_creation_expression2462); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal127_tree = (CommonTree)adaptor.create(string_literal127);
			adaptor.addChild(root_0, string_literal127_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:232:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==IDENTIFIER||LA52_0==95||(LA52_0 >= 97 && LA52_0 <= 98)||(LA52_0 >= 100 && LA52_0 <= 101)||LA52_0==103||(LA52_0 >= 105 && LA52_0 <= 106)||LA52_0==109||LA52_0==114||LA52_0==117||(LA52_0 >= 119 && LA52_0 <= 120)||LA52_0==122||LA52_0==126||LA52_0==129||LA52_0==132||LA52_0==135||LA52_0==138||LA52_0==141||(LA52_0 >= 143 && LA52_0 <= 144)||(LA52_0 >= 146 && LA52_0 <= 148)||(LA52_0 >= 151 && LA52_0 <= 152)||LA52_0==154||LA52_0==157||LA52_0==160||LA52_0==162||LA52_0==167||LA52_0==169||(LA52_0 >= 171 && LA52_0 <= 173)||LA52_0==177||LA52_0==183||(LA52_0 >= 185 && LA52_0 <= 186)||(LA52_0 >= 189 && LA52_0 <= 190)||LA52_0==192||LA52_0==194||LA52_0==196) ) {
				alt52=1;
			}
			else if ( (LA52_0==91) ) {
				alt52=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 52, 0, input);
				throw nvae;
			}

			switch (alt52) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:232:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
					{
					pushFollow(FOLLOW_type_in_array_creation_expression2470);
					type128=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type128.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:232:11: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( (LA51_0==91) ) {
						alt51=1;
					}
					else if ( (LA51_0==197) ) {
						alt51=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 51, 0, input);
						throw nvae;
					}

					switch (alt51) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:232:12: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
							{
							char_literal129=(Token)match(input,91,FOLLOW_91_in_array_creation_expression2475); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal129_tree = (CommonTree)adaptor.create(char_literal129);
							adaptor.addChild(root_0, char_literal129_tree);
							}

							pushFollow(FOLLOW_expression_list_in_array_creation_expression2479);
							expression_list130=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list130.getTree());

							char_literal131=(Token)match(input,92,FOLLOW_92_in_array_creation_expression2483); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal131_tree = (CommonTree)adaptor.create(char_literal131);
							adaptor.addChild(root_0, char_literal131_tree);
							}

							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
							int alt50=2;
							alt50 = dfa50.predict(input);
							switch (alt50) {
								case 1 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:8: ( rank_specifiers )? ( array_initializer )?
									{
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:8: ( rank_specifiers )?
									int alt47=2;
									int LA47_0 = input.LA(1);
									if ( (LA47_0==91) ) {
										alt47=1;
									}
									switch (alt47) {
										case 1 :
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:8: rank_specifiers
											{
											pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression2495);
											rank_specifiers132=rank_specifiers();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers132.getTree());

											}
											break;

									}

									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:27: ( array_initializer )?
									int alt48=2;
									int LA48_0 = input.LA(1);
									if ( (LA48_0==197) ) {
										alt48=1;
									}
									switch (alt48) {
										case 1 :
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:233:27: array_initializer
											{
											pushFollow(FOLLOW_array_initializer_in_array_creation_expression2500);
											array_initializer133=array_initializer();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer133.getTree());

											}
											break;

									}

									}
									break;
								case 2 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
									{
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
									loop49:
									while (true) {
										int alt49=3;
										int LA49_0 = input.LA(1);
										if ( (LA49_0==68) ) {
											int LA49_1 = input.LA(2);
											if ( (synpred12_cs()) ) {
												alt49=1;
											}

										}
										else if ( (LA49_0==DOT||LA49_0==PTR||LA49_0==91) ) {
											alt49=2;
										}

										switch (alt49) {
										case 1 :
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
											{
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
											{
											pushFollow(FOLLOW_arguments_in_array_creation_expression2536);
											arguments134=arguments();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments134.getTree());

											pushFollow(FOLLOW_invocation_part_in_array_creation_expression2540);
											invocation_part135=invocation_part();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part135.getTree());

											}

											}
											break;
										case 2 :
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:236:10: invocation_part
											{
											pushFollow(FOLLOW_invocation_part_in_array_creation_expression2552);
											invocation_part136=invocation_part();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part136.getTree());

											}
											break;

										default :
											break loop49;
										}
									}

									pushFollow(FOLLOW_arguments_in_array_creation_expression2558);
									arguments137=arguments();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments137.getTree());

									}
									break;

							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:238:7: array_initializer
							{
							pushFollow(FOLLOW_array_initializer_in_array_creation_expression2580);
							array_initializer138=array_initializer();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer138.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:240:5: rank_specifier ( array_initializer )
					{
					pushFollow(FOLLOW_rank_specifier_in_array_creation_expression2594);
					rank_specifier139=rank_specifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier139.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:241:4: ( array_initializer )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:241:5: array_initializer
					{
					pushFollow(FOLLOW_array_initializer_in_array_creation_expression2603);
					array_initializer140=array_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer140.getTree());

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, array_creation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "array_creation_expression"


	public static class array_initializer_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "array_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:244:1: array_initializer returns [UnknownNode t] : '{' ( variable_initializer_list )? ( ',' )? '}' ;
	public final csParser.array_initializer_return array_initializer() throws RecognitionException {
		csParser.array_initializer_return retval = new csParser.array_initializer_return();
		retval.start = input.LT(1);
		int array_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal141=null;
		Token char_literal143=null;
		Token char_literal144=null;
		ParserRuleReturnScope variable_initializer_list142 =null;

		CommonTree char_literal141_tree=null;
		CommonTree char_literal143_tree=null;
		CommonTree char_literal144_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:245:37: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:246:9: '{' ( variable_initializer_list )? ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal141=(Token)match(input,197,FOLLOW_197_in_array_initializer2642); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal141_tree = (CommonTree)adaptor.create(char_literal141);
			adaptor.addChild(root_0, char_literal141_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:246:15: ( variable_initializer_list )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==Character_literal||LA53_0==FALSE||(LA53_0 >= Hex_number && LA53_0 <= IDENTIFIER)||(LA53_0 >= MINUS && LA53_0 <= NUMBER)||LA53_0==Real_literal||LA53_0==STRINGLITERAL||LA53_0==TRUE||LA53_0==Verbatim_string_literal||LA53_0==61||LA53_0==66||(LA53_0 >= 68 && LA53_0 <= 69)||(LA53_0 >= 71 && LA53_0 <= 72)||LA53_0==75||LA53_0==95||(LA53_0 >= 97 && LA53_0 <= 98)||(LA53_0 >= 100 && LA53_0 <= 103)||(LA53_0 >= 105 && LA53_0 <= 106)||(LA53_0 >= 109 && LA53_0 <= 110)||(LA53_0 >= 114 && LA53_0 <= 117)||(LA53_0 >= 119 && LA53_0 <= 120)||LA53_0==122||LA53_0==126||LA53_0==129||LA53_0==132||LA53_0==135||LA53_0==138||LA53_0==141||(LA53_0 >= 143 && LA53_0 <= 144)||(LA53_0 >= 146 && LA53_0 <= 148)||(LA53_0 >= 150 && LA53_0 <= 152)||LA53_0==154||LA53_0==157||LA53_0==160||LA53_0==162||LA53_0==167||LA53_0==169||(LA53_0 >= 171 && LA53_0 <= 174)||LA53_0==177||LA53_0==180||(LA53_0 >= 183 && LA53_0 <= 187)||(LA53_0 >= 189 && LA53_0 <= 190)||LA53_0==194||(LA53_0 >= 196 && LA53_0 <= 197)||LA53_0==202) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:246:15: variable_initializer_list
					{
					pushFollow(FOLLOW_variable_initializer_list_in_array_initializer2646);
					variable_initializer_list142=variable_initializer_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer_list142.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:246:44: ( ',' )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==74) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:246:44: ','
					{
					char_literal143=(Token)match(input,74,FOLLOW_74_in_array_initializer2651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal143_tree = (CommonTree)adaptor.create(char_literal143);
					adaptor.addChild(root_0, char_literal143_tree);
					}

					}
					break;

			}

			char_literal144=(Token)match(input,201,FOLLOW_201_in_array_initializer2656); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal144_tree = (CommonTree)adaptor.create(char_literal144);
			adaptor.addChild(root_0, char_literal144_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, array_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "array_initializer"


	public static class variable_initializer_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variable_initializer_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:248:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
	public final csParser.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
		csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
		retval.start = input.LT(1);
		int variable_initializer_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal146=null;
		ParserRuleReturnScope variable_initializer145 =null;
		ParserRuleReturnScope variable_initializer147 =null;

		CommonTree char_literal146_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:248:26: ( variable_initializer ( ',' variable_initializer )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:249:2: variable_initializer ( ',' variable_initializer )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2669);
			variable_initializer145=variable_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer145.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:249:23: ( ',' variable_initializer )*
			loop55:
			while (true) {
				int alt55=2;
				int LA55_0 = input.LA(1);
				if ( (LA55_0==74) ) {
					int LA55_1 = input.LA(2);
					if ( (LA55_1==Character_literal||LA55_1==FALSE||(LA55_1 >= Hex_number && LA55_1 <= IDENTIFIER)||(LA55_1 >= MINUS && LA55_1 <= NUMBER)||LA55_1==Real_literal||LA55_1==STRINGLITERAL||LA55_1==TRUE||LA55_1==Verbatim_string_literal||LA55_1==61||LA55_1==66||(LA55_1 >= 68 && LA55_1 <= 69)||(LA55_1 >= 71 && LA55_1 <= 72)||LA55_1==75||LA55_1==95||(LA55_1 >= 97 && LA55_1 <= 98)||(LA55_1 >= 100 && LA55_1 <= 103)||(LA55_1 >= 105 && LA55_1 <= 106)||(LA55_1 >= 109 && LA55_1 <= 110)||(LA55_1 >= 114 && LA55_1 <= 117)||(LA55_1 >= 119 && LA55_1 <= 120)||LA55_1==122||LA55_1==126||LA55_1==129||LA55_1==132||LA55_1==135||LA55_1==138||LA55_1==141||(LA55_1 >= 143 && LA55_1 <= 144)||(LA55_1 >= 146 && LA55_1 <= 148)||(LA55_1 >= 150 && LA55_1 <= 152)||LA55_1==154||LA55_1==157||LA55_1==160||LA55_1==162||LA55_1==167||LA55_1==169||(LA55_1 >= 171 && LA55_1 <= 174)||LA55_1==177||LA55_1==180||(LA55_1 >= 183 && LA55_1 <= 187)||(LA55_1 >= 189 && LA55_1 <= 190)||LA55_1==194||(LA55_1 >= 196 && LA55_1 <= 197)||LA55_1==202) ) {
						alt55=1;
					}

				}

				switch (alt55) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:249:24: ',' variable_initializer
					{
					char_literal146=(Token)match(input,74,FOLLOW_74_in_variable_initializer_list2672); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal146_tree = (CommonTree)adaptor.create(char_literal146);
					adaptor.addChild(root_0, char_literal146_tree);
					}

					pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list2674);
					variable_initializer147=variable_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer147.getTree());

					}
					break;

				default :
					break loop55;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, variable_initializer_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variable_initializer_list"


	public static class variable_initializer_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variable_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:250:1: variable_initializer returns [expression t] : (a= expression |b= array_initializer );
	public final csParser.variable_initializer_return variable_initializer() throws RecognitionException {
		csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
		retval.start = input.LT(1);
		int variable_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:250:46: (a= expression |b= array_initializer )
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==Character_literal||LA56_0==FALSE||(LA56_0 >= Hex_number && LA56_0 <= IDENTIFIER)||(LA56_0 >= MINUS && LA56_0 <= NUMBER)||LA56_0==Real_literal||LA56_0==STRINGLITERAL||LA56_0==TRUE||LA56_0==Verbatim_string_literal||LA56_0==61||LA56_0==66||(LA56_0 >= 68 && LA56_0 <= 69)||(LA56_0 >= 71 && LA56_0 <= 72)||LA56_0==75||LA56_0==95||(LA56_0 >= 97 && LA56_0 <= 98)||(LA56_0 >= 100 && LA56_0 <= 103)||(LA56_0 >= 105 && LA56_0 <= 106)||(LA56_0 >= 109 && LA56_0 <= 110)||(LA56_0 >= 114 && LA56_0 <= 117)||(LA56_0 >= 119 && LA56_0 <= 120)||LA56_0==122||LA56_0==126||LA56_0==129||LA56_0==132||LA56_0==135||LA56_0==138||LA56_0==141||(LA56_0 >= 143 && LA56_0 <= 144)||(LA56_0 >= 146 && LA56_0 <= 148)||(LA56_0 >= 150 && LA56_0 <= 152)||LA56_0==154||LA56_0==157||LA56_0==160||LA56_0==162||LA56_0==167||LA56_0==169||(LA56_0 >= 171 && LA56_0 <= 174)||LA56_0==177||LA56_0==180||(LA56_0 >= 183 && LA56_0 <= 187)||(LA56_0 >= 189 && LA56_0 <= 190)||LA56_0==194||LA56_0==196||LA56_0==202) ) {
				alt56=1;
			}
			else if ( (LA56_0==197) ) {
				alt56=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}

			switch (alt56) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:251:2: a= expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_variable_initializer2692);
					a=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.expression_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:251:28: b= array_initializer
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_array_initializer_in_variable_initializer2700);
					b=array_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.array_initializer_return)b).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, variable_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variable_initializer"


	public static class sizeof_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sizeof_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:252:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
	public final csParser.sizeof_expression_return sizeof_expression() throws RecognitionException {
		csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
		retval.start = input.LT(1);
		int sizeof_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal148=null;
		Token char_literal149=null;
		Token char_literal151=null;
		ParserRuleReturnScope unmanaged_type150 =null;

		CommonTree string_literal148_tree=null;
		CommonTree char_literal149_tree=null;
		CommonTree char_literal151_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:252:18: ( 'sizeof' '(' unmanaged_type ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:253:2: 'sizeof' '(' unmanaged_type ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal148=(Token)match(input,174,FOLLOW_174_in_sizeof_expression2710); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal148_tree = (CommonTree)adaptor.create(string_literal148);
			adaptor.addChild(root_0, string_literal148_tree);
			}

			char_literal149=(Token)match(input,68,FOLLOW_68_in_sizeof_expression2714); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal149_tree = (CommonTree)adaptor.create(char_literal149);
			adaptor.addChild(root_0, char_literal149_tree);
			}

			pushFollow(FOLLOW_unmanaged_type_in_sizeof_expression2718);
			unmanaged_type150=unmanaged_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type150.getTree());

			char_literal151=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression2722); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal151_tree = (CommonTree)adaptor.create(char_literal151);
			adaptor.addChild(root_0, char_literal151_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, sizeof_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "sizeof_expression"


	public static class checked_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "checked_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:254:1: checked_expression : 'checked' '(' expression ')' ;
	public final csParser.checked_expression_return checked_expression() throws RecognitionException {
		csParser.checked_expression_return retval = new csParser.checked_expression_return();
		retval.start = input.LT(1);
		int checked_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal152=null;
		Token char_literal153=null;
		Token char_literal155=null;
		ParserRuleReturnScope expression154 =null;

		CommonTree string_literal152_tree=null;
		CommonTree char_literal153_tree=null;
		CommonTree char_literal155_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:254:19: ( 'checked' '(' expression ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:255:2: 'checked' '(' expression ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal152=(Token)match(input,110,FOLLOW_110_in_checked_expression2730); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal152_tree = (CommonTree)adaptor.create(string_literal152);
			adaptor.addChild(root_0, string_literal152_tree);
			}

			char_literal153=(Token)match(input,68,FOLLOW_68_in_checked_expression2734); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal153_tree = (CommonTree)adaptor.create(char_literal153);
			adaptor.addChild(root_0, char_literal153_tree);
			}

			pushFollow(FOLLOW_expression_in_checked_expression2738);
			expression154=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression154.getTree());

			char_literal155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression2742); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal155_tree = (CommonTree)adaptor.create(char_literal155);
			adaptor.addChild(root_0, char_literal155_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, checked_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "checked_expression"


	public static class unchecked_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unchecked_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:256:1: unchecked_expression : 'unchecked' '(' expression ')' ;
	public final csParser.unchecked_expression_return unchecked_expression() throws RecognitionException {
		csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
		retval.start = input.LT(1);
		int unchecked_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal156=null;
		Token char_literal157=null;
		Token char_literal159=null;
		ParserRuleReturnScope expression158 =null;

		CommonTree string_literal156_tree=null;
		CommonTree char_literal157_tree=null;
		CommonTree char_literal159_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:256:21: ( 'unchecked' '(' expression ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:257:2: 'unchecked' '(' expression ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal156=(Token)match(input,187,FOLLOW_187_in_unchecked_expression2751); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal156_tree = (CommonTree)adaptor.create(string_literal156);
			adaptor.addChild(root_0, string_literal156_tree);
			}

			char_literal157=(Token)match(input,68,FOLLOW_68_in_unchecked_expression2755); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal157_tree = (CommonTree)adaptor.create(char_literal157);
			adaptor.addChild(root_0, char_literal157_tree);
			}

			pushFollow(FOLLOW_expression_in_unchecked_expression2759);
			expression158=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression158.getTree());

			char_literal159=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression2763); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal159_tree = (CommonTree)adaptor.create(char_literal159);
			adaptor.addChild(root_0, char_literal159_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, unchecked_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unchecked_expression"


	public static class default_value_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "default_value_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:258:1: default_value_expression : 'default' '(' type ')' ;
	public final csParser.default_value_expression_return default_value_expression() throws RecognitionException {
		csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
		retval.start = input.LT(1);
		int default_value_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal160=null;
		Token char_literal161=null;
		Token char_literal163=null;
		ParserRuleReturnScope type162 =null;

		CommonTree string_literal160_tree=null;
		CommonTree char_literal161_tree=null;
		CommonTree char_literal163_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:258:25: ( 'default' '(' type ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:259:2: 'default' '(' type ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal160=(Token)match(input,115,FOLLOW_115_in_default_value_expression2772); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal160_tree = (CommonTree)adaptor.create(string_literal160);
			adaptor.addChild(root_0, string_literal160_tree);
			}

			char_literal161=(Token)match(input,68,FOLLOW_68_in_default_value_expression2776); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal161_tree = (CommonTree)adaptor.create(char_literal161);
			adaptor.addChild(root_0, char_literal161_tree);
			}

			pushFollow(FOLLOW_type_in_default_value_expression2780);
			type162=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type162.getTree());

			char_literal163=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression2784); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal163_tree = (CommonTree)adaptor.create(char_literal163);
			adaptor.addChild(root_0, char_literal163_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, default_value_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "default_value_expression"


	public static class anonymous_method_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_method_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:260:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
	public final csParser.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
		csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
		retval.start = input.LT(1);
		int anonymous_method_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal164=null;
		ParserRuleReturnScope explicit_anonymous_function_signature165 =null;
		ParserRuleReturnScope block166 =null;

		CommonTree string_literal164_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:260:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:261:2: 'delegate' ( explicit_anonymous_function_signature )? block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal164=(Token)match(input,116,FOLLOW_116_in_anonymous_method_expression2792); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal164_tree = (CommonTree)adaptor.create(string_literal164);
			adaptor.addChild(root_0, string_literal164_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:261:15: ( explicit_anonymous_function_signature )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==68) ) {
				alt57=1;
			}
			switch (alt57) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:261:15: explicit_anonymous_function_signature
					{
					pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2796);
					explicit_anonymous_function_signature165=explicit_anonymous_function_signature();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_signature165.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_anonymous_method_expression2801);
			block166=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block166.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, anonymous_method_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_method_expression"


	public static class explicit_anonymous_function_signature_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explicit_anonymous_function_signature"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:262:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
	public final csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
		csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
		retval.start = input.LT(1);
		int explicit_anonymous_function_signature_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal167=null;
		Token char_literal169=null;
		ParserRuleReturnScope explicit_anonymous_function_parameter_list168 =null;

		CommonTree char_literal167_tree=null;
		CommonTree char_literal169_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:262:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:263:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal167=(Token)match(input,68,FOLLOW_68_in_explicit_anonymous_function_signature2808); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal167_tree = (CommonTree)adaptor.create(char_literal167);
			adaptor.addChild(root_0, char_literal167_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:263:8: ( explicit_anonymous_function_parameter_list )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==IDENTIFIER||LA58_0==95||(LA58_0 >= 97 && LA58_0 <= 98)||(LA58_0 >= 100 && LA58_0 <= 101)||LA58_0==103||(LA58_0 >= 105 && LA58_0 <= 106)||LA58_0==109||LA58_0==114||LA58_0==117||(LA58_0 >= 119 && LA58_0 <= 120)||LA58_0==122||LA58_0==126||LA58_0==129||LA58_0==132||LA58_0==135||LA58_0==138||LA58_0==141||(LA58_0 >= 143 && LA58_0 <= 144)||(LA58_0 >= 146 && LA58_0 <= 148)||(LA58_0 >= 151 && LA58_0 <= 152)||(LA58_0 >= 154 && LA58_0 <= 155)||LA58_0==157||LA58_0==160||LA58_0==162||(LA58_0 >= 166 && LA58_0 <= 167)||LA58_0==169||(LA58_0 >= 171 && LA58_0 <= 173)||LA58_0==177||LA58_0==183||(LA58_0 >= 185 && LA58_0 <= 186)||(LA58_0 >= 189 && LA58_0 <= 190)||LA58_0==192||LA58_0==194||LA58_0==196) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:263:8: explicit_anonymous_function_parameter_list
					{
					pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2812);
					explicit_anonymous_function_parameter_list168=explicit_anonymous_function_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list168.getTree());

					}
					break;

			}

			char_literal169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature2817); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal169_tree = (CommonTree)adaptor.create(char_literal169);
			adaptor.addChild(root_0, char_literal169_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explicit_anonymous_function_signature"


	public static class explicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explicit_anonymous_function_parameter_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:264:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
	public final csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
		csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
		retval.start = input.LT(1);
		int explicit_anonymous_function_parameter_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal171=null;
		ParserRuleReturnScope explicit_anonymous_function_parameter170 =null;
		ParserRuleReturnScope explicit_anonymous_function_parameter172 =null;

		CommonTree char_literal171_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:264:43: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:265:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2825);
			explicit_anonymous_function_parameter170=explicit_anonymous_function_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter170.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:265:42: ( ',' explicit_anonymous_function_parameter )*
			loop59:
			while (true) {
				int alt59=2;
				int LA59_0 = input.LA(1);
				if ( (LA59_0==74) ) {
					alt59=1;
				}

				switch (alt59) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:265:43: ',' explicit_anonymous_function_parameter
					{
					char_literal171=(Token)match(input,74,FOLLOW_74_in_explicit_anonymous_function_parameter_list2830); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal171_tree = (CommonTree)adaptor.create(char_literal171);
					adaptor.addChild(root_0, char_literal171_tree);
					}

					pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2834);
					explicit_anonymous_function_parameter172=explicit_anonymous_function_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter172.getTree());

					}
					break;

				default :
					break loop59;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explicit_anonymous_function_parameter_list"


	public static class explicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explicit_anonymous_function_parameter"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:266:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
	public final csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
		csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
		retval.start = input.LT(1);
		int explicit_anonymous_function_parameter_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope anonymous_function_parameter_modifier173 =null;
		ParserRuleReturnScope type174 =null;
		ParserRuleReturnScope identifier175 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:266:38: ( ( anonymous_function_parameter_modifier )? type identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:267:2: ( anonymous_function_parameter_modifier )? type identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:267:2: ( anonymous_function_parameter_modifier )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==155||LA60_0==166) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:267:2: anonymous_function_parameter_modifier
					{
					pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2845);
					anonymous_function_parameter_modifier173=anonymous_function_parameter_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_parameter_modifier173.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter2850);
			type174=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type174.getTree());

			pushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter2854);
			identifier175=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier175.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explicit_anonymous_function_parameter"


	public static class anonymous_function_parameter_modifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_function_parameter_modifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:268:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
	public final csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
		csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
		retval.start = input.LT(1);
		int anonymous_function_parameter_modifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set176=null;

		CommonTree set176_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:268:38: ( 'ref' | 'out' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set176=input.LT(1);
			if ( input.LA(1)==155||input.LA(1)==166 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set176));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_function_parameter_modifier"


	public static class object_creation_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "object_creation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:273:1: object_creation_expression returns [expression t] : a= type ( '(' (b= argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
	public final csParser.object_creation_expression_return object_creation_expression() throws RecognitionException {
		csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
		retval.start = input.LT(1);
		int object_creation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal177=null;
		Token char_literal178=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope object_or_collection_initializer179 =null;
		ParserRuleReturnScope object_or_collection_initializer180 =null;

		CommonTree char_literal177_tree=null;
		CommonTree char_literal178_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:275:87: (a= type ( '(' (b= argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:277:2: a= type ( '(' (b= argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_object_creation_expression2894);
			a=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:3: ( '(' (b= argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==68) ) {
				alt63=1;
			}
			else if ( (LA63_0==197) ) {
				alt63=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}

			switch (alt63) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:5: '(' (b= argument_list )? ')' ( object_or_collection_initializer )?
					{
					char_literal177=(Token)match(input,68,FOLLOW_68_in_object_creation_expression2903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal177_tree = (CommonTree)adaptor.create(char_literal177);
					adaptor.addChild(root_0, char_literal177_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:12: (b= argument_list )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==Character_literal||LA61_0==FALSE||(LA61_0 >= Hex_number && LA61_0 <= IDENTIFIER)||(LA61_0 >= MINUS && LA61_0 <= NUMBER)||LA61_0==Real_literal||LA61_0==STRINGLITERAL||LA61_0==TRUE||LA61_0==Verbatim_string_literal||LA61_0==61||LA61_0==66||(LA61_0 >= 68 && LA61_0 <= 69)||(LA61_0 >= 71 && LA61_0 <= 72)||LA61_0==75||LA61_0==79||LA61_0==95||(LA61_0 >= 97 && LA61_0 <= 98)||(LA61_0 >= 100 && LA61_0 <= 103)||(LA61_0 >= 105 && LA61_0 <= 106)||(LA61_0 >= 109 && LA61_0 <= 110)||(LA61_0 >= 114 && LA61_0 <= 117)||(LA61_0 >= 119 && LA61_0 <= 120)||LA61_0==122||LA61_0==126||LA61_0==129||LA61_0==132||LA61_0==135||LA61_0==138||LA61_0==141||(LA61_0 >= 143 && LA61_0 <= 144)||(LA61_0 >= 146 && LA61_0 <= 148)||(LA61_0 >= 150 && LA61_0 <= 152)||(LA61_0 >= 154 && LA61_0 <= 155)||LA61_0==157||LA61_0==160||LA61_0==162||(LA61_0 >= 166 && LA61_0 <= 167)||LA61_0==169||(LA61_0 >= 171 && LA61_0 <= 174)||LA61_0==177||LA61_0==180||(LA61_0 >= 183 && LA61_0 <= 187)||(LA61_0 >= 189 && LA61_0 <= 190)||LA61_0==194||LA61_0==196||LA61_0==202) ) {
						alt61=1;
					}
					switch (alt61) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:12: b= argument_list
							{
							pushFollow(FOLLOW_argument_list_in_object_creation_expression2909);
							b=argument_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

							}
							break;

					}

					char_literal178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression2914); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal178_tree = (CommonTree)adaptor.create(char_literal178);
					adaptor.addChild(root_0, char_literal178_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:36: ( object_or_collection_initializer )?
					int alt62=2;
					int LA62_0 = input.LA(1);
					if ( (LA62_0==197) ) {
						alt62=1;
					}
					switch (alt62) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:278:36: object_or_collection_initializer
							{
							pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2918);
							object_or_collection_initializer179=object_or_collection_initializer();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer179.getTree());

							}
							break;

					}

					if ( state.backtracking==0 ) {res = new object_creation_expression((a!=null?((csParser.type_return)a).t:null),(b!=null?((csParser.argument_list_return)b).t:null));}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:279:7: object_or_collection_initializer
					{
					pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2930);
					object_or_collection_initializer180=object_or_collection_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer180.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, object_creation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "object_creation_expression"


	public static class object_or_collection_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "object_or_collection_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:281:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
	public final csParser.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
		csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
		retval.start = input.LT(1);
		int object_or_collection_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal181=null;
		ParserRuleReturnScope object_initializer182 =null;
		ParserRuleReturnScope collection_initializer183 =null;

		CommonTree char_literal181_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:281:33: ( '{' ( object_initializer | collection_initializer ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:282:2: '{' ( object_initializer | collection_initializer )
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal181=(Token)match(input,197,FOLLOW_197_in_object_or_collection_initializer2942); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal181_tree = (CommonTree)adaptor.create(char_literal181);
			adaptor.addChild(root_0, char_literal181_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:282:7: ( object_initializer | collection_initializer )
			int alt64=2;
			switch ( input.LA(1) ) {
			case 132:
				{
				int LA64_1 = input.LA(2);
				if ( (LA64_1==85) ) {
					alt64=1;
				}
				else if ( (LA64_1==DOT||LA64_1==GT||LA64_1==IDENTIFIER||LA64_1==MINUS||LA64_1==PTR||(LA64_1 >= 62 && LA64_1 <= 63)||(LA64_1 >= 65 && LA64_1 <= 66)||(LA64_1 >= 68 && LA64_1 <= 69)||(LA64_1 >= 71 && LA64_1 <= 72)||(LA64_1 >= 74 && LA64_1 <= 75)||LA64_1==77||(LA64_1 >= 80 && LA64_1 <= 82)||LA64_1==84||(LA64_1 >= 86 && LA64_1 <= 91)||LA64_1==93||LA64_1==95||(LA64_1 >= 97 && LA64_1 <= 101)||LA64_1==103||(LA64_1 >= 105 && LA64_1 <= 106)||LA64_1==109||LA64_1==114||LA64_1==117||(LA64_1 >= 119 && LA64_1 <= 120)||LA64_1==122||LA64_1==126||LA64_1==129||LA64_1==132||LA64_1==135||LA64_1==138||(LA64_1 >= 141 && LA64_1 <= 144)||(LA64_1 >= 146 && LA64_1 <= 148)||(LA64_1 >= 151 && LA64_1 <= 152)||LA64_1==154||LA64_1==157||LA64_1==160||LA64_1==162||LA64_1==167||LA64_1==169||(LA64_1 >= 171 && LA64_1 <= 173)||LA64_1==177||LA64_1==183||(LA64_1 >= 185 && LA64_1 <= 186)||(LA64_1 >= 189 && LA64_1 <= 190)||LA64_1==192||LA64_1==194||LA64_1==196||LA64_1==198||(LA64_1 >= 200 && LA64_1 <= 201)) ) {
					alt64=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 74:
			case 201:
				{
				alt64=1;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 197:
			case 202:
				{
				alt64=2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA64_4 = input.LA(2);
				if ( (LA64_4==85) ) {
					alt64=1;
				}
				else if ( (LA64_4==DOT||LA64_4==GT||LA64_4==MINUS||LA64_4==PTR||(LA64_4 >= 62 && LA64_4 <= 63)||(LA64_4 >= 65 && LA64_4 <= 66)||(LA64_4 >= 68 && LA64_4 <= 69)||(LA64_4 >= 71 && LA64_4 <= 72)||(LA64_4 >= 74 && LA64_4 <= 75)||LA64_4==77||(LA64_4 >= 80 && LA64_4 <= 82)||LA64_4==84||(LA64_4 >= 86 && LA64_4 <= 91)||LA64_4==93||LA64_4==99||LA64_4==142||LA64_4==198||(LA64_4 >= 200 && LA64_4 <= 201)) ) {
					alt64=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}
			switch (alt64) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:282:8: object_initializer
					{
					pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer2946);
					object_initializer182=object_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, object_initializer182.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:283:5: collection_initializer
					{
					pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer2953);
					collection_initializer183=collection_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_initializer183.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, object_or_collection_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "object_or_collection_initializer"


	public static class collection_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "collection_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:284:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
	public final csParser.collection_initializer_return collection_initializer() throws RecognitionException {
		csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
		retval.start = input.LT(1);
		int collection_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal185=null;
		Token char_literal186=null;
		ParserRuleReturnScope element_initializer_list184 =null;

		CommonTree char_literal185_tree=null;
		CommonTree char_literal186_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:284:23: ( element_initializer_list ( ',' )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:285:2: element_initializer_list ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_element_initializer_list_in_collection_initializer2963);
			element_initializer_list184=element_initializer_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer_list184.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:285:29: ( ',' )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==74) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:285:29: ','
					{
					char_literal185=(Token)match(input,74,FOLLOW_74_in_collection_initializer2967); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal185_tree = (CommonTree)adaptor.create(char_literal185);
					adaptor.addChild(root_0, char_literal185_tree);
					}

					}
					break;

			}

			char_literal186=(Token)match(input,201,FOLLOW_201_in_collection_initializer2972); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal186_tree = (CommonTree)adaptor.create(char_literal186);
			adaptor.addChild(root_0, char_literal186_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, collection_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "collection_initializer"


	public static class element_initializer_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "element_initializer_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:286:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
	public final csParser.element_initializer_list_return element_initializer_list() throws RecognitionException {
		csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
		retval.start = input.LT(1);
		int element_initializer_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal188=null;
		ParserRuleReturnScope element_initializer187 =null;
		ParserRuleReturnScope element_initializer189 =null;

		CommonTree char_literal188_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:286:25: ( element_initializer ( ',' element_initializer )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:287:2: element_initializer ( ',' element_initializer )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_element_initializer_in_element_initializer_list2981);
			element_initializer187=element_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer187.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:287:23: ( ',' element_initializer )*
			loop66:
			while (true) {
				int alt66=2;
				int LA66_0 = input.LA(1);
				if ( (LA66_0==74) ) {
					int LA66_1 = input.LA(2);
					if ( (LA66_1==Character_literal||LA66_1==FALSE||(LA66_1 >= Hex_number && LA66_1 <= IDENTIFIER)||(LA66_1 >= MINUS && LA66_1 <= NUMBER)||LA66_1==Real_literal||LA66_1==STRINGLITERAL||LA66_1==TRUE||LA66_1==Verbatim_string_literal||LA66_1==61||LA66_1==66||(LA66_1 >= 68 && LA66_1 <= 69)||(LA66_1 >= 71 && LA66_1 <= 72)||LA66_1==75||LA66_1==95||(LA66_1 >= 97 && LA66_1 <= 98)||(LA66_1 >= 100 && LA66_1 <= 103)||(LA66_1 >= 105 && LA66_1 <= 106)||(LA66_1 >= 109 && LA66_1 <= 110)||(LA66_1 >= 114 && LA66_1 <= 117)||(LA66_1 >= 119 && LA66_1 <= 120)||LA66_1==122||LA66_1==126||LA66_1==129||LA66_1==132||LA66_1==135||LA66_1==138||LA66_1==141||(LA66_1 >= 143 && LA66_1 <= 144)||(LA66_1 >= 146 && LA66_1 <= 148)||(LA66_1 >= 150 && LA66_1 <= 152)||LA66_1==154||LA66_1==157||LA66_1==160||LA66_1==162||LA66_1==167||LA66_1==169||(LA66_1 >= 171 && LA66_1 <= 174)||LA66_1==177||LA66_1==180||(LA66_1 >= 183 && LA66_1 <= 187)||(LA66_1 >= 189 && LA66_1 <= 190)||LA66_1==194||(LA66_1 >= 196 && LA66_1 <= 197)||LA66_1==202) ) {
						alt66=1;
					}

				}

				switch (alt66) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:287:24: ',' element_initializer
					{
					char_literal188=(Token)match(input,74,FOLLOW_74_in_element_initializer_list2985); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal188_tree = (CommonTree)adaptor.create(char_literal188);
					adaptor.addChild(root_0, char_literal188_tree);
					}

					pushFollow(FOLLOW_element_initializer_in_element_initializer_list2987);
					element_initializer189=element_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer189.getTree());

					}
					break;

				default :
					break loop66;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, element_initializer_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "element_initializer_list"


	public static class element_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "element_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:288:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
	public final csParser.element_initializer_return element_initializer() throws RecognitionException {
		csParser.element_initializer_return retval = new csParser.element_initializer_return();
		retval.start = input.LT(1);
		int element_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal191=null;
		Token char_literal193=null;
		ParserRuleReturnScope non_assignment_expression190 =null;
		ParserRuleReturnScope expression_list192 =null;

		CommonTree char_literal191_tree=null;
		CommonTree char_literal193_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:288:20: ( non_assignment_expression | '{' expression_list '}' )
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==Character_literal||LA67_0==FALSE||(LA67_0 >= Hex_number && LA67_0 <= IDENTIFIER)||(LA67_0 >= MINUS && LA67_0 <= NUMBER)||LA67_0==Real_literal||LA67_0==STRINGLITERAL||LA67_0==TRUE||LA67_0==Verbatim_string_literal||LA67_0==61||LA67_0==66||(LA67_0 >= 68 && LA67_0 <= 69)||(LA67_0 >= 71 && LA67_0 <= 72)||LA67_0==75||LA67_0==95||(LA67_0 >= 97 && LA67_0 <= 98)||(LA67_0 >= 100 && LA67_0 <= 103)||(LA67_0 >= 105 && LA67_0 <= 106)||(LA67_0 >= 109 && LA67_0 <= 110)||(LA67_0 >= 114 && LA67_0 <= 117)||(LA67_0 >= 119 && LA67_0 <= 120)||LA67_0==122||LA67_0==126||LA67_0==129||LA67_0==132||LA67_0==135||LA67_0==138||LA67_0==141||(LA67_0 >= 143 && LA67_0 <= 144)||(LA67_0 >= 146 && LA67_0 <= 148)||(LA67_0 >= 150 && LA67_0 <= 152)||LA67_0==154||LA67_0==157||LA67_0==160||LA67_0==162||LA67_0==167||LA67_0==169||(LA67_0 >= 171 && LA67_0 <= 174)||LA67_0==177||LA67_0==180||(LA67_0 >= 183 && LA67_0 <= 187)||(LA67_0 >= 189 && LA67_0 <= 190)||LA67_0==194||LA67_0==196||LA67_0==202) ) {
				alt67=1;
			}
			else if ( (LA67_0==197) ) {
				alt67=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:289:2: non_assignment_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_non_assignment_expression_in_element_initializer2998);
					non_assignment_expression190=non_assignment_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression190.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:290:4: '{' expression_list '}'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal191=(Token)match(input,197,FOLLOW_197_in_element_initializer3004); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal191_tree = (CommonTree)adaptor.create(char_literal191);
					adaptor.addChild(root_0, char_literal191_tree);
					}

					pushFollow(FOLLOW_expression_list_in_element_initializer3008);
					expression_list192=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list192.getTree());

					char_literal193=(Token)match(input,201,FOLLOW_201_in_element_initializer3012); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal193_tree = (CommonTree)adaptor.create(char_literal193);
					adaptor.addChild(root_0, char_literal193_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, element_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "element_initializer"


	public static class object_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "object_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:297:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
	public final csParser.object_initializer_return object_initializer() throws RecognitionException {
		csParser.object_initializer_return retval = new csParser.object_initializer_return();
		retval.start = input.LT(1);
		int object_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal195=null;
		Token char_literal196=null;
		ParserRuleReturnScope member_initializer_list194 =null;

		CommonTree char_literal195_tree=null;
		CommonTree char_literal196_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:297:19: ( ( member_initializer_list )? ( ',' )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:298:2: ( member_initializer_list )? ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:298:2: ( member_initializer_list )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==IDENTIFIER||LA68_0==95||(LA68_0 >= 97 && LA68_0 <= 98)||(LA68_0 >= 100 && LA68_0 <= 101)||LA68_0==105||LA68_0==117||LA68_0==120||LA68_0==122||LA68_0==126||LA68_0==132||LA68_0==135||LA68_0==141||(LA68_0 >= 143 && LA68_0 <= 144)||(LA68_0 >= 147 && LA68_0 <= 148)||LA68_0==152||LA68_0==154||LA68_0==157||LA68_0==160||LA68_0==162||LA68_0==167||(LA68_0 >= 171 && LA68_0 <= 172)||LA68_0==183||LA68_0==190||LA68_0==194||LA68_0==196) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:298:2: member_initializer_list
					{
					pushFollow(FOLLOW_member_initializer_list_in_object_initializer3027);
					member_initializer_list194=member_initializer_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer_list194.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:298:29: ( ',' )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==74) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:298:29: ','
					{
					char_literal195=(Token)match(input,74,FOLLOW_74_in_object_initializer3032); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal195_tree = (CommonTree)adaptor.create(char_literal195);
					adaptor.addChild(root_0, char_literal195_tree);
					}

					}
					break;

			}

			char_literal196=(Token)match(input,201,FOLLOW_201_in_object_initializer3037); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal196_tree = (CommonTree)adaptor.create(char_literal196);
			adaptor.addChild(root_0, char_literal196_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, object_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "object_initializer"


	public static class member_initializer_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "member_initializer_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:299:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
	public final csParser.member_initializer_list_return member_initializer_list() throws RecognitionException {
		csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
		retval.start = input.LT(1);
		int member_initializer_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal198=null;
		ParserRuleReturnScope member_initializer197 =null;
		ParserRuleReturnScope member_initializer199 =null;

		CommonTree char_literal198_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:299:24: ( member_initializer ( ',' member_initializer ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:300:2: member_initializer ( ',' member_initializer )
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_member_initializer_in_member_initializer_list3046);
			member_initializer197=member_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer197.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:300:22: ( ',' member_initializer )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:300:23: ',' member_initializer
			{
			char_literal198=(Token)match(input,74,FOLLOW_74_in_member_initializer_list3050); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal198_tree = (CommonTree)adaptor.create(char_literal198);
			adaptor.addChild(root_0, char_literal198_tree);
			}

			pushFollow(FOLLOW_member_initializer_in_member_initializer_list3052);
			member_initializer199=member_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer199.getTree());

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, member_initializer_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "member_initializer_list"


	public static class member_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "member_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:301:1: member_initializer : identifier '=' initializer_value ;
	public final csParser.member_initializer_return member_initializer() throws RecognitionException {
		csParser.member_initializer_return retval = new csParser.member_initializer_return();
		retval.start = input.LT(1);
		int member_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal201=null;
		ParserRuleReturnScope identifier200 =null;
		ParserRuleReturnScope initializer_value202 =null;

		CommonTree char_literal201_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:301:19: ( identifier '=' initializer_value )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:302:2: identifier '=' initializer_value
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_member_initializer3062);
			identifier200=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier200.getTree());

			char_literal201=(Token)match(input,85,FOLLOW_85_in_member_initializer3066); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal201_tree = (CommonTree)adaptor.create(char_literal201);
			adaptor.addChild(root_0, char_literal201_tree);
			}

			pushFollow(FOLLOW_initializer_value_in_member_initializer3070);
			initializer_value202=initializer_value();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_value202.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, member_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "member_initializer"


	public static class initializer_value_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "initializer_value"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:303:1: initializer_value : ( expression | object_or_collection_initializer );
	public final csParser.initializer_value_return initializer_value() throws RecognitionException {
		csParser.initializer_value_return retval = new csParser.initializer_value_return();
		retval.start = input.LT(1);
		int initializer_value_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression203 =null;
		ParserRuleReturnScope object_or_collection_initializer204 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:303:18: ( expression | object_or_collection_initializer )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==Character_literal||LA70_0==FALSE||(LA70_0 >= Hex_number && LA70_0 <= IDENTIFIER)||(LA70_0 >= MINUS && LA70_0 <= NUMBER)||LA70_0==Real_literal||LA70_0==STRINGLITERAL||LA70_0==TRUE||LA70_0==Verbatim_string_literal||LA70_0==61||LA70_0==66||(LA70_0 >= 68 && LA70_0 <= 69)||(LA70_0 >= 71 && LA70_0 <= 72)||LA70_0==75||LA70_0==95||(LA70_0 >= 97 && LA70_0 <= 98)||(LA70_0 >= 100 && LA70_0 <= 103)||(LA70_0 >= 105 && LA70_0 <= 106)||(LA70_0 >= 109 && LA70_0 <= 110)||(LA70_0 >= 114 && LA70_0 <= 117)||(LA70_0 >= 119 && LA70_0 <= 120)||LA70_0==122||LA70_0==126||LA70_0==129||LA70_0==132||LA70_0==135||LA70_0==138||LA70_0==141||(LA70_0 >= 143 && LA70_0 <= 144)||(LA70_0 >= 146 && LA70_0 <= 148)||(LA70_0 >= 150 && LA70_0 <= 152)||LA70_0==154||LA70_0==157||LA70_0==160||LA70_0==162||LA70_0==167||LA70_0==169||(LA70_0 >= 171 && LA70_0 <= 174)||LA70_0==177||LA70_0==180||(LA70_0 >= 183 && LA70_0 <= 187)||(LA70_0 >= 189 && LA70_0 <= 190)||LA70_0==194||LA70_0==196||LA70_0==202) ) {
				alt70=1;
			}
			else if ( (LA70_0==197) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:304:2: expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_initializer_value3079);
					expression203=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression203.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:305:4: object_or_collection_initializer
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value3085);
					object_or_collection_initializer204=object_or_collection_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer204.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, initializer_value_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "initializer_value"


	public static class typeof_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "typeof_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:309:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
	public final csParser.typeof_expression_return typeof_expression() throws RecognitionException {
		csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
		retval.start = input.LT(1);
		int typeof_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal205=null;
		Token char_literal206=null;
		Token string_literal209=null;
		Token char_literal210=null;
		ParserRuleReturnScope unbound_type_name207 =null;
		ParserRuleReturnScope type208 =null;

		CommonTree string_literal205_tree=null;
		CommonTree char_literal206_tree=null;
		CommonTree string_literal209_tree=null;
		CommonTree char_literal210_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:309:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:310:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal205=(Token)match(input,184,FOLLOW_184_in_typeof_expression3097); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal205_tree = (CommonTree)adaptor.create(string_literal205);
			adaptor.addChild(root_0, string_literal205_tree);
			}

			char_literal206=(Token)match(input,68,FOLLOW_68_in_typeof_expression3101); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal206_tree = (CommonTree)adaptor.create(char_literal206);
			adaptor.addChild(root_0, char_literal206_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:310:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
			int alt71=3;
			alt71 = dfa71.predict(input);
			switch (alt71) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:310:20: ( unbound_type_name )=> unbound_type_name
					{
					pushFollow(FOLLOW_unbound_type_name_in_typeof_expression3112);
					unbound_type_name207=unbound_type_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name207.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:311:10: type
					{
					pushFollow(FOLLOW_type_in_typeof_expression3123);
					type208=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type208.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:312:10: 'void'
					{
					string_literal209=(Token)match(input,192,FOLLOW_192_in_typeof_expression3135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal209_tree = (CommonTree)adaptor.create(string_literal209);
					adaptor.addChild(root_0, string_literal209_tree);
					}

					}
					break;

			}

			char_literal210=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression3140); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal210_tree = (CommonTree)adaptor.create(char_literal210);
			adaptor.addChild(root_0, char_literal210_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, typeof_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeof_expression"


	public static class unbound_type_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unbound_type_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:317:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
	public final csParser.unbound_type_name_return unbound_type_name() throws RecognitionException {
		csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
		retval.start = input.LT(1);
		int unbound_type_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope unbound_type_name_start211 =null;
		ParserRuleReturnScope generic_dimension_specifier212 =null;
		ParserRuleReturnScope unbound_type_name_part213 =null;
		ParserRuleReturnScope unbound_type_name_part214 =null;
		ParserRuleReturnScope generic_dimension_specifier215 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:317:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:319:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name3155);
			unbound_type_name_start211=unbound_type_name_start();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_start211.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
			loop72:
			while (true) {
				int alt72=3;
				alt72 = dfa72.predict(input);
				switch (alt72) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
					{
					pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3174);
					generic_dimension_specifier212=generic_dimension_specifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier212.getTree());

					pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name3178);
					unbound_type_name_part213=unbound_type_name_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part213.getTree());

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:321:5: unbound_type_name_part
					{
					pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name3185);
					unbound_type_name_part214=unbound_type_name_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part214.getTree());

					}
					break;

				default :
					break loop72;
				}
			}

			pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3195);
			generic_dimension_specifier215=generic_dimension_specifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier215.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, unbound_type_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unbound_type_name"


	public static class unbound_type_name_start_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unbound_type_name_start"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:325:1: unbound_type_name_start : identifier ( '::' identifier )? ;
	public final csParser.unbound_type_name_start_return unbound_type_name_start() throws RecognitionException {
		csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
		retval.start = input.LT(1);
		int unbound_type_name_start_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal217=null;
		ParserRuleReturnScope identifier216 =null;
		ParserRuleReturnScope identifier218 =null;

		CommonTree string_literal217_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:325:24: ( identifier ( '::' identifier )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:326:2: identifier ( '::' identifier )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_unbound_type_name_start3205);
			identifier216=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier216.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:326:13: ( '::' identifier )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==80) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:326:14: '::' identifier
					{
					string_literal217=(Token)match(input,80,FOLLOW_80_in_unbound_type_name_start3208); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal217_tree = (CommonTree)adaptor.create(string_literal217);
					adaptor.addChild(root_0, string_literal217_tree);
					}

					pushFollow(FOLLOW_identifier_in_unbound_type_name_start3210);
					identifier218=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier218.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, unbound_type_name_start_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unbound_type_name_start"


	public static class unbound_type_name_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unbound_type_name_part"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:327:1: unbound_type_name_part : '.' identifier ;
	public final csParser.unbound_type_name_part_return unbound_type_name_part() throws RecognitionException {
		csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
		retval.start = input.LT(1);
		int unbound_type_name_part_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal219=null;
		ParserRuleReturnScope identifier220 =null;

		CommonTree char_literal219_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:327:23: ( '.' identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:328:2: '.' identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal219=(Token)match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part3219); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal219_tree = (CommonTree)adaptor.create(char_literal219);
			adaptor.addChild(root_0, char_literal219_tree);
			}

			pushFollow(FOLLOW_identifier_in_unbound_type_name_part3223);
			identifier220=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier220.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, unbound_type_name_part_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unbound_type_name_part"


	public static class generic_dimension_specifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "generic_dimension_specifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:329:1: generic_dimension_specifier : '<' ( commas )? '>' ;
	public final csParser.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
		csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
		retval.start = input.LT(1);
		int generic_dimension_specifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal221=null;
		Token char_literal223=null;
		ParserRuleReturnScope commas222 =null;

		CommonTree char_literal221_tree=null;
		CommonTree char_literal223_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:329:28: ( '<' ( commas )? '>' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:330:2: '<' ( commas )? '>'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal221=(Token)match(input,81,FOLLOW_81_in_generic_dimension_specifier3231); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal221_tree = (CommonTree)adaptor.create(char_literal221);
			adaptor.addChild(root_0, char_literal221_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:330:8: ( commas )?
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==74) ) {
				alt74=1;
			}
			switch (alt74) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:330:8: commas
					{
					pushFollow(FOLLOW_commas_in_generic_dimension_specifier3235);
					commas222=commas();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commas222.getTree());

					}
					break;

			}

			char_literal223=(Token)match(input,GT,FOLLOW_GT_in_generic_dimension_specifier3240); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal223_tree = (CommonTree)adaptor.create(char_literal223);
			adaptor.addChild(root_0, char_literal223_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, generic_dimension_specifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "generic_dimension_specifier"


	public static class commas_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "commas"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:331:1: commas : ( ',' )+ ;
	public final csParser.commas_return commas() throws RecognitionException {
		csParser.commas_return retval = new csParser.commas_return();
		retval.start = input.LT(1);
		int commas_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal224=null;

		CommonTree char_literal224_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:331:7: ( ( ',' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:332:2: ( ',' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:332:2: ( ',' )+
			int cnt75=0;
			loop75:
			while (true) {
				int alt75=2;
				int LA75_0 = input.LA(1);
				if ( (LA75_0==74) ) {
					alt75=1;
				}

				switch (alt75) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:332:2: ','
					{
					char_literal224=(Token)match(input,74,FOLLOW_74_in_commas3249); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal224_tree = (CommonTree)adaptor.create(char_literal224);
					adaptor.addChild(root_0, char_literal224_tree);
					}

					}
					break;

				default :
					if ( cnt75 >= 1 ) break loop75;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(75, input);
					throw eee;
				}
				cnt75++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, commas_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "commas"


	public static class type_name_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:338:1: type_name returns [CsharpNode t] : a= namespace_or_type_name ;
	public final csParser.type_name_return type_name() throws RecognitionException {
		csParser.type_name_return retval = new csParser.type_name_return();
		retval.start = input.LT(1);
		int type_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:338:35: (a= namespace_or_type_name )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:339:2: a= namespace_or_type_name
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_namespace_or_type_name_in_type_name3273);
			a=namespace_or_type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.namespace_or_type_name_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, type_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class namespace_or_type_name_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namespace_or_type_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:341:1: namespace_or_type_name returns [CsharpNode t] : a= type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
	public final csParser.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
		csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
		retval.start = input.LT(1);
		int namespace_or_type_name_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal225=null;
		Token char_literal227=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope type_or_generic226 =null;
		ParserRuleReturnScope type_or_generic228 =null;

		CommonTree string_literal225_tree=null;
		CommonTree char_literal227_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:341:48: (a= type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:342:3: a= type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3293);
			a=type_or_generic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.type_or_generic_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:342:34: ( '::' type_or_generic )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==80) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:342:35: '::' type_or_generic
					{
					string_literal225=(Token)match(input,80,FOLLOW_80_in_namespace_or_type_name3300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal225_tree = (CommonTree)adaptor.create(string_literal225);
					adaptor.addChild(root_0, string_literal225_tree);
					}

					pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3302);
					type_or_generic226=type_or_generic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic226.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:342:58: ( '.' type_or_generic )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==DOT) ) {
					int LA77_2 = input.LA(2);
					if ( (LA77_2==IDENTIFIER||LA77_2==95||(LA77_2 >= 97 && LA77_2 <= 98)||(LA77_2 >= 100 && LA77_2 <= 101)||LA77_2==105||LA77_2==117||LA77_2==120||LA77_2==122||LA77_2==126||LA77_2==132||LA77_2==135||LA77_2==141||(LA77_2 >= 143 && LA77_2 <= 144)||(LA77_2 >= 147 && LA77_2 <= 148)||LA77_2==152||LA77_2==154||LA77_2==157||LA77_2==160||LA77_2==162||LA77_2==167||(LA77_2 >= 171 && LA77_2 <= 172)||LA77_2==183||LA77_2==190||LA77_2==194||LA77_2==196) ) {
						alt77=1;
					}

				}

				switch (alt77) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:342:59: '.' type_or_generic
					{
					char_literal227=(Token)match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name3307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal227_tree = (CommonTree)adaptor.create(char_literal227);
					adaptor.addChild(root_0, char_literal227_tree);
					}

					pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name3311);
					type_or_generic228=type_or_generic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic228.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, namespace_or_type_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespace_or_type_name"


	public static class type_or_generic_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_or_generic"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:343:1: type_or_generic returns [CsharpNode t] : ( ( identifier '<' )=>a= identifier b= generic_argument_list |a= identifier );
	public final csParser.type_or_generic_return type_or_generic() throws RecognitionException {
		csParser.type_or_generic_return retval = new csParser.type_or_generic_return();
		retval.start = input.LT(1);
		int type_or_generic_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:344:32: ( ( identifier '<' )=>a= identifier b= generic_argument_list |a= identifier )
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==IDENTIFIER||LA78_0==95||(LA78_0 >= 97 && LA78_0 <= 98)||(LA78_0 >= 100 && LA78_0 <= 101)||LA78_0==105||LA78_0==117||LA78_0==120||LA78_0==122||LA78_0==126||LA78_0==132||LA78_0==135||LA78_0==141||(LA78_0 >= 143 && LA78_0 <= 144)||(LA78_0 >= 147 && LA78_0 <= 148)||LA78_0==152||LA78_0==154||LA78_0==157||LA78_0==160||LA78_0==162||LA78_0==167||(LA78_0 >= 171 && LA78_0 <= 172)||LA78_0==183||LA78_0==190||LA78_0==194||LA78_0==196) ) {
				int LA78_1 = input.LA(2);
				if ( (synpred15_cs()) ) {
					alt78=1;
				}
				else if ( (true) ) {
					alt78=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 78, 0, input);
				throw nvae;
			}

			switch (alt78) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:345:9: ( identifier '<' )=>a= identifier b= generic_argument_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_type_or_generic3351);
					a=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					pushFollow(FOLLOW_generic_argument_list_in_type_or_generic3357);
					b=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t = new type_or_generic((a!=null?((csParser.identifier_return)a).t:null),(b!=null?((csParser.generic_argument_list_return)b).t:null));}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:346:11: a= identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_type_or_generic3373);
					a=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.identifier_return)a).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, type_or_generic_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_or_generic"


	public static class qid_return extends ParserRuleReturnScope {
		public qid t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qid"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:348:1: qid returns [qid t] : qid_start ( qid_part )* ;
	public final csParser.qid_return qid() throws RecognitionException {
		csParser.qid_return retval = new csParser.qid_return();
		retval.start = input.LT(1);
		int qid_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope qid_start229 =null;
		ParserRuleReturnScope qid_part230 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:349:50: ( qid_start ( qid_part )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:351:2: qid_start ( qid_part )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_qid_start_in_qid3396);
			qid_start229=qid_start();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_start229.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:351:14: ( qid_part )*
			loop79:
			while (true) {
				int alt79=2;
				int LA79_0 = input.LA(1);
				if ( (LA79_0==DOT) ) {
					int LA79_2 = input.LA(2);
					if ( (LA79_2==IDENTIFIER||LA79_2==95||(LA79_2 >= 97 && LA79_2 <= 98)||(LA79_2 >= 100 && LA79_2 <= 101)||LA79_2==105||LA79_2==117||LA79_2==120||LA79_2==122||LA79_2==126||LA79_2==132||LA79_2==135||LA79_2==141||(LA79_2 >= 143 && LA79_2 <= 144)||(LA79_2 >= 147 && LA79_2 <= 148)||LA79_2==152||LA79_2==154||LA79_2==157||LA79_2==160||LA79_2==162||LA79_2==167||(LA79_2 >= 171 && LA79_2 <= 172)||LA79_2==183||LA79_2==190||LA79_2==194||LA79_2==196) ) {
						alt79=1;
					}

				}
				else if ( (LA79_0==PTR) ) {
					alt79=1;
				}

				switch (alt79) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:351:14: qid_part
					{
					pushFollow(FOLLOW_qid_part_in_qid3400);
					qid_part230=qid_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_part230.getTree());

					}
					break;

				default :
					break loop79;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new qid(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, qid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qid"


	public static class qid_start_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qid_start"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:353:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
	public final csParser.qid_start_return qid_start() throws RecognitionException {
		csParser.qid_start_return retval = new csParser.qid_start_return();
		retval.start = input.LT(1);
		int qid_start_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal235=null;
		ParserRuleReturnScope predefined_type231 =null;
		ParserRuleReturnScope identifier232 =null;
		ParserRuleReturnScope generic_argument_list233 =null;
		ParserRuleReturnScope identifier234 =null;
		ParserRuleReturnScope identifier236 =null;
		ParserRuleReturnScope literal237 =null;

		CommonTree string_literal235_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:353:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
			int alt81=4;
			switch ( input.LA(1) ) {
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt81=1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA81_2 = input.LA(2);
				if ( (LA81_2==81) && (synpred16_cs())) {
					alt81=2;
				}
				else if ( (LA81_2==DOT||LA81_2==PTR||LA81_2==68||LA81_2==80||LA81_2==197) ) {
					alt81=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt81=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:354:2: predefined_type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_predefined_type_in_qid_start3410);
					predefined_type231=predefined_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type231.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:355:4: ( identifier '<' )=> identifier generic_argument_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_qid_start3426);
					identifier232=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier232.getTree());

					pushFollow(FOLLOW_generic_argument_list_in_qid_start3430);
					generic_argument_list233=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list233.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:358:4: identifier ( '::' identifier )?
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_qid_start3437);
					identifier234=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier234.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:358:17: ( '::' identifier )?
					int alt80=2;
					int LA80_0 = input.LA(1);
					if ( (LA80_0==80) ) {
						alt80=1;
					}
					switch (alt80) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:358:18: '::' identifier
							{
							string_literal235=(Token)match(input,80,FOLLOW_80_in_qid_start3442); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal235_tree = (CommonTree)adaptor.create(string_literal235);
							adaptor.addChild(root_0, string_literal235_tree);
							}

							pushFollow(FOLLOW_identifier_in_qid_start3446);
							identifier236=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier236.getTree());

							}
							break;

					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:359:4: literal
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_literal_in_qid_start3453);
					literal237=literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, literal237.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, qid_start_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qid_start"


	public static class qid_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qid_part"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:363:1: qid_part : access_identifier ;
	public final csParser.qid_part_return qid_part() throws RecognitionException {
		csParser.qid_part_return retval = new csParser.qid_part_return();
		retval.start = input.LT(1);
		int qid_part_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope access_identifier238 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:363:9: ( access_identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:364:2: access_identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_access_identifier_in_qid_part3467);
			access_identifier238=access_identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier238.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, qid_part_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qid_part"


	public static class generic_argument_list_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "generic_argument_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:366:1: generic_argument_list returns [UnknownNode t] : '<' type_arguments '>' ;
	public final csParser.generic_argument_list_return generic_argument_list() throws RecognitionException {
		csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
		retval.start = input.LT(1);
		int generic_argument_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal239=null;
		Token char_literal241=null;
		ParserRuleReturnScope type_arguments240 =null;

		CommonTree char_literal239_tree=null;
		CommonTree char_literal241_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:367:37: ( '<' type_arguments '>' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:368:2: '<' type_arguments '>'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal239=(Token)match(input,81,FOLLOW_81_in_generic_argument_list3488); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal239_tree = (CommonTree)adaptor.create(char_literal239);
			adaptor.addChild(root_0, char_literal239_tree);
			}

			pushFollow(FOLLOW_type_arguments_in_generic_argument_list3492);
			type_arguments240=type_arguments();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_arguments240.getTree());

			char_literal241=(Token)match(input,GT,FOLLOW_GT_in_generic_argument_list3496); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal241_tree = (CommonTree)adaptor.create(char_literal241);
			adaptor.addChild(root_0, char_literal241_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, generic_argument_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "generic_argument_list"


	public static class type_arguments_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_arguments"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:369:1: type_arguments : type ( ',' type )* ;
	public final csParser.type_arguments_return type_arguments() throws RecognitionException {
		csParser.type_arguments_return retval = new csParser.type_arguments_return();
		retval.start = input.LT(1);
		int type_arguments_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal243=null;
		ParserRuleReturnScope type242 =null;
		ParserRuleReturnScope type244 =null;

		CommonTree char_literal243_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:369:15: ( type ( ',' type )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:370:2: type ( ',' type )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_type_arguments3505);
			type242=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type242.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:370:7: ( ',' type )*
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==74) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:370:8: ',' type
					{
					char_literal243=(Token)match(input,74,FOLLOW_74_in_type_arguments3508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal243_tree = (CommonTree)adaptor.create(char_literal243);
					adaptor.addChild(root_0, char_literal243_tree);
					}

					pushFollow(FOLLOW_type_in_type_arguments3510);
					type244=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type244.getTree());

					}
					break;

				default :
					break loop82;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, type_arguments_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_arguments"


	public static class type_return extends ParserRuleReturnScope {
		public type t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:371:1: type returns [type t] : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ ) ;
	public final csParser.type_return type() throws RecognitionException {
		csParser.type_return retval = new csParser.type_return();
		retval.start = input.LT(1);
		int type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal248=null;
		Token char_literal251=null;
		Token char_literal252=null;
		Token string_literal255=null;
		Token char_literal256=null;
		ParserRuleReturnScope predefined_type245 =null;
		ParserRuleReturnScope type_name246 =null;
		ParserRuleReturnScope rank_specifiers247 =null;
		ParserRuleReturnScope predefined_type249 =null;
		ParserRuleReturnScope type_name250 =null;
		ParserRuleReturnScope predefined_type253 =null;
		ParserRuleReturnScope type_name254 =null;

		CommonTree char_literal248_tree=null;
		CommonTree char_literal251_tree=null;
		CommonTree char_literal252_tree=null;
		CommonTree string_literal255_tree=null;
		CommonTree char_literal256_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:372:52: ( ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:9: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:9: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
			int alt90=4;
			switch ( input.LA(1) ) {
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA90_1 = input.LA(2);
				if ( (synpred17_cs()) ) {
					alt90=1;
				}
				else if ( (synpred18_cs()) ) {
					alt90=2;
				}
				else if ( (true) ) {
					alt90=3;
				}

				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA90_2 = input.LA(2);
				if ( (synpred17_cs()) ) {
					alt90=1;
				}
				else if ( (synpred18_cs()) ) {
					alt90=2;
				}
				else if ( (true) ) {
					alt90=3;
				}

				}
				break;
			case 192:
				{
				alt90=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}
			switch (alt90) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:12: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:64: ( predefined_type | type_name )
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==103||LA83_0==106||LA83_0==109||LA83_0==114||LA83_0==119||LA83_0==129||LA83_0==138||LA83_0==146||LA83_0==151||LA83_0==169||LA83_0==173||LA83_0==177||(LA83_0 >= 185 && LA83_0 <= 186)||LA83_0==189) ) {
						alt83=1;
					}
					else if ( (LA83_0==IDENTIFIER||LA83_0==95||(LA83_0 >= 97 && LA83_0 <= 98)||(LA83_0 >= 100 && LA83_0 <= 101)||LA83_0==105||LA83_0==117||LA83_0==120||LA83_0==122||LA83_0==126||LA83_0==132||LA83_0==135||LA83_0==141||(LA83_0 >= 143 && LA83_0 <= 144)||(LA83_0 >= 147 && LA83_0 <= 148)||LA83_0==152||LA83_0==154||LA83_0==157||LA83_0==160||LA83_0==162||LA83_0==167||(LA83_0 >= 171 && LA83_0 <= 172)||LA83_0==183||LA83_0==190||LA83_0==194||LA83_0==196) ) {
						alt83=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 83, 0, input);
						throw nvae;
					}

					switch (alt83) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:65: predefined_type
							{
							pushFollow(FOLLOW_predefined_type_in_type3558);
							predefined_type245=predefined_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type245.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:83: type_name
							{
							pushFollow(FOLLOW_type_name_in_type3562);
							type_name246=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name246.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_rank_specifiers_in_type3567);
					rank_specifiers247=rank_specifiers();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers247.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:114: ( '*' )*
					loop84:
					while (true) {
						int alt84=2;
						int LA84_0 = input.LA(1);
						if ( (LA84_0==69) ) {
							alt84=1;
						}

						switch (alt84) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:114: '*'
							{
							char_literal248=(Token)match(input,69,FOLLOW_69_in_type3571); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal248_tree = (CommonTree)adaptor.create(char_literal248);
							adaptor.addChild(root_0, char_literal248_tree);
							}

							}
							break;

						default :
							break loop84;
						}
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:11: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:60: ( predefined_type | type_name )
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==103||LA85_0==106||LA85_0==109||LA85_0==114||LA85_0==119||LA85_0==129||LA85_0==138||LA85_0==146||LA85_0==151||LA85_0==169||LA85_0==173||LA85_0==177||(LA85_0 >= 185 && LA85_0 <= 186)||LA85_0==189) ) {
						alt85=1;
					}
					else if ( (LA85_0==IDENTIFIER||LA85_0==95||(LA85_0 >= 97 && LA85_0 <= 98)||(LA85_0 >= 100 && LA85_0 <= 101)||LA85_0==105||LA85_0==117||LA85_0==120||LA85_0==122||LA85_0==126||LA85_0==132||LA85_0==135||LA85_0==141||(LA85_0 >= 143 && LA85_0 <= 144)||(LA85_0 >= 147 && LA85_0 <= 148)||LA85_0==152||LA85_0==154||LA85_0==157||LA85_0==160||LA85_0==162||LA85_0==167||(LA85_0 >= 171 && LA85_0 <= 172)||LA85_0==183||LA85_0==190||LA85_0==194||LA85_0==196) ) {
						alt85=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 85, 0, input);
						throw nvae;
					}

					switch (alt85) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:61: predefined_type
							{
							pushFollow(FOLLOW_predefined_type_in_type3607);
							predefined_type249=predefined_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type249.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:79: type_name
							{
							pushFollow(FOLLOW_type_name_in_type3611);
							type_name250=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name250.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:92: ( ( '*' )+ | '?' )
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==69) ) {
						alt87=1;
					}
					else if ( (LA87_0==89) ) {
						alt87=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 87, 0, input);
						throw nvae;
					}

					switch (alt87) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:93: ( '*' )+
							{
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:93: ( '*' )+
							int cnt86=0;
							loop86:
							while (true) {
								int alt86=2;
								int LA86_0 = input.LA(1);
								if ( (LA86_0==69) ) {
									alt86=1;
								}

								switch (alt86) {
								case 1 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:93: '*'
									{
									char_literal251=(Token)match(input,69,FOLLOW_69_in_type3617); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									char_literal251_tree = (CommonTree)adaptor.create(char_literal251);
									adaptor.addChild(root_0, char_literal251_tree);
									}

									}
									break;

								default :
									if ( cnt86 >= 1 ) break loop86;
									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee = new EarlyExitException(86, input);
									throw eee;
								}
								cnt86++;
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:100: '?'
							{
							char_literal252=(Token)match(input,89,FOLLOW_89_in_type3622); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal252_tree = (CommonTree)adaptor.create(char_literal252);
							adaptor.addChild(root_0, char_literal252_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:375:11: ( predefined_type | type_name )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:375:11: ( predefined_type | type_name )
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==103||LA88_0==106||LA88_0==109||LA88_0==114||LA88_0==119||LA88_0==129||LA88_0==138||LA88_0==146||LA88_0==151||LA88_0==169||LA88_0==173||LA88_0==177||(LA88_0 >= 185 && LA88_0 <= 186)||LA88_0==189) ) {
						alt88=1;
					}
					else if ( (LA88_0==IDENTIFIER||LA88_0==95||(LA88_0 >= 97 && LA88_0 <= 98)||(LA88_0 >= 100 && LA88_0 <= 101)||LA88_0==105||LA88_0==117||LA88_0==120||LA88_0==122||LA88_0==126||LA88_0==132||LA88_0==135||LA88_0==141||(LA88_0 >= 143 && LA88_0 <= 144)||(LA88_0 >= 147 && LA88_0 <= 148)||LA88_0==152||LA88_0==154||LA88_0==157||LA88_0==160||LA88_0==162||LA88_0==167||(LA88_0 >= 171 && LA88_0 <= 172)||LA88_0==183||LA88_0==190||LA88_0==194||LA88_0==196) ) {
						alt88=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 88, 0, input);
						throw nvae;
					}

					switch (alt88) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:375:12: predefined_type
							{
							pushFollow(FOLLOW_predefined_type_in_type3636);
							predefined_type253=predefined_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type253.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:375:30: type_name
							{
							pushFollow(FOLLOW_type_name_in_type3640);
							type_name254=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name254.getTree());

							}
							break;

					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:376:11: 'void' ( '*' )+
					{
					string_literal255=(Token)match(input,192,FOLLOW_192_in_type3653); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal255_tree = (CommonTree)adaptor.create(string_literal255);
					adaptor.addChild(root_0, string_literal255_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:376:18: ( '*' )+
					int cnt89=0;
					loop89:
					while (true) {
						int alt89=2;
						int LA89_0 = input.LA(1);
						if ( (LA89_0==69) ) {
							alt89=1;
						}

						switch (alt89) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:376:18: '*'
							{
							char_literal256=(Token)match(input,69,FOLLOW_69_in_type3655); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal256_tree = (CommonTree)adaptor.create(char_literal256);
							adaptor.addChild(root_0, char_literal256_tree);
							}

							}
							break;

						default :
							if ( cnt89 >= 1 ) break loop89;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(89, input);
							throw eee;
						}
						cnt89++;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new type(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type"


	public static class non_nullable_type_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "non_nullable_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:378:1: non_nullable_type returns [UnknownNode t] : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? identifier ) | 'void' ( '*' )+ );
	public final csParser.non_nullable_type_return non_nullable_type() throws RecognitionException {
		csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
		retval.start = input.LT(1);
		int non_nullable_type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal260=null;
		Token char_literal261=null;
		Token string_literal263=null;
		Token char_literal264=null;
		ParserRuleReturnScope predefined_type257 =null;
		ParserRuleReturnScope type_name258 =null;
		ParserRuleReturnScope rank_specifiers259 =null;
		ParserRuleReturnScope identifier262 =null;

		CommonTree char_literal260_tree=null;
		CommonTree char_literal261_tree=null;
		CommonTree string_literal263_tree=null;
		CommonTree char_literal264_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:379:37: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? identifier ) | 'void' ( '*' )+ )
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==IDENTIFIER||LA97_0==95||(LA97_0 >= 97 && LA97_0 <= 98)||(LA97_0 >= 100 && LA97_0 <= 101)||LA97_0==103||(LA97_0 >= 105 && LA97_0 <= 106)||LA97_0==109||LA97_0==114||LA97_0==117||(LA97_0 >= 119 && LA97_0 <= 120)||LA97_0==122||LA97_0==126||LA97_0==129||LA97_0==132||LA97_0==135||LA97_0==138||LA97_0==141||(LA97_0 >= 143 && LA97_0 <= 144)||(LA97_0 >= 146 && LA97_0 <= 148)||(LA97_0 >= 151 && LA97_0 <= 152)||LA97_0==154||LA97_0==157||LA97_0==160||LA97_0==162||LA97_0==167||LA97_0==169||(LA97_0 >= 171 && LA97_0 <= 173)||LA97_0==177||LA97_0==183||(LA97_0 >= 185 && LA97_0 <= 186)||(LA97_0 >= 189 && LA97_0 <= 190)||LA97_0==194||LA97_0==196) ) {
				alt97=1;
			}
			else if ( (LA97_0==192) ) {
				alt97=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 97, 0, input);
				throw nvae;
			}

			switch (alt97) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:380:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? identifier )
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:380:2: ( predefined_type | type_name )
					int alt91=2;
					int LA91_0 = input.LA(1);
					if ( (LA91_0==103||LA91_0==106||LA91_0==109||LA91_0==114||LA91_0==119||LA91_0==129||LA91_0==138||LA91_0==146||LA91_0==151||LA91_0==169||LA91_0==173||LA91_0==177||(LA91_0 >= 185 && LA91_0 <= 186)||LA91_0==189) ) {
						alt91=1;
					}
					else if ( (LA91_0==IDENTIFIER||LA91_0==95||(LA91_0 >= 97 && LA91_0 <= 98)||(LA91_0 >= 100 && LA91_0 <= 101)||LA91_0==105||LA91_0==117||LA91_0==120||LA91_0==122||LA91_0==126||LA91_0==132||LA91_0==135||LA91_0==141||(LA91_0 >= 143 && LA91_0 <= 144)||(LA91_0 >= 147 && LA91_0 <= 148)||LA91_0==152||LA91_0==154||LA91_0==157||LA91_0==160||LA91_0==162||LA91_0==167||(LA91_0 >= 171 && LA91_0 <= 172)||LA91_0==183||LA91_0==190||LA91_0==194||LA91_0==196) ) {
						alt91=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 91, 0, input);
						throw nvae;
					}

					switch (alt91) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:380:3: predefined_type
							{
							pushFollow(FOLLOW_predefined_type_in_non_nullable_type3686);
							predefined_type257=predefined_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type257.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:380:21: type_name
							{
							pushFollow(FOLLOW_type_name_in_non_nullable_type3690);
							type_name258=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name258.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:381:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? identifier )
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==91) ) {
						alt95=1;
					}
					else if ( (LA95_0==IDENTIFIER||LA95_0==69||LA95_0==95||(LA95_0 >= 97 && LA95_0 <= 98)||(LA95_0 >= 100 && LA95_0 <= 101)||LA95_0==105||LA95_0==117||LA95_0==120||LA95_0==122||LA95_0==126||LA95_0==132||LA95_0==135||LA95_0==141||(LA95_0 >= 143 && LA95_0 <= 144)||(LA95_0 >= 147 && LA95_0 <= 148)||LA95_0==152||LA95_0==154||LA95_0==157||LA95_0==160||LA95_0==162||LA95_0==167||(LA95_0 >= 171 && LA95_0 <= 172)||LA95_0==183||LA95_0==190||LA95_0==194||LA95_0==196) ) {
						alt95=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 95, 0, input);
						throw nvae;
					}

					switch (alt95) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:381:7: rank_specifiers ( '*' )*
							{
							pushFollow(FOLLOW_rank_specifiers_in_non_nullable_type3699);
							rank_specifiers259=rank_specifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers259.getTree());

							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:381:25: ( '*' )*
							loop92:
							while (true) {
								int alt92=2;
								int LA92_0 = input.LA(1);
								if ( (LA92_0==69) ) {
									alt92=1;
								}

								switch (alt92) {
								case 1 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:381:25: '*'
									{
									char_literal260=(Token)match(input,69,FOLLOW_69_in_non_nullable_type3703); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									char_literal260_tree = (CommonTree)adaptor.create(char_literal260);
									adaptor.addChild(root_0, char_literal260_tree);
									}

									}
									break;

								default :
									break loop92;
								}
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:382:6: ( ( '*' )+ )? identifier
							{
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:382:6: ( ( '*' )+ )?
							int alt94=2;
							int LA94_0 = input.LA(1);
							if ( (LA94_0==69) ) {
								alt94=1;
							}
							switch (alt94) {
								case 1 :
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:382:7: ( '*' )+
									{
									// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:382:7: ( '*' )+
									int cnt93=0;
									loop93:
									while (true) {
										int alt93=2;
										int LA93_0 = input.LA(1);
										if ( (LA93_0==69) ) {
											alt93=1;
										}

										switch (alt93) {
										case 1 :
											// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:382:7: '*'
											{
											char_literal261=(Token)match(input,69,FOLLOW_69_in_non_nullable_type3712); if (state.failed) return retval;
											if ( state.backtracking==0 ) {
											char_literal261_tree = (CommonTree)adaptor.create(char_literal261);
											adaptor.addChild(root_0, char_literal261_tree);
											}

											}
											break;

										default :
											if ( cnt93 >= 1 ) break loop93;
											if (state.backtracking>0) {state.failed=true; return retval;}
											EarlyExitException eee = new EarlyExitException(93, input);
											throw eee;
										}
										cnt93++;
									}

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_non_nullable_type3719);
							identifier262=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier262.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:384:4: 'void' ( '*' )+
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal263=(Token)match(input,192,FOLLOW_192_in_non_nullable_type3725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal263_tree = (CommonTree)adaptor.create(string_literal263);
					adaptor.addChild(root_0, string_literal263_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:384:13: ( '*' )+
					int cnt96=0;
					loop96:
					while (true) {
						int alt96=2;
						int LA96_0 = input.LA(1);
						if ( (LA96_0==69) ) {
							alt96=1;
						}

						switch (alt96) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:384:13: '*'
							{
							char_literal264=(Token)match(input,69,FOLLOW_69_in_non_nullable_type3729); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal264_tree = (CommonTree)adaptor.create(char_literal264);
							adaptor.addChild(root_0, char_literal264_tree);
							}

							}
							break;

						default :
							if ( cnt96 >= 1 ) break loop96;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(96, input);
							throw eee;
						}
						cnt96++;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, non_nullable_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "non_nullable_type"


	public static class non_array_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "non_array_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:386:1: non_array_type : type ;
	public final csParser.non_array_type_return non_array_type() throws RecognitionException {
		csParser.non_array_type_return retval = new csParser.non_array_type_return();
		retval.start = input.LT(1);
		int non_array_type_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type265 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:386:15: ( type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:387:2: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_non_array_type3740);
			type265=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type265.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, non_array_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "non_array_type"


	public static class array_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "array_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:388:1: array_type : type ;
	public final csParser.array_type_return array_type() throws RecognitionException {
		csParser.array_type_return retval = new csParser.array_type_return();
		retval.start = input.LT(1);
		int array_type_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type266 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:388:11: ( type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:389:2: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_array_type3747);
			type266=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type266.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, array_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "array_type"


	public static class unmanaged_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unmanaged_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:390:1: unmanaged_type : type ;
	public final csParser.unmanaged_type_return unmanaged_type() throws RecognitionException {
		csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
		retval.start = input.LT(1);
		int unmanaged_type_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type267 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:390:15: ( type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:391:2: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_unmanaged_type3754);
			type267=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type267.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, unmanaged_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unmanaged_type"


	public static class class_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:392:1: class_type : type ;
	public final csParser.class_type_return class_type() throws RecognitionException {
		csParser.class_type_return retval = new csParser.class_type_return();
		retval.start = input.LT(1);
		int class_type_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type268 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:392:11: ( type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:393:2: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_class_type3761);
			type268=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type268.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, class_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_type"


	public static class pointer_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pointer_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:394:1: pointer_type : type ;
	public final csParser.pointer_type_return pointer_type() throws RecognitionException {
		csParser.pointer_type_return retval = new csParser.pointer_type_return();
		retval.start = input.LT(1);
		int pointer_type_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type269 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:394:13: ( type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:395:2: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_pointer_type3768);
			type269=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type269.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, pointer_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointer_type"


	public static class block_return extends ParserRuleReturnScope {
		public block t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "block"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:401:1: block returns [block t] : ( ';' | '{' (a= statement_list )? '}' );
	public final csParser.block_return block() throws RecognitionException {
		csParser.block_return retval = new csParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal270=null;
		Token char_literal271=null;
		Token char_literal272=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal270_tree=null;
		CommonTree char_literal271_tree=null;
		CommonTree char_literal272_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:401:25: ( ';' | '{' (a= statement_list )? '}' )
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==SEMI) ) {
				alt99=1;
			}
			else if ( (LA99_0==197) ) {
				alt99=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}

			switch (alt99) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:402:9: ';'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal270=(Token)match(input,SEMI,FOLLOW_SEMI_in_block3792); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal270_tree = (CommonTree)adaptor.create(char_literal270);
					adaptor.addChild(root_0, char_literal270_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:403:11: '{' (a= statement_list )? '}'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal271=(Token)match(input,197,FOLLOW_197_in_block3804); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal271_tree = (CommonTree)adaptor.create(char_literal271);
					adaptor.addChild(root_0, char_literal271_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:403:18: (a= statement_list )?
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==Character_literal||LA98_0==FALSE||(LA98_0 >= Hex_number && LA98_0 <= IF)||(LA98_0 >= MINUS && LA98_0 <= NUMBER)||LA98_0==Real_literal||(LA98_0 >= SEMI && LA98_0 <= STRINGLITERAL)||LA98_0==TRUE||(LA98_0 >= USING && LA98_0 <= Verbatim_string_literal)||LA98_0==61||LA98_0==66||(LA98_0 >= 68 && LA98_0 <= 69)||(LA98_0 >= 71 && LA98_0 <= 72)||LA98_0==75||LA98_0==95||(LA98_0 >= 97 && LA98_0 <= 98)||(LA98_0 >= 100 && LA98_0 <= 106)||(LA98_0 >= 109 && LA98_0 <= 110)||(LA98_0 >= 112 && LA98_0 <= 120)||LA98_0==122||LA98_0==126||(LA98_0 >= 128 && LA98_0 <= 132)||(LA98_0 >= 134 && LA98_0 <= 135)||LA98_0==138||LA98_0==141||(LA98_0 >= 143 && LA98_0 <= 148)||(LA98_0 >= 150 && LA98_0 <= 152)||LA98_0==154||LA98_0==157||LA98_0==160||LA98_0==162||(LA98_0 >= 167 && LA98_0 <= 169)||(LA98_0 >= 171 && LA98_0 <= 174)||LA98_0==177||(LA98_0 >= 179 && LA98_0 <= 190)||LA98_0==192||(LA98_0 >= 194 && LA98_0 <= 197)||LA98_0==202) ) {
						alt98=1;
					}
					switch (alt98) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:403:18: a= statement_list
							{
							pushFollow(FOLLOW_statement_list_in_block3810);
							a=statement_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

							}
							break;

					}

					char_literal272=(Token)match(input,201,FOLLOW_201_in_block3815); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal272_tree = (CommonTree)adaptor.create(char_literal272);
					adaptor.addChild(root_0, char_literal272_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new block((a!=null?((csParser.statement_list_return)a).t:null));}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class statement_list_return extends ParserRuleReturnScope {
		public statement_list t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:404:1: statement_list returns [statement_list t] : (a= statement )+ ;
	public final csParser.statement_list_return statement_list() throws RecognitionException {
		csParser.statement_list_return retval = new csParser.statement_list_return();
		retval.start = input.LT(1);
		int statement_list_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		statement_list res=new statement_list();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:406:42: ( (a= statement )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:408:8: (a= statement )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:408:8: (a= statement )+
			int cnt100=0;
			loop100:
			while (true) {
				int alt100=2;
				int LA100_0 = input.LA(1);
				if ( (LA100_0==115) ) {
					int LA100_2 = input.LA(2);
					if ( (LA100_2==68) ) {
						alt100=1;
					}

				}
				else if ( (LA100_0==Character_literal||LA100_0==FALSE||(LA100_0 >= Hex_number && LA100_0 <= IF)||(LA100_0 >= MINUS && LA100_0 <= NUMBER)||LA100_0==Real_literal||(LA100_0 >= SEMI && LA100_0 <= STRINGLITERAL)||LA100_0==TRUE||(LA100_0 >= USING && LA100_0 <= Verbatim_string_literal)||LA100_0==61||LA100_0==66||(LA100_0 >= 68 && LA100_0 <= 69)||(LA100_0 >= 71 && LA100_0 <= 72)||LA100_0==75||LA100_0==95||(LA100_0 >= 97 && LA100_0 <= 98)||(LA100_0 >= 100 && LA100_0 <= 106)||(LA100_0 >= 109 && LA100_0 <= 110)||(LA100_0 >= 112 && LA100_0 <= 114)||(LA100_0 >= 116 && LA100_0 <= 120)||LA100_0==122||LA100_0==126||(LA100_0 >= 128 && LA100_0 <= 132)||(LA100_0 >= 134 && LA100_0 <= 135)||LA100_0==138||LA100_0==141||(LA100_0 >= 143 && LA100_0 <= 148)||(LA100_0 >= 150 && LA100_0 <= 152)||LA100_0==154||LA100_0==157||LA100_0==160||LA100_0==162||(LA100_0 >= 167 && LA100_0 <= 169)||(LA100_0 >= 171 && LA100_0 <= 174)||LA100_0==177||(LA100_0 >= 179 && LA100_0 <= 190)||LA100_0==192||(LA100_0 >= 194 && LA100_0 <= 197)||LA100_0==202) ) {
					alt100=1;
				}

				switch (alt100) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:408:10: a= statement
					{
					pushFollow(FOLLOW_statement_in_statement_list3853);
					a=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) { res.add((a!=null?((csParser.statement_return)a).t:null));}
					}
					break;

				default :
					if ( cnt100 >= 1 ) break loop100;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(100, input);
					throw eee;
				}
				cnt100++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t = res; retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, statement_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement_list"


	public static class expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:413:1: expression returns [expression t] : ( ( unary_expression assignment_operator )=>a= assignment |b= non_assignment_expression ) ;
	public final csParser.expression_return expression() throws RecognitionException {
		csParser.expression_return retval = new csParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:413:34: ( ( ( unary_expression assignment_operator )=>a= assignment |b= non_assignment_expression ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:414:9: ( ( unary_expression assignment_operator )=>a= assignment |b= non_assignment_expression )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:414:9: ( ( unary_expression assignment_operator )=>a= assignment |b= non_assignment_expression )
			int alt101=2;
			switch ( input.LA(1) ) {
			case 68:
				{
				int LA101_1 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 150:
				{
				int LA101_2 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 180:
				{
				int LA101_3 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA101_4 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 132:
				{
				int LA101_5 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 102:
				{
				int LA101_6 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 184:
				{
				int LA101_7 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case Real_literal:
				{
				int LA101_8 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA101_9 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case Hex_number:
				{
				int LA101_10 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case Character_literal:
				{
				int LA101_11 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case STRINGLITERAL:
				{
				int LA101_12 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case Verbatim_string_literal:
				{
				int LA101_13 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case TRUE:
				{
				int LA101_14 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case FALSE:
				{
				int LA101_15 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case NULL:
				{
				int LA101_16 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 174:
				{
				int LA101_17 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 110:
				{
				int LA101_18 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 187:
				{
				int LA101_19 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 115:
				{
				int LA101_20 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 116:
				{
				int LA101_21 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 71:
				{
				int LA101_22 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case MINUS:
				{
				int LA101_23 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 61:
				{
				int LA101_24 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 202:
				{
				int LA101_25 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 72:
				{
				int LA101_26 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 75:
				{
				int LA101_27 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 69:
				{
				int LA101_28 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case 66:
				{
				int LA101_29 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA101_30 = input.LA(2);
				if ( (synpred19_cs()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 101, 0, input);
				throw nvae;
			}
			switch (alt101) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:414:10: ( unary_expression assignment_operator )=>a= assignment
					{
					pushFollow(FOLLOW_assignment_in_expression3903);
					a=assignment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.assignment_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:415:11: b= non_assignment_expression
					{
					pushFollow(FOLLOW_non_assignment_expression_in_expression3927);
					b=non_assignment_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.non_assignment_expression_return)b).t:null);}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_list_return extends ParserRuleReturnScope {
		public expression_list t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:419:1: expression_list returns [expression_list t] : a= expression ( ',' expression )* ;
	public final csParser.expression_list_return expression_list() throws RecognitionException {
		csParser.expression_list_return retval = new csParser.expression_list_return();
		retval.start = input.LT(1);
		int expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal273=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope expression274 =null;

		CommonTree char_literal273_tree=null;

		expression_list res =new expression_list();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:421:39: (a= expression ( ',' expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:422:2: a= expression ( ',' expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expression_list3975);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.expression_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:422:32: ( ',' expression )*
			loop102:
			while (true) {
				int alt102=2;
				int LA102_0 = input.LA(1);
				if ( (LA102_0==74) ) {
					alt102=1;
				}

				switch (alt102) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:422:33: ',' expression
					{
					char_literal273=(Token)match(input,74,FOLLOW_74_in_expression_list3980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal273_tree = (CommonTree)adaptor.create(char_literal273);
					adaptor.addChild(root_0, char_literal273_tree);
					}

					pushFollow(FOLLOW_expression_in_expression_list3984);
					expression274=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression274.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.expression_return)a).t:null));}
					}
					break;

				default :
					break loop102;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class assignment_return extends ParserRuleReturnScope {
		public assignment t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "assignment"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:423:1: assignment returns [assignment t] : a= unary_expression b= assignment_operator c= expression ;
	public final csParser.assignment_return assignment() throws RecognitionException {
		csParser.assignment_return retval = new csParser.assignment_return();
		retval.start = input.LT(1);
		int assignment_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:424:32: (a= unary_expression b= assignment_operator c= expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:425:2: a= unary_expression b= assignment_operator c= expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_unary_expression_in_assignment4007);
			a=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_assignment_operator_in_assignment4013);
			b=assignment_operator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			pushFollow(FOLLOW_expression_in_assignment4019);
			c=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

			if ( state.backtracking==0 ) {retval.t = new assignment((a!=null?((csParser.unary_expression_return)a).t:null),(b!=null?((csParser.assignment_operator_return)b).t:null),(c!=null?((csParser.expression_return)c).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, assignment_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assignment"


	public static class unary_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unary_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:427:1: unary_expression returns [expression t] : ( ( cast_expression )=>b= cast_expression |c= primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
	public final csParser.unary_expression_return unary_expression() throws RecognitionException {
		csParser.unary_expression_return retval = new csParser.unary_expression_return();
		retval.start = input.LT(1);
		int unary_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal275=null;
		Token string_literal276=null;
		Token char_literal277=null;
		Token char_literal279=null;
		Token char_literal281=null;
		Token char_literal283=null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope unary_expression278 =null;
		ParserRuleReturnScope unary_expression280 =null;
		ParserRuleReturnScope unary_expression282 =null;
		ParserRuleReturnScope unary_expression284 =null;
		ParserRuleReturnScope pre_increment_expression285 =null;
		ParserRuleReturnScope pre_decrement_expression286 =null;
		ParserRuleReturnScope pointer_indirection_expression287 =null;
		ParserRuleReturnScope addressof_expression288 =null;

		CommonTree string_literal275_tree=null;
		CommonTree string_literal276_tree=null;
		CommonTree char_literal277_tree=null;
		CommonTree char_literal279_tree=null;
		CommonTree char_literal281_tree=null;
		CommonTree char_literal283_tree=null;

		expression res = null;boolean plus=false;boolean moins=false;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:429:88: ( ( cast_expression )=>b= cast_expression |c= primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
			int alt105=10;
			switch ( input.LA(1) ) {
			case 68:
				{
				int LA105_1 = input.LA(2);
				if ( (synpred20_cs()) ) {
					alt105=1;
				}
				else if ( (true) ) {
					alt105=2;
				}

				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt105=2;
				}
				break;
			case 71:
				{
				alt105=3;
				}
				break;
			case MINUS:
				{
				alt105=4;
				}
				break;
			case 61:
				{
				alt105=5;
				}
				break;
			case 202:
				{
				alt105=6;
				}
				break;
			case 72:
				{
				alt105=7;
				}
				break;
			case 75:
				{
				alt105=8;
				}
				break;
			case 69:
				{
				alt105=9;
				}
				break;
			case 66:
				{
				alt105=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}
			switch (alt105) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:431:2: ( cast_expression )=>b= cast_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_cast_expression_in_unary_expression4056);
					b=cast_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new unary_expression((b!=null?((csParser.cast_expression_return)b).t:null));}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:432:4: c= primary_or_array_creation_expression ( '++' )? ( '--' )?
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression4065);
					c=primary_or_array_creation_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:432:45: ( '++' )?
					int alt103=2;
					int LA103_0 = input.LA(1);
					if ( (LA103_0==72) ) {
						alt103=1;
					}
					switch (alt103) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:432:46: '++'
							{
							string_literal275=(Token)match(input,72,FOLLOW_72_in_unary_expression4070); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal275_tree = (CommonTree)adaptor.create(string_literal275);
							adaptor.addChild(root_0, string_literal275_tree);
							}

							if ( state.backtracking==0 ) {plus=true;}
							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:432:67: ( '--' )?
					int alt104=2;
					int LA104_0 = input.LA(1);
					if ( (LA104_0==75) ) {
						alt104=1;
					}
					switch (alt104) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:432:68: '--'
							{
							string_literal276=(Token)match(input,75,FOLLOW_75_in_unary_expression4078); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal276_tree = (CommonTree)adaptor.create(string_literal276);
							adaptor.addChild(root_0, string_literal276_tree);
							}

							if ( state.backtracking==0 ) {moins=true;}
							}
							break;

					}

					if ( state.backtracking==0 ) {res = new unary_expression((c!=null?((csParser.primary_or_array_creation_expression_return)c).t:null),plus,moins);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:433:4: '+' unary_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal277=(Token)match(input,71,FOLLOW_71_in_unary_expression4088); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal277_tree = (CommonTree)adaptor.create(char_literal277);
					adaptor.addChild(root_0, char_literal277_tree);
					}

					pushFollow(FOLLOW_unary_expression_in_unary_expression4092);
					unary_expression278=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression278.getTree());

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:434:4: '-' unary_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal279=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_expression4097); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal279_tree = (CommonTree)adaptor.create(char_literal279);
					adaptor.addChild(root_0, char_literal279_tree);
					}

					pushFollow(FOLLOW_unary_expression_in_unary_expression4101);
					unary_expression280=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression280.getTree());

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:435:4: '!' unary_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal281=(Token)match(input,61,FOLLOW_61_in_unary_expression4106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal281_tree = (CommonTree)adaptor.create(char_literal281);
					adaptor.addChild(root_0, char_literal281_tree);
					}

					pushFollow(FOLLOW_unary_expression_in_unary_expression4110);
					unary_expression282=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression282.getTree());

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:436:4: '~' unary_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal283=(Token)match(input,202,FOLLOW_202_in_unary_expression4115); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal283_tree = (CommonTree)adaptor.create(char_literal283);
					adaptor.addChild(root_0, char_literal283_tree);
					}

					pushFollow(FOLLOW_unary_expression_in_unary_expression4119);
					unary_expression284=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression284.getTree());

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:437:4: pre_increment_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pre_increment_expression_in_unary_expression4124);
					pre_increment_expression285=pre_increment_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_increment_expression285.getTree());

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:438:4: pre_decrement_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression4129);
					pre_decrement_expression286=pre_decrement_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_decrement_expression286.getTree());

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:439:4: pointer_indirection_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression4134);
					pointer_indirection_expression287=pointer_indirection_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_indirection_expression287.getTree());

					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:440:4: addressof_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_addressof_expression_in_unary_expression4139);
					addressof_expression288=addressof_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, addressof_expression288.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {if (res != null) retval.t =res; else retval.t =new UnknownNode(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, unary_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unary_expression"


	public static class cast_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cast_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:441:1: cast_expression returns [expression t] : '(' a= type ')' b= unary_expression ;
	public final csParser.cast_expression_return cast_expression() throws RecognitionException {
		csParser.cast_expression_return retval = new csParser.cast_expression_return();
		retval.start = input.LT(1);
		int cast_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal289=null;
		Token char_literal290=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree char_literal289_tree=null;
		CommonTree char_literal290_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:441:39: ( '(' a= type ')' b= unary_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:442:2: '(' a= type ')' b= unary_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal289=(Token)match(input,68,FOLLOW_68_in_cast_expression4151); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal289_tree = (CommonTree)adaptor.create(char_literal289);
			adaptor.addChild(root_0, char_literal289_tree);
			}

			pushFollow(FOLLOW_type_in_cast_expression4157);
			a=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal290=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression4161); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal290_tree = (CommonTree)adaptor.create(char_literal290);
			adaptor.addChild(root_0, char_literal290_tree);
			}

			pushFollow(FOLLOW_unary_expression_in_cast_expression4167);
			b=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t = new cast_expression((a!=null?((csParser.type_return)a).t:null),(b!=null?((csParser.unary_expression_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, cast_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "cast_expression"


	public static class assignment_operator_return extends ParserRuleReturnScope {
		public assignment_operator t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "assignment_operator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:443:1: assignment_operator returns [assignment_operator t] : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
	public final csParser.assignment_operator_return assignment_operator() throws RecognitionException {
		csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
		retval.start = input.LT(1);
		int assignment_operator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal291=null;
		Token string_literal292=null;
		Token string_literal293=null;
		Token string_literal294=null;
		Token string_literal295=null;
		Token string_literal296=null;
		Token string_literal297=null;
		Token string_literal298=null;
		Token string_literal299=null;
		Token string_literal300=null;
		Token char_literal301=null;
		Token string_literal302=null;

		CommonTree char_literal291_tree=null;
		CommonTree string_literal292_tree=null;
		CommonTree string_literal293_tree=null;
		CommonTree string_literal294_tree=null;
		CommonTree string_literal295_tree=null;
		CommonTree string_literal296_tree=null;
		CommonTree string_literal297_tree=null;
		CommonTree string_literal298_tree=null;
		CommonTree string_literal299_tree=null;
		CommonTree string_literal300_tree=null;
		CommonTree char_literal301_tree=null;
		CommonTree string_literal302_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:444:66: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
			int alt106=11;
			switch ( input.LA(1) ) {
			case 85:
				{
				alt106=1;
				}
				break;
			case 73:
				{
				alt106=2;
				}
				break;
			case 76:
				{
				alt106=3;
				}
				break;
			case 70:
				{
				alt106=4;
				}
				break;
			case 78:
				{
				alt106=5;
				}
				break;
			case 64:
				{
				alt106=6;
				}
				break;
			case 67:
				{
				alt106=7;
				}
				break;
			case 199:
				{
				alt106=8;
				}
				break;
			case 94:
				{
				alt106=9;
				}
				break;
			case 83:
				{
				alt106=10;
				}
				break;
			case GT:
				{
				alt106=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}
			switch (alt106) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:2: '='
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal291=(Token)match(input,85,FOLLOW_85_in_assignment_operator4187); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal291_tree = (CommonTree)adaptor.create(char_literal291);
					adaptor.addChild(root_0, char_literal291_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:8: '+='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal292=(Token)match(input,73,FOLLOW_73_in_assignment_operator4191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal292_tree = (CommonTree)adaptor.create(string_literal292);
					adaptor.addChild(root_0, string_literal292_tree);
					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:15: '-='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal293=(Token)match(input,76,FOLLOW_76_in_assignment_operator4195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal293_tree = (CommonTree)adaptor.create(string_literal293);
					adaptor.addChild(root_0, string_literal293_tree);
					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:22: '*='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal294=(Token)match(input,70,FOLLOW_70_in_assignment_operator4199); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal294_tree = (CommonTree)adaptor.create(string_literal294);
					adaptor.addChild(root_0, string_literal294_tree);
					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:29: '/='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal295=(Token)match(input,78,FOLLOW_78_in_assignment_operator4203); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal295_tree = (CommonTree)adaptor.create(string_literal295);
					adaptor.addChild(root_0, string_literal295_tree);
					}

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:36: '%='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal296=(Token)match(input,64,FOLLOW_64_in_assignment_operator4207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal296_tree = (CommonTree)adaptor.create(string_literal296);
					adaptor.addChild(root_0, string_literal296_tree);
					}

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:43: '&='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal297=(Token)match(input,67,FOLLOW_67_in_assignment_operator4211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal297_tree = (CommonTree)adaptor.create(string_literal297);
					adaptor.addChild(root_0, string_literal297_tree);
					}

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:50: '|='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal298=(Token)match(input,199,FOLLOW_199_in_assignment_operator4215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal298_tree = (CommonTree)adaptor.create(string_literal298);
					adaptor.addChild(root_0, string_literal298_tree);
					}

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:57: '^='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal299=(Token)match(input,94,FOLLOW_94_in_assignment_operator4219); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal299_tree = (CommonTree)adaptor.create(string_literal299);
					adaptor.addChild(root_0, string_literal299_tree);
					}

					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:64: '<<='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal300=(Token)match(input,83,FOLLOW_83_in_assignment_operator4223); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal300_tree = (CommonTree)adaptor.create(string_literal300);
					adaptor.addChild(root_0, string_literal300_tree);
					}

					}
					break;
				case 11 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:445:72: '>' '>='
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal301=(Token)match(input,GT,FOLLOW_GT_in_assignment_operator4227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal301_tree = (CommonTree)adaptor.create(char_literal301);
					adaptor.addChild(root_0, char_literal301_tree);
					}

					string_literal302=(Token)match(input,88,FOLLOW_88_in_assignment_operator4229); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal302_tree = (CommonTree)adaptor.create(string_literal302);
					adaptor.addChild(root_0, string_literal302_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new assignment_operator(retval.tree);retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, assignment_operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assignment_operator"


	public static class pre_increment_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pre_increment_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:446:1: pre_increment_expression : '++' unary_expression ;
	public final csParser.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
		csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
		retval.start = input.LT(1);
		int pre_increment_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal303=null;
		ParserRuleReturnScope unary_expression304 =null;

		CommonTree string_literal303_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:446:25: ( '++' unary_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:447:2: '++' unary_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal303=(Token)match(input,72,FOLLOW_72_in_pre_increment_expression4238); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal303_tree = (CommonTree)adaptor.create(string_literal303);
			adaptor.addChild(root_0, string_literal303_tree);
			}

			pushFollow(FOLLOW_unary_expression_in_pre_increment_expression4242);
			unary_expression304=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression304.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, pre_increment_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pre_increment_expression"


	public static class pre_decrement_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pre_decrement_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:448:1: pre_decrement_expression : '--' unary_expression ;
	public final csParser.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
		csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
		retval.start = input.LT(1);
		int pre_decrement_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal305=null;
		ParserRuleReturnScope unary_expression306 =null;

		CommonTree string_literal305_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:448:25: ( '--' unary_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:449:2: '--' unary_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal305=(Token)match(input,75,FOLLOW_75_in_pre_decrement_expression4251); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal305_tree = (CommonTree)adaptor.create(string_literal305);
			adaptor.addChild(root_0, string_literal305_tree);
			}

			pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression4255);
			unary_expression306=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression306.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, pre_decrement_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pre_decrement_expression"


	public static class pointer_indirection_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pointer_indirection_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:450:1: pointer_indirection_expression : '*' unary_expression ;
	public final csParser.pointer_indirection_expression_return pointer_indirection_expression() throws RecognitionException {
		csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
		retval.start = input.LT(1);
		int pointer_indirection_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal307=null;
		ParserRuleReturnScope unary_expression308 =null;

		CommonTree char_literal307_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:450:31: ( '*' unary_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:451:2: '*' unary_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal307=(Token)match(input,69,FOLLOW_69_in_pointer_indirection_expression4263); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal307_tree = (CommonTree)adaptor.create(char_literal307);
			adaptor.addChild(root_0, char_literal307_tree);
			}

			pushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression4267);
			unary_expression308=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression308.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, pointer_indirection_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointer_indirection_expression"


	public static class addressof_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "addressof_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:452:1: addressof_expression : '&' unary_expression ;
	public final csParser.addressof_expression_return addressof_expression() throws RecognitionException {
		csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
		retval.start = input.LT(1);
		int addressof_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal309=null;
		ParserRuleReturnScope unary_expression310 =null;

		CommonTree char_literal309_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:452:21: ( '&' unary_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:453:2: '&' unary_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal309=(Token)match(input,66,FOLLOW_66_in_addressof_expression4275); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal309_tree = (CommonTree)adaptor.create(char_literal309);
			adaptor.addChild(root_0, char_literal309_tree);
			}

			pushFollow(FOLLOW_unary_expression_in_addressof_expression4279);
			unary_expression310=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression310.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, addressof_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "addressof_expression"


	public static class non_assignment_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "non_assignment_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:455:1: non_assignment_expression returns [expression t] : ( ( anonymous_function_signature '=>' )=>a= lambda_expression | ( query_expression )=>b= query_expression |c= conditional_expression );
	public final csParser.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
		csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
		retval.start = input.LT(1);
		int non_assignment_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:455:49: ( ( anonymous_function_signature '=>' )=>a= lambda_expression | ( query_expression )=>b= query_expression |c= conditional_expression )
			int alt107=3;
			switch ( input.LA(1) ) {
			case 68:
				{
				int LA107_1 = input.LA(2);
				if ( (synpred21_cs()) ) {
					alt107=1;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case 132:
				{
				int LA107_2 = input.LA(2);
				if ( (synpred21_cs()) ) {
					alt107=1;
				}
				else if ( (synpred22_cs()) ) {
					alt107=2;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA107_3 = input.LA(2);
				if ( (synpred21_cs()) ) {
					alt107=1;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt107=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}
			switch (alt107) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:457:2: ( anonymous_function_signature '=>' )=>a= lambda_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression4306);
					a=lambda_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.lambda_expression_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:458:4: ( query_expression )=>b= query_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_query_expression_in_non_assignment_expression4321);
					b=query_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.query_expression_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:459:4: c= conditional_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression4330);
					c=conditional_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.conditional_expression_return)c).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, non_assignment_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "non_assignment_expression"


	public static class multiplicative_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "multiplicative_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:466:1: multiplicative_expression returns [expression t] : a= unary_expression ( (o= '*' |o= '/' |o= '%' ) b= unary_expression )* ;
	public final csParser.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
		csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
		retval.start = input.LT(1);
		int multiplicative_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:468:39: (a= unary_expression ( (o= '*' |o= '/' |o= '%' ) b= unary_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:2: a= unary_expression ( (o= '*' |o= '/' |o= '%' ) b= unary_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_unary_expression_in_multiplicative_expression4365);
			a=unary_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.unary_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:36: ( (o= '*' |o= '/' |o= '%' ) b= unary_expression )*
			loop109:
			while (true) {
				int alt109=2;
				int LA109_0 = input.LA(1);
				if ( (LA109_0==63||LA109_0==69||LA109_0==77) ) {
					alt109=1;
				}

				switch (alt109) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:39: (o= '*' |o= '/' |o= '%' ) b= unary_expression
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:39: (o= '*' |o= '/' |o= '%' )
					int alt108=3;
					switch ( input.LA(1) ) {
					case 69:
						{
						alt108=1;
						}
						break;
					case 77:
						{
						alt108=2;
						}
						break;
					case 63:
						{
						alt108=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 108, 0, input);
						throw nvae;
					}
					switch (alt108) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:40: o= '*'
							{
							o=(Token)match(input,69,FOLLOW_69_in_multiplicative_expression4376); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:46: o= '/'
							{
							o=(Token)match(input,77,FOLLOW_77_in_multiplicative_expression4380); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:469:52: o= '%'
							{
							o=(Token)match(input,63,FOLLOW_63_in_multiplicative_expression4384); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_unary_expression_in_multiplicative_expression4391);
					b=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.unary_expression_return)b).t:null));}
					}
					break;

				default :
					break loop109;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, multiplicative_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "multiplicative_expression"


	public static class additive_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "additive_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:470:1: additive_expression returns [expression t] : a= multiplicative_expression ( (o= '+' |o= '-' ) b= multiplicative_expression )* ;
	public final csParser.additive_expression_return additive_expression() throws RecognitionException {
		csParser.additive_expression_return retval = new csParser.additive_expression_return();
		retval.start = input.LT(1);
		int additive_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:472:39: (a= multiplicative_expression ( (o= '+' |o= '-' ) b= multiplicative_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:2: a= multiplicative_expression ( (o= '+' |o= '-' ) b= multiplicative_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_multiplicative_expression_in_additive_expression4422);
			a=multiplicative_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.multiplicative_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:45: ( (o= '+' |o= '-' ) b= multiplicative_expression )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==MINUS||LA111_0==71) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:46: (o= '+' |o= '-' ) b= multiplicative_expression
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:46: (o= '+' |o= '-' )
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==71) ) {
						alt110=1;
					}
					else if ( (LA110_0==MINUS) ) {
						alt110=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 110, 0, input);
						throw nvae;
					}

					switch (alt110) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:47: o= '+'
							{
							o=(Token)match(input,71,FOLLOW_71_in_additive_expression4431); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:473:53: o= '-'
							{
							o=(Token)match(input,MINUS,FOLLOW_MINUS_in_additive_expression4435); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_multiplicative_expression_in_additive_expression4442);
					b=multiplicative_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.multiplicative_expression_return)b).t:null));}
					}
					break;

				default :
					break loop111;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, additive_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "additive_expression"


	public static class shift_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "shift_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:475:1: shift_expression returns [expression t] : a= additive_expression ( (o= '<<' |o= '>' '>' ) b= additive_expression )* ;
	public final csParser.shift_expression_return shift_expression() throws RecognitionException {
		csParser.shift_expression_return retval = new csParser.shift_expression_return();
		retval.start = input.LT(1);
		int shift_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		Token char_literal311=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;
		CommonTree char_literal311_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:477:39: (a= additive_expression ( (o= '<<' |o= '>' '>' ) b= additive_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:2: a= additive_expression ( (o= '<<' |o= '>' '>' ) b= additive_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_additive_expression_in_shift_expression4474);
			a=additive_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.additive_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:39: ( (o= '<<' |o= '>' '>' ) b= additive_expression )*
			loop113:
			while (true) {
				int alt113=2;
				int LA113_0 = input.LA(1);
				if ( (LA113_0==GT) ) {
					int LA113_2 = input.LA(2);
					if ( (LA113_2==GT) ) {
						alt113=1;
					}

				}
				else if ( (LA113_0==82) ) {
					alt113=1;
				}

				switch (alt113) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:40: (o= '<<' |o= '>' '>' ) b= additive_expression
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:40: (o= '<<' |o= '>' '>' )
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==82) ) {
						alt112=1;
					}
					else if ( (LA112_0==GT) ) {
						alt112=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 112, 0, input);
						throw nvae;
					}

					switch (alt112) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:41: o= '<<'
							{
							o=(Token)match(input,82,FOLLOW_82_in_shift_expression4483); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:478:48: o= '>' '>'
							{
							o=(Token)match(input,GT,FOLLOW_GT_in_shift_expression4487); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							char_literal311=(Token)match(input,GT,FOLLOW_GT_in_shift_expression4489); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal311_tree = (CommonTree)adaptor.create(char_literal311);
							adaptor.addChild(root_0, char_literal311_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_additive_expression_in_shift_expression4494);
					b=additive_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.additive_expression_return)b).t:null));}
					}
					break;

				default :
					break loop113;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, shift_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "shift_expression"


	public static class relational_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "relational_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:479:1: relational_expression returns [expression t] : a= shift_expression ( ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression ) | ( (o= 'is' |o= 'as' ) c= non_nullable_type ) )* ;
	public final csParser.relational_expression_return relational_expression() throws RecognitionException {
		csParser.relational_expression_return retval = new csParser.relational_expression_return();
		retval.start = input.LT(1);
		int relational_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:481:39: (a= shift_expression ( ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression ) | ( (o= 'is' |o= 'as' ) c= non_nullable_type ) )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:482:2: a= shift_expression ( ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression ) | ( (o= 'is' |o= 'as' ) c= non_nullable_type ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_shift_expression_in_relational_expression4525);
			a=shift_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.shift_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:3: ( ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression ) | ( (o= 'is' |o= 'as' ) c= non_nullable_type ) )*
			loop116:
			while (true) {
				int alt116=3;
				int LA116_0 = input.LA(1);
				if ( (LA116_0==GT||LA116_0==81||LA116_0==84||LA116_0==88) ) {
					alt116=1;
				}
				else if ( (LA116_0==99||LA116_0==142) ) {
					alt116=2;
				}

				switch (alt116) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:5: ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:5: ( (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:6: (o= '<' |o= '>' |o= '>=' |o= '<=' ) b= shift_expression
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:6: (o= '<' |o= '>' |o= '>=' |o= '<=' )
					int alt114=4;
					switch ( input.LA(1) ) {
					case 81:
						{
						alt114=1;
						}
						break;
					case GT:
						{
						alt114=2;
						}
						break;
					case 88:
						{
						alt114=3;
						}
						break;
					case 84:
						{
						alt114=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 114, 0, input);
						throw nvae;
					}
					switch (alt114) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:7: o= '<'
							{
							o=(Token)match(input,81,FOLLOW_81_in_relational_expression4538); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:13: o= '>'
							{
							o=(Token)match(input,GT,FOLLOW_GT_in_relational_expression4542); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:19: o= '>='
							{
							o=(Token)match(input,88,FOLLOW_88_in_relational_expression4546); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:483:26: o= '<='
							{
							o=(Token)match(input,84,FOLLOW_84_in_relational_expression4550); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_shift_expression_in_relational_expression4555);
					b=shift_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.shift_expression_return)b).t:null));}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:6: ( (o= 'is' |o= 'as' ) c= non_nullable_type )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:6: ( (o= 'is' |o= 'as' ) c= non_nullable_type )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:7: (o= 'is' |o= 'as' ) c= non_nullable_type
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:7: (o= 'is' |o= 'as' )
					int alt115=2;
					int LA115_0 = input.LA(1);
					if ( (LA115_0==142) ) {
						alt115=1;
					}
					else if ( (LA115_0==99) ) {
						alt115=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 115, 0, input);
						throw nvae;
					}

					switch (alt115) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:8: o= 'is'
							{
							o=(Token)match(input,142,FOLLOW_142_in_relational_expression4569); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:484:15: o= 'as'
							{
							o=(Token)match(input,99,FOLLOW_99_in_relational_expression4573); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_non_nullable_type_in_relational_expression4581);
					c=non_nullable_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(c!=null?((csParser.non_nullable_type_return)c).t:null));}
					}
					break;

				default :
					break loop116;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, relational_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relational_expression"


	public static class equality_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "equality_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:487:1: equality_expression returns [expression t] : a= relational_expression ( (o= '==' |o= '!=' ) b= relational_expression )* ;
	public final csParser.equality_expression_return equality_expression() throws RecognitionException {
		csParser.equality_expression_return retval = new csParser.equality_expression_return();
		retval.start = input.LT(1);
		int equality_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:489:39: (a= relational_expression ( (o= '==' |o= '!=' ) b= relational_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:491:2: a= relational_expression ( (o= '==' |o= '!=' ) b= relational_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_relational_expression_in_equality_expression4620);
			a=relational_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.relational_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:492:5: ( (o= '==' |o= '!=' ) b= relational_expression )*
			loop118:
			while (true) {
				int alt118=2;
				int LA118_0 = input.LA(1);
				if ( (LA118_0==62||LA118_0==86) ) {
					alt118=1;
				}

				switch (alt118) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:492:6: (o= '==' |o= '!=' ) b= relational_expression
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:492:6: (o= '==' |o= '!=' )
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==86) ) {
						alt117=1;
					}
					else if ( (LA117_0==62) ) {
						alt117=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 117, 0, input);
						throw nvae;
					}

					switch (alt117) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:492:7: o= '=='
							{
							o=(Token)match(input,86,FOLLOW_86_in_equality_expression4632); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:492:14: o= '!='
							{
							o=(Token)match(input,62,FOLLOW_62_in_equality_expression4636); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							o_tree = (CommonTree)adaptor.create(o);
							adaptor.addChild(root_0, o_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_relational_expression_in_equality_expression4643);
					b=relational_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.relational_expression_return)b).t:null));}
					}
					break;

				default :
					break loop118;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, equality_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "equality_expression"


	public static class and_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "and_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:493:1: and_expression returns [expression t] : a= equality_expression (o= '&' b= equality_expression )* ;
	public final csParser.and_expression_return and_expression() throws RecognitionException {
		csParser.and_expression_return retval = new csParser.and_expression_return();
		retval.start = input.LT(1);
		int and_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:495:39: (a= equality_expression (o= '&' b= equality_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:496:2: a= equality_expression (o= '&' b= equality_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_equality_expression_in_and_expression4674);
			a=equality_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.equality_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:496:38: (o= '&' b= equality_expression )*
			loop119:
			while (true) {
				int alt119=2;
				int LA119_0 = input.LA(1);
				if ( (LA119_0==66) ) {
					alt119=1;
				}

				switch (alt119) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:496:39: o= '&' b= equality_expression
					{
					o=(Token)match(input,66,FOLLOW_66_in_and_expression4681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_equality_expression_in_and_expression4688);
					b=equality_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.equality_expression_return)b).t:null));}
					}
					break;

				default :
					break loop119;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, and_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "and_expression"


	public static class exclusive_or_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exclusive_or_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:497:1: exclusive_or_expression returns [expression t] : a= and_expression (o= '^' b= and_expression )* ;
	public final csParser.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
		csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
		retval.start = input.LT(1);
		int exclusive_or_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:499:39: (a= and_expression (o= '^' b= and_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:500:2: a= and_expression (o= '^' b= and_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_and_expression_in_exclusive_or_expression4719);
			a=and_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.and_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:500:33: (o= '^' b= and_expression )*
			loop120:
			while (true) {
				int alt120=2;
				int LA120_0 = input.LA(1);
				if ( (LA120_0==93) ) {
					alt120=1;
				}

				switch (alt120) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:500:34: o= '^' b= and_expression
					{
					o=(Token)match(input,93,FOLLOW_93_in_exclusive_or_expression4726); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_and_expression_in_exclusive_or_expression4733);
					b=and_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.and_expression_return)b).t:null));}
					}
					break;

				default :
					break loop120;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, exclusive_or_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exclusive_or_expression"


	public static class inclusive_or_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "inclusive_or_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:501:1: inclusive_or_expression returns [expression t] : a= exclusive_or_expression (o= '|' b= exclusive_or_expression )* ;
	public final csParser.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
		csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
		retval.start = input.LT(1);
		int inclusive_or_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:503:39: (a= exclusive_or_expression (o= '|' b= exclusive_or_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:504:2: a= exclusive_or_expression (o= '|' b= exclusive_or_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression4764);
			a=exclusive_or_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.exclusive_or_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:504:44: (o= '|' b= exclusive_or_expression )*
			loop121:
			while (true) {
				int alt121=2;
				int LA121_0 = input.LA(1);
				if ( (LA121_0==198) ) {
					alt121=1;
				}

				switch (alt121) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:504:45: o= '|' b= exclusive_or_expression
					{
					o=(Token)match(input,198,FOLLOW_198_in_inclusive_or_expression4773); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression4780);
					b=exclusive_or_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.exclusive_or_expression_return)b).t:null));}
					}
					break;

				default :
					break loop121;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, inclusive_or_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inclusive_or_expression"


	public static class conditional_and_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "conditional_and_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:505:1: conditional_and_expression returns [expression t] : a= inclusive_or_expression (o= '&&' b= inclusive_or_expression )* ;
	public final csParser.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
		csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
		retval.start = input.LT(1);
		int conditional_and_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:507:39: (a= inclusive_or_expression (o= '&&' b= inclusive_or_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:508:2: a= inclusive_or_expression (o= '&&' b= inclusive_or_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression4810);
			a=inclusive_or_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.inclusive_or_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:508:43: (o= '&&' b= inclusive_or_expression )*
			loop122:
			while (true) {
				int alt122=2;
				int LA122_0 = input.LA(1);
				if ( (LA122_0==65) ) {
					alt122=1;
				}

				switch (alt122) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:508:44: o= '&&' b= inclusive_or_expression
					{
					o=(Token)match(input,65,FOLLOW_65_in_conditional_and_expression4818); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression4825);
					b=inclusive_or_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.inclusive_or_expression_return)b).t:null));}
					}
					break;

				default :
					break loop122;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, conditional_and_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "conditional_and_expression"


	public static class conditional_or_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "conditional_or_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:509:1: conditional_or_expression returns [expression t] : a= conditional_and_expression (o= '||' b= conditional_and_expression )* ;
	public final csParser.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
		csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
		retval.start = input.LT(1);
		int conditional_or_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:511:39: (a= conditional_and_expression (o= '||' b= conditional_and_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:512:2: a= conditional_and_expression (o= '||' b= conditional_and_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression4856);
			a=conditional_and_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.conditional_and_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:512:45: (o= '||' b= conditional_and_expression )*
			loop123:
			while (true) {
				int alt123=2;
				int LA123_0 = input.LA(1);
				if ( (LA123_0==200) ) {
					alt123=1;
				}

				switch (alt123) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:512:46: o= '||' b= conditional_and_expression
					{
					o=(Token)match(input,200,FOLLOW_200_in_conditional_or_expression4863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression4870);
					b=conditional_and_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.conditional_and_expression_return)b).t:null));}
					}
					break;

				default :
					break loop123;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, conditional_or_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "conditional_or_expression"


	public static class null_coalescing_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "null_coalescing_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:514:1: null_coalescing_expression returns [expression t] : a= conditional_or_expression (o= '??' b= conditional_or_expression )* ;
	public final csParser.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
		csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
		retval.start = input.LT(1);
		int null_coalescing_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token o=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree o_tree=null;

		expression res = null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:516:39: (a= conditional_or_expression (o= '??' b= conditional_or_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:517:2: a= conditional_or_expression (o= '??' b= conditional_or_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression4901);
			a=conditional_or_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res = (a!=null?((csParser.conditional_or_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:517:45: (o= '??' b= conditional_or_expression )*
			loop124:
			while (true) {
				int alt124=2;
				int LA124_0 = input.LA(1);
				if ( (LA124_0==90) ) {
					alt124=1;
				}

				switch (alt124) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:517:46: o= '??' b= conditional_or_expression
					{
					o=(Token)match(input,90,FOLLOW_90_in_null_coalescing_expression4909); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					o_tree = (CommonTree)adaptor.create(o);
					adaptor.addChild(root_0, o_tree);
					}

					pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression4915);
					b=conditional_or_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {res = new na_expression(res,new operator((o!=null?o.getText():null)),(b!=null?((csParser.conditional_or_expression_return)b).t:null));}
					}
					break;

				default :
					break loop124;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, null_coalescing_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "null_coalescing_expression"


	public static class conditional_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "conditional_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:518:1: conditional_expression returns [expression t] : a= null_coalescing_expression ( '?' b= expression ':' c= expression )? ;
	public final csParser.conditional_expression_return conditional_expression() throws RecognitionException {
		csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
		retval.start = input.LT(1);
		int conditional_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal312=null;
		Token char_literal313=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree char_literal312_tree=null;
		CommonTree char_literal313_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:519:32: (a= null_coalescing_expression ( '?' b= expression ':' c= expression )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:520:2: a= null_coalescing_expression ( '?' b= expression ':' c= expression )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression4941);
			a=null_coalescing_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.null_coalescing_expression_return)a).t:null);}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:520:45: ( '?' b= expression ':' c= expression )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==89) ) {
				alt125=1;
			}
			switch (alt125) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:520:46: '?' b= expression ':' c= expression
					{
					char_literal312=(Token)match(input,89,FOLLOW_89_in_conditional_expression4947); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal312_tree = (CommonTree)adaptor.create(char_literal312);
					adaptor.addChild(root_0, char_literal312_tree);
					}

					pushFollow(FOLLOW_expression_in_conditional_expression4953);
					b=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					char_literal313=(Token)match(input,79,FOLLOW_79_in_conditional_expression4957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal313_tree = (CommonTree)adaptor.create(char_literal313);
					adaptor.addChild(root_0, char_literal313_tree);
					}

					pushFollow(FOLLOW_expression_in_conditional_expression4963);
					c=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t = new conditional_expression((a!=null?((csParser.null_coalescing_expression_return)a).t:null),(b!=null?((csParser.expression_return)b).t:null),(c!=null?((csParser.expression_return)c).t:null));}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, conditional_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "conditional_expression"


	public static class lambda_expression_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lambda_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:525:1: lambda_expression returns [UnknownNode t] : anonymous_function_signature '=>' anonymous_function_body ;
	public final csParser.lambda_expression_return lambda_expression() throws RecognitionException {
		csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
		retval.start = input.LT(1);
		int lambda_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal315=null;
		ParserRuleReturnScope anonymous_function_signature314 =null;
		ParserRuleReturnScope anonymous_function_body316 =null;

		CommonTree string_literal315_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:526:37: ( anonymous_function_signature '=>' anonymous_function_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:527:2: anonymous_function_signature '=>' anonymous_function_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression4996);
			anonymous_function_signature314=anonymous_function_signature();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_signature314.getTree());

			string_literal315=(Token)match(input,87,FOLLOW_87_in_lambda_expression5000); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal315_tree = (CommonTree)adaptor.create(string_literal315);
			adaptor.addChild(root_0, string_literal315_tree);
			}

			pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression5004);
			anonymous_function_body316=anonymous_function_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_body316.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, lambda_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "lambda_expression"


	public static class anonymous_function_signature_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_function_signature"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:528:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
	public final csParser.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
		csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
		retval.start = input.LT(1);
		int anonymous_function_signature_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal317=null;
		Token char_literal320=null;
		ParserRuleReturnScope explicit_anonymous_function_parameter_list318 =null;
		ParserRuleReturnScope implicit_anonymous_function_parameter_list319 =null;
		ParserRuleReturnScope implicit_anonymous_function_parameter_list321 =null;

		CommonTree char_literal317_tree=null;
		CommonTree char_literal320_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:528:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==68) ) {
				alt127=1;
			}
			else if ( (LA127_0==IDENTIFIER||LA127_0==95||(LA127_0 >= 97 && LA127_0 <= 98)||(LA127_0 >= 100 && LA127_0 <= 101)||LA127_0==105||LA127_0==117||LA127_0==120||LA127_0==122||LA127_0==126||LA127_0==132||LA127_0==135||LA127_0==141||(LA127_0 >= 143 && LA127_0 <= 144)||(LA127_0 >= 147 && LA127_0 <= 148)||LA127_0==152||LA127_0==154||LA127_0==157||LA127_0==160||LA127_0==162||LA127_0==167||(LA127_0 >= 171 && LA127_0 <= 172)||LA127_0==183||LA127_0==190||LA127_0==194||LA127_0==196) ) {
				alt127=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}

			switch (alt127) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:529:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal317=(Token)match(input,68,FOLLOW_68_in_anonymous_function_signature5011); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal317_tree = (CommonTree)adaptor.create(char_literal317);
					adaptor.addChild(root_0, char_literal317_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:529:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
					int alt126=3;
					int LA126_0 = input.LA(1);
					if ( (LA126_0==103||LA126_0==106||LA126_0==109||LA126_0==114||LA126_0==119||LA126_0==129||LA126_0==138||LA126_0==146||LA126_0==151||LA126_0==155||LA126_0==166||LA126_0==169||LA126_0==173||LA126_0==177||(LA126_0 >= 185 && LA126_0 <= 186)||LA126_0==189||LA126_0==192) ) {
						alt126=1;
					}
					else if ( (LA126_0==IDENTIFIER||LA126_0==95||(LA126_0 >= 97 && LA126_0 <= 98)||(LA126_0 >= 100 && LA126_0 <= 101)||LA126_0==105||LA126_0==117||LA126_0==120||LA126_0==122||LA126_0==126||LA126_0==132||LA126_0==135||LA126_0==141||(LA126_0 >= 143 && LA126_0 <= 144)||(LA126_0 >= 147 && LA126_0 <= 148)||LA126_0==152||LA126_0==154||LA126_0==157||LA126_0==160||LA126_0==162||LA126_0==167||(LA126_0 >= 171 && LA126_0 <= 172)||LA126_0==183||LA126_0==190||LA126_0==194||LA126_0==196) ) {
						int LA126_2 = input.LA(2);
						if ( (LA126_2==DOT||LA126_2==IDENTIFIER||LA126_2==69||(LA126_2 >= 80 && LA126_2 <= 81)||LA126_2==89||LA126_2==91||LA126_2==95||(LA126_2 >= 97 && LA126_2 <= 98)||(LA126_2 >= 100 && LA126_2 <= 101)||LA126_2==105||LA126_2==117||LA126_2==120||LA126_2==122||LA126_2==126||LA126_2==132||LA126_2==135||LA126_2==141||(LA126_2 >= 143 && LA126_2 <= 144)||(LA126_2 >= 147 && LA126_2 <= 148)||LA126_2==152||LA126_2==154||LA126_2==157||LA126_2==160||LA126_2==162||LA126_2==167||(LA126_2 >= 171 && LA126_2 <= 172)||LA126_2==183||LA126_2==190||LA126_2==194||LA126_2==196) ) {
							alt126=1;
						}
						else if ( (LA126_2==RPAREN||LA126_2==74) ) {
							alt126=2;
						}
					}
					switch (alt126) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:529:7: explicit_anonymous_function_parameter_list
							{
							pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature5014);
							explicit_anonymous_function_parameter_list318=explicit_anonymous_function_parameter_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list318.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:530:5: implicit_anonymous_function_parameter_list
							{
							pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5020);
							implicit_anonymous_function_parameter_list319=implicit_anonymous_function_parameter_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list319.getTree());

							}
							break;

					}

					char_literal320=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_anonymous_function_signature5024); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal320_tree = (CommonTree)adaptor.create(char_literal320);
					adaptor.addChild(root_0, char_literal320_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:531:4: implicit_anonymous_function_parameter_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5029);
					implicit_anonymous_function_parameter_list321=implicit_anonymous_function_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list321.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, anonymous_function_signature_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_function_signature"


	public static class implicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "implicit_anonymous_function_parameter_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:533:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
	public final csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
		csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
		retval.start = input.LT(1);
		int implicit_anonymous_function_parameter_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal323=null;
		ParserRuleReturnScope implicit_anonymous_function_parameter322 =null;
		ParserRuleReturnScope implicit_anonymous_function_parameter324 =null;

		CommonTree char_literal323_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:533:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:534:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5038);
			implicit_anonymous_function_parameter322=implicit_anonymous_function_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter322.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:534:42: ( ',' implicit_anonymous_function_parameter )*
			loop128:
			while (true) {
				int alt128=2;
				int LA128_0 = input.LA(1);
				if ( (LA128_0==74) ) {
					alt128=1;
				}

				switch (alt128) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:534:43: ',' implicit_anonymous_function_parameter
					{
					char_literal323=(Token)match(input,74,FOLLOW_74_in_implicit_anonymous_function_parameter_list5043); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal323_tree = (CommonTree)adaptor.create(char_literal323);
					adaptor.addChild(root_0, char_literal323_tree);
					}

					pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5047);
					implicit_anonymous_function_parameter324=implicit_anonymous_function_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter324.getTree());

					}
					break;

				default :
					break loop128;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "implicit_anonymous_function_parameter_list"


	public static class implicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "implicit_anonymous_function_parameter"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:535:1: implicit_anonymous_function_parameter : identifier ;
	public final csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
		csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
		retval.start = input.LT(1);
		int implicit_anonymous_function_parameter_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope identifier325 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:535:38: ( identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:536:2: identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter5057);
			identifier325=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier325.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "implicit_anonymous_function_parameter"


	public static class anonymous_function_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "anonymous_function_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:537:1: anonymous_function_body : ( expression | block );
	public final csParser.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
		csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
		retval.start = input.LT(1);
		int anonymous_function_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression326 =null;
		ParserRuleReturnScope block327 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:537:24: ( expression | block )
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==Character_literal||LA129_0==FALSE||(LA129_0 >= Hex_number && LA129_0 <= IDENTIFIER)||(LA129_0 >= MINUS && LA129_0 <= NUMBER)||LA129_0==Real_literal||LA129_0==STRINGLITERAL||LA129_0==TRUE||LA129_0==Verbatim_string_literal||LA129_0==61||LA129_0==66||(LA129_0 >= 68 && LA129_0 <= 69)||(LA129_0 >= 71 && LA129_0 <= 72)||LA129_0==75||LA129_0==95||(LA129_0 >= 97 && LA129_0 <= 98)||(LA129_0 >= 100 && LA129_0 <= 103)||(LA129_0 >= 105 && LA129_0 <= 106)||(LA129_0 >= 109 && LA129_0 <= 110)||(LA129_0 >= 114 && LA129_0 <= 117)||(LA129_0 >= 119 && LA129_0 <= 120)||LA129_0==122||LA129_0==126||LA129_0==129||LA129_0==132||LA129_0==135||LA129_0==138||LA129_0==141||(LA129_0 >= 143 && LA129_0 <= 144)||(LA129_0 >= 146 && LA129_0 <= 148)||(LA129_0 >= 150 && LA129_0 <= 152)||LA129_0==154||LA129_0==157||LA129_0==160||LA129_0==162||LA129_0==167||LA129_0==169||(LA129_0 >= 171 && LA129_0 <= 174)||LA129_0==177||LA129_0==180||(LA129_0 >= 183 && LA129_0 <= 187)||(LA129_0 >= 189 && LA129_0 <= 190)||LA129_0==194||LA129_0==196||LA129_0==202) ) {
				alt129=1;
			}
			else if ( (LA129_0==SEMI||LA129_0==197) ) {
				alt129=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 129, 0, input);
				throw nvae;
			}

			switch (alt129) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:538:2: expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_anonymous_function_body5064);
					expression326=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression326.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:539:4: block
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_block_in_anonymous_function_body5069);
					block327=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block327.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, anonymous_function_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymous_function_body"


	public static class query_expression_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:544:1: query_expression returns [UnknownNode t] : from_clause query_body ;
	public final csParser.query_expression_return query_expression() throws RecognitionException {
		csParser.query_expression_return retval = new csParser.query_expression_return();
		retval.start = input.LT(1);
		int query_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope from_clause328 =null;
		ParserRuleReturnScope query_body329 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:545:37: ( from_clause query_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:546:2: from_clause query_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_from_clause_in_query_expression5091);
			from_clause328=from_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause328.getTree());

			pushFollow(FOLLOW_query_body_in_query_expression5095);
			query_body329=query_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body329.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, query_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query_expression"


	public static class query_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:547:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
	public final csParser.query_body_return query_body() throws RecognitionException {
		csParser.query_body_return retval = new csParser.query_body_return();
		retval.start = input.LT(1);
		int query_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope query_body_clauses330 =null;
		ParserRuleReturnScope select_or_group_clause331 =null;
		ParserRuleReturnScope query_continuation332 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:547:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:2: ( query_body_clauses )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==132||(LA130_0 >= 143 && LA130_0 <= 144)||LA130_0==154||LA130_0==194) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:2: query_body_clauses
					{
					pushFollow(FOLLOW_query_body_clauses_in_query_body5105);
					query_body_clauses330=query_body_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clauses330.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_or_group_clause_in_query_body5110);
			select_or_group_clause331=select_or_group_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_or_group_clause331.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:49: ( ( 'into' )=> query_continuation )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==141) ) {
				int LA131_1 = input.LA(2);
				if ( (synpred23_cs()) ) {
					alt131=1;
				}
			}
			switch (alt131) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:50: ( 'into' )=> query_continuation
					{
					pushFollow(FOLLOW_query_continuation_in_query_body5121);
					query_continuation332=query_continuation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, query_continuation332.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, query_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query_body"


	public static class query_continuation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query_continuation"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:550:1: query_continuation : 'into' identifier query_body ;
	public final csParser.query_continuation_return query_continuation() throws RecognitionException {
		csParser.query_continuation_return retval = new csParser.query_continuation_return();
		retval.start = input.LT(1);
		int query_continuation_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal333=null;
		ParserRuleReturnScope identifier334 =null;
		ParserRuleReturnScope query_body335 =null;

		CommonTree string_literal333_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:550:19: ( 'into' identifier query_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:551:2: 'into' identifier query_body
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal333=(Token)match(input,141,FOLLOW_141_in_query_continuation5131); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal333_tree = (CommonTree)adaptor.create(string_literal333);
			adaptor.addChild(root_0, string_literal333_tree);
			}

			pushFollow(FOLLOW_identifier_in_query_continuation5135);
			identifier334=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier334.getTree());

			pushFollow(FOLLOW_query_body_in_query_continuation5139);
			query_body335=query_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body335.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, query_continuation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query_continuation"


	public static class query_body_clauses_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query_body_clauses"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:552:1: query_body_clauses : ( query_body_clause )+ ;
	public final csParser.query_body_clauses_return query_body_clauses() throws RecognitionException {
		csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
		retval.start = input.LT(1);
		int query_body_clauses_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope query_body_clause336 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:552:19: ( ( query_body_clause )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:553:2: ( query_body_clause )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:553:2: ( query_body_clause )+
			int cnt132=0;
			loop132:
			while (true) {
				int alt132=2;
				int LA132_0 = input.LA(1);
				if ( (LA132_0==132||(LA132_0 >= 143 && LA132_0 <= 144)||LA132_0==154||LA132_0==194) ) {
					alt132=1;
				}

				switch (alt132) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:553:2: query_body_clause
					{
					pushFollow(FOLLOW_query_body_clause_in_query_body_clauses5146);
					query_body_clause336=query_body_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clause336.getTree());

					}
					break;

				default :
					if ( cnt132 >= 1 ) break loop132;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(132, input);
					throw eee;
				}
				cnt132++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, query_body_clauses_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query_body_clauses"


	public static class query_body_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query_body_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:554:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
	public final csParser.query_body_clause_return query_body_clause() throws RecognitionException {
		csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
		retval.start = input.LT(1);
		int query_body_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope from_clause337 =null;
		ParserRuleReturnScope let_clause338 =null;
		ParserRuleReturnScope where_clause339 =null;
		ParserRuleReturnScope join_clause340 =null;
		ParserRuleReturnScope orderby_clause341 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:554:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
			int alt133=5;
			switch ( input.LA(1) ) {
			case 132:
				{
				alt133=1;
				}
				break;
			case 144:
				{
				alt133=2;
				}
				break;
			case 194:
				{
				alt133=3;
				}
				break;
			case 143:
				{
				alt133=4;
				}
				break;
			case 154:
				{
				alt133=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}
			switch (alt133) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:555:2: from_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_from_clause_in_query_body_clause5155);
					from_clause337=from_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause337.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:556:4: let_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_let_clause_in_query_body_clause5160);
					let_clause338=let_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, let_clause338.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:557:4: where_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_where_clause_in_query_body_clause5165);
					where_clause339=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause339.getTree());

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:558:4: join_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_join_clause_in_query_body_clause5170);
					join_clause340=join_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause340.getTree());

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:559:4: orderby_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_orderby_clause_in_query_body_clause5175);
					orderby_clause341=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause341.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, query_body_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query_body_clause"


	public static class from_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "from_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:560:1: from_clause : 'from' ( type )? identifier 'in' expression ;
	public final csParser.from_clause_return from_clause() throws RecognitionException {
		csParser.from_clause_return retval = new csParser.from_clause_return();
		retval.start = input.LT(1);
		int from_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal342=null;
		Token string_literal345=null;
		ParserRuleReturnScope type343 =null;
		ParserRuleReturnScope identifier344 =null;
		ParserRuleReturnScope expression346 =null;

		CommonTree string_literal342_tree=null;
		CommonTree string_literal345_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:560:12: ( 'from' ( type )? identifier 'in' expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:561:2: 'from' ( type )? identifier 'in' expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal342=(Token)match(input,132,FOLLOW_132_in_from_clause5182); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal342_tree = (CommonTree)adaptor.create(string_literal342);
			adaptor.addChild(root_0, string_literal342_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:561:11: ( type )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==103||LA134_0==106||LA134_0==109||LA134_0==114||LA134_0==119||LA134_0==129||LA134_0==138||LA134_0==146||LA134_0==151||LA134_0==169||LA134_0==173||LA134_0==177||(LA134_0 >= 185 && LA134_0 <= 186)||LA134_0==189||LA134_0==192) ) {
				alt134=1;
			}
			else if ( (LA134_0==IDENTIFIER||LA134_0==95||(LA134_0 >= 97 && LA134_0 <= 98)||(LA134_0 >= 100 && LA134_0 <= 101)||LA134_0==105||LA134_0==117||LA134_0==120||LA134_0==122||LA134_0==126||LA134_0==132||LA134_0==135||LA134_0==141||(LA134_0 >= 143 && LA134_0 <= 144)||(LA134_0 >= 147 && LA134_0 <= 148)||LA134_0==152||LA134_0==154||LA134_0==157||LA134_0==160||LA134_0==162||LA134_0==167||(LA134_0 >= 171 && LA134_0 <= 172)||LA134_0==183||LA134_0==190||LA134_0==194||LA134_0==196) ) {
				int LA134_2 = input.LA(2);
				if ( (LA134_2==DOT||LA134_2==IDENTIFIER||LA134_2==69||(LA134_2 >= 80 && LA134_2 <= 81)||LA134_2==89||LA134_2==91||LA134_2==95||(LA134_2 >= 97 && LA134_2 <= 98)||(LA134_2 >= 100 && LA134_2 <= 101)||LA134_2==105||LA134_2==117||LA134_2==120||LA134_2==122||LA134_2==126||LA134_2==132||LA134_2==135||LA134_2==141||(LA134_2 >= 143 && LA134_2 <= 144)||(LA134_2 >= 147 && LA134_2 <= 148)||LA134_2==152||LA134_2==154||LA134_2==157||LA134_2==160||LA134_2==162||LA134_2==167||(LA134_2 >= 171 && LA134_2 <= 172)||LA134_2==183||LA134_2==190||LA134_2==194||LA134_2==196) ) {
					alt134=1;
				}
			}
			switch (alt134) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:561:11: type
					{
					pushFollow(FOLLOW_type_in_from_clause5186);
					type343=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type343.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_from_clause5191);
			identifier344=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier344.getTree());

			string_literal345=(Token)match(input,137,FOLLOW_137_in_from_clause5195); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal345_tree = (CommonTree)adaptor.create(string_literal345);
			adaptor.addChild(root_0, string_literal345_tree);
			}

			pushFollow(FOLLOW_expression_in_from_clause5199);
			expression346=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression346.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, from_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class join_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "join_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:562:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
	public final csParser.join_clause_return join_clause() throws RecognitionException {
		csParser.join_clause_return retval = new csParser.join_clause_return();
		retval.start = input.LT(1);
		int join_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal347=null;
		Token string_literal350=null;
		Token string_literal352=null;
		Token string_literal354=null;
		Token string_literal356=null;
		ParserRuleReturnScope type348 =null;
		ParserRuleReturnScope identifier349 =null;
		ParserRuleReturnScope expression351 =null;
		ParserRuleReturnScope expression353 =null;
		ParserRuleReturnScope expression355 =null;
		ParserRuleReturnScope identifier357 =null;

		CommonTree string_literal347_tree=null;
		CommonTree string_literal350_tree=null;
		CommonTree string_literal352_tree=null;
		CommonTree string_literal354_tree=null;
		CommonTree string_literal356_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:562:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:563:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal347=(Token)match(input,143,FOLLOW_143_in_join_clause5207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal347_tree = (CommonTree)adaptor.create(string_literal347);
			adaptor.addChild(root_0, string_literal347_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:563:11: ( type )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==103||LA135_0==106||LA135_0==109||LA135_0==114||LA135_0==119||LA135_0==129||LA135_0==138||LA135_0==146||LA135_0==151||LA135_0==169||LA135_0==173||LA135_0==177||(LA135_0 >= 185 && LA135_0 <= 186)||LA135_0==189||LA135_0==192) ) {
				alt135=1;
			}
			else if ( (LA135_0==IDENTIFIER||LA135_0==95||(LA135_0 >= 97 && LA135_0 <= 98)||(LA135_0 >= 100 && LA135_0 <= 101)||LA135_0==105||LA135_0==117||LA135_0==120||LA135_0==122||LA135_0==126||LA135_0==132||LA135_0==135||LA135_0==141||(LA135_0 >= 143 && LA135_0 <= 144)||(LA135_0 >= 147 && LA135_0 <= 148)||LA135_0==152||LA135_0==154||LA135_0==157||LA135_0==160||LA135_0==162||LA135_0==167||(LA135_0 >= 171 && LA135_0 <= 172)||LA135_0==183||LA135_0==190||LA135_0==194||LA135_0==196) ) {
				int LA135_2 = input.LA(2);
				if ( (LA135_2==DOT||LA135_2==IDENTIFIER||LA135_2==69||(LA135_2 >= 80 && LA135_2 <= 81)||LA135_2==89||LA135_2==91||LA135_2==95||(LA135_2 >= 97 && LA135_2 <= 98)||(LA135_2 >= 100 && LA135_2 <= 101)||LA135_2==105||LA135_2==117||LA135_2==120||LA135_2==122||LA135_2==126||LA135_2==132||LA135_2==135||LA135_2==141||(LA135_2 >= 143 && LA135_2 <= 144)||(LA135_2 >= 147 && LA135_2 <= 148)||LA135_2==152||LA135_2==154||LA135_2==157||LA135_2==160||LA135_2==162||LA135_2==167||(LA135_2 >= 171 && LA135_2 <= 172)||LA135_2==183||LA135_2==190||LA135_2==194||LA135_2==196) ) {
					alt135=1;
				}
			}
			switch (alt135) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:563:11: type
					{
					pushFollow(FOLLOW_type_in_join_clause5211);
					type348=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type348.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_join_clause5216);
			identifier349=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier349.getTree());

			string_literal350=(Token)match(input,137,FOLLOW_137_in_join_clause5220); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal350_tree = (CommonTree)adaptor.create(string_literal350);
			adaptor.addChild(root_0, string_literal350_tree);
			}

			pushFollow(FOLLOW_expression_in_join_clause5224);
			expression351=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression351.getTree());

			string_literal352=(Token)match(input,152,FOLLOW_152_in_join_clause5228); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal352_tree = (CommonTree)adaptor.create(string_literal352);
			adaptor.addChild(root_0, string_literal352_tree);
			}

			pushFollow(FOLLOW_expression_in_join_clause5232);
			expression353=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression353.getTree());

			string_literal354=(Token)match(input,122,FOLLOW_122_in_join_clause5236); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal354_tree = (CommonTree)adaptor.create(string_literal354);
			adaptor.addChild(root_0, string_literal354_tree);
			}

			pushFollow(FOLLOW_expression_in_join_clause5240);
			expression355=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression355.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:563:94: ( 'into' identifier )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==141) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:563:95: 'into' identifier
					{
					string_literal356=(Token)match(input,141,FOLLOW_141_in_join_clause5243); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal356_tree = (CommonTree)adaptor.create(string_literal356);
					adaptor.addChild(root_0, string_literal356_tree);
					}

					pushFollow(FOLLOW_identifier_in_join_clause5245);
					identifier357=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier357.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, join_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class let_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "let_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:564:1: let_clause : 'let' identifier '=' expression ;
	public final csParser.let_clause_return let_clause() throws RecognitionException {
		csParser.let_clause_return retval = new csParser.let_clause_return();
		retval.start = input.LT(1);
		int let_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal358=null;
		Token char_literal360=null;
		ParserRuleReturnScope identifier359 =null;
		ParserRuleReturnScope expression361 =null;

		CommonTree string_literal358_tree=null;
		CommonTree char_literal360_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:564:11: ( 'let' identifier '=' expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:565:2: 'let' identifier '=' expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal358=(Token)match(input,144,FOLLOW_144_in_let_clause5255); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal358_tree = (CommonTree)adaptor.create(string_literal358);
			adaptor.addChild(root_0, string_literal358_tree);
			}

			pushFollow(FOLLOW_identifier_in_let_clause5259);
			identifier359=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier359.getTree());

			char_literal360=(Token)match(input,85,FOLLOW_85_in_let_clause5263); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal360_tree = (CommonTree)adaptor.create(char_literal360);
			adaptor.addChild(root_0, char_literal360_tree);
			}

			pushFollow(FOLLOW_expression_in_let_clause5267);
			expression361=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, let_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "let_clause"


	public static class orderby_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderby_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:566:1: orderby_clause : 'orderby' ordering_list ;
	public final csParser.orderby_clause_return orderby_clause() throws RecognitionException {
		csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
		retval.start = input.LT(1);
		int orderby_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal362=null;
		ParserRuleReturnScope ordering_list363 =null;

		CommonTree string_literal362_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:566:15: ( 'orderby' ordering_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:567:2: 'orderby' ordering_list
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal362=(Token)match(input,154,FOLLOW_154_in_orderby_clause5274); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal362_tree = (CommonTree)adaptor.create(string_literal362);
			adaptor.addChild(root_0, string_literal362_tree);
			}

			pushFollow(FOLLOW_ordering_list_in_orderby_clause5278);
			ordering_list363=ordering_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_list363.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, orderby_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "orderby_clause"


	public static class ordering_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ordering_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:568:1: ordering_list : ordering ( ',' ordering )* ;
	public final csParser.ordering_list_return ordering_list() throws RecognitionException {
		csParser.ordering_list_return retval = new csParser.ordering_list_return();
		retval.start = input.LT(1);
		int ordering_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal365=null;
		ParserRuleReturnScope ordering364 =null;
		ParserRuleReturnScope ordering366 =null;

		CommonTree char_literal365_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:568:14: ( ordering ( ',' ordering )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:569:2: ordering ( ',' ordering )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_ordering_in_ordering_list5286);
			ordering364=ordering();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering364.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:569:13: ( ',' ordering )*
			loop137:
			while (true) {
				int alt137=2;
				int LA137_0 = input.LA(1);
				if ( (LA137_0==74) ) {
					alt137=1;
				}

				switch (alt137) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:569:14: ',' ordering
					{
					char_literal365=(Token)match(input,74,FOLLOW_74_in_ordering_list5291); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal365_tree = (CommonTree)adaptor.create(char_literal365);
					adaptor.addChild(root_0, char_literal365_tree);
					}

					pushFollow(FOLLOW_ordering_in_ordering_list5295);
					ordering366=ordering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering366.getTree());

					}
					break;

				default :
					break loop137;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, ordering_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ordering_list"


	public static class ordering_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ordering"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:570:1: ordering : expression ordering_direction ;
	public final csParser.ordering_return ordering() throws RecognitionException {
		csParser.ordering_return retval = new csParser.ordering_return();
		retval.start = input.LT(1);
		int ordering_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression367 =null;
		ParserRuleReturnScope ordering_direction368 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:570:9: ( expression ordering_direction )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:571:2: expression ordering_direction
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_ordering5305);
			expression367=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression367.getTree());

			pushFollow(FOLLOW_ordering_direction_in_ordering5310);
			ordering_direction368=ordering_direction();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_direction368.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, ordering_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ordering"


	public static class ordering_direction_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ordering_direction"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:573:1: ordering_direction : ( 'ascending' | 'descending' );
	public final csParser.ordering_direction_return ordering_direction() throws RecognitionException {
		csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
		retval.start = input.LT(1);
		int ordering_direction_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set369=null;

		CommonTree set369_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:573:19: ( 'ascending' | 'descending' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set369=input.LT(1);
			if ( input.LA(1)==100||input.LA(1)==117 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set369));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, ordering_direction_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ordering_direction"


	public static class select_or_group_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_or_group_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:576:1: select_or_group_clause : ( select_clause | group_clause );
	public final csParser.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
		csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
		retval.start = input.LT(1);
		int select_or_group_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope select_clause370 =null;
		ParserRuleReturnScope group_clause371 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:576:23: ( select_clause | group_clause )
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==171) ) {
				alt138=1;
			}
			else if ( (LA138_0==135) ) {
				alt138=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 138, 0, input);
				throw nvae;
			}

			switch (alt138) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:577:2: select_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_select_clause_in_select_or_group_clause5332);
					select_clause370=select_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_clause370.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:578:4: group_clause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_group_clause_in_select_or_group_clause5337);
					group_clause371=group_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause371.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, select_or_group_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "select_or_group_clause"


	public static class select_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:579:1: select_clause : 'select' expression ;
	public final csParser.select_clause_return select_clause() throws RecognitionException {
		csParser.select_clause_return retval = new csParser.select_clause_return();
		retval.start = input.LT(1);
		int select_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal372=null;
		ParserRuleReturnScope expression373 =null;

		CommonTree string_literal372_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:579:14: ( 'select' expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:580:2: 'select' expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal372=(Token)match(input,171,FOLLOW_171_in_select_clause5345); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal372_tree = (CommonTree)adaptor.create(string_literal372);
			adaptor.addChild(root_0, string_literal372_tree);
			}

			pushFollow(FOLLOW_expression_in_select_clause5349);
			expression373=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, select_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "select_clause"


	public static class group_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "group_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:581:1: group_clause : 'group' expression 'by' expression ;
	public final csParser.group_clause_return group_clause() throws RecognitionException {
		csParser.group_clause_return retval = new csParser.group_clause_return();
		retval.start = input.LT(1);
		int group_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal374=null;
		Token string_literal376=null;
		ParserRuleReturnScope expression375 =null;
		ParserRuleReturnScope expression377 =null;

		CommonTree string_literal374_tree=null;
		CommonTree string_literal376_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:581:13: ( 'group' expression 'by' expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:582:2: 'group' expression 'by' expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal374=(Token)match(input,135,FOLLOW_135_in_group_clause5357); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal374_tree = (CommonTree)adaptor.create(string_literal374);
			adaptor.addChild(root_0, string_literal374_tree);
			}

			pushFollow(FOLLOW_expression_in_group_clause5361);
			expression375=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());

			string_literal376=(Token)match(input,105,FOLLOW_105_in_group_clause5365); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal376_tree = (CommonTree)adaptor.create(string_literal376);
			adaptor.addChild(root_0, string_literal376_tree);
			}

			pushFollow(FOLLOW_expression_in_group_clause5369);
			expression377=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression377.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, group_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "group_clause"


	public static class where_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "where_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:583:1: where_clause : 'where' boolean_expression ;
	public final csParser.where_clause_return where_clause() throws RecognitionException {
		csParser.where_clause_return retval = new csParser.where_clause_return();
		retval.start = input.LT(1);
		int where_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal378=null;
		ParserRuleReturnScope boolean_expression379 =null;

		CommonTree string_literal378_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:583:13: ( 'where' boolean_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:584:2: 'where' boolean_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal378=(Token)match(input,194,FOLLOW_194_in_where_clause5377); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal378_tree = (CommonTree)adaptor.create(string_literal378);
			adaptor.addChild(root_0, string_literal378_tree);
			}

			pushFollow(FOLLOW_boolean_expression_in_where_clause5381);
			boolean_expression379=boolean_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_expression379.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, where_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class boolean_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "boolean_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:585:1: boolean_expression returns [expression t] : a= expression ;
	public final csParser.boolean_expression_return boolean_expression() throws RecognitionException {
		csParser.boolean_expression_return retval = new csParser.boolean_expression_return();
		retval.start = input.LT(1);
		int boolean_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:585:44: (a= expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:586:2: a= expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_boolean_expression5397);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, boolean_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "boolean_expression"


	public static class global_attributes_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "global_attributes"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:591:1: global_attributes returns [UnknownNode t] : ( global_attribute )+ ;
	public final csParser.global_attributes_return global_attributes() throws RecognitionException {
		csParser.global_attributes_return retval = new csParser.global_attributes_return();
		retval.start = input.LT(1);
		int global_attributes_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope global_attribute380 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:592:37: ( ( global_attribute )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:593:9: ( global_attribute )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:593:9: ( global_attribute )+
			int cnt139=0;
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==91) ) {
					int LA139_2 = input.LA(2);
					if ( (LA139_2==101||LA139_2==148) ) {
						int LA139_3 = input.LA(3);
						if ( (LA139_3==79) ) {
							alt139=1;
						}

					}

				}

				switch (alt139) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:593:9: global_attribute
					{
					pushFollow(FOLLOW_global_attribute_in_global_attributes5428);
					global_attribute380=global_attribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute380.getTree());

					}
					break;

				default :
					if ( cnt139 >= 1 ) break loop139;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(139, input);
					throw eee;
				}
				cnt139++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, global_attributes_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "global_attributes"


	public static class global_attribute_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "global_attribute"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:595:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
	public final csParser.global_attribute_return global_attribute() throws RecognitionException {
		csParser.global_attribute_return retval = new csParser.global_attribute_return();
		retval.start = input.LT(1);
		int global_attribute_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal381=null;
		Token char_literal384=null;
		Token char_literal385=null;
		ParserRuleReturnScope global_attribute_target_specifier382 =null;
		ParserRuleReturnScope attribute_list383 =null;

		CommonTree char_literal381_tree=null;
		CommonTree char_literal384_tree=null;
		CommonTree char_literal385_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:595:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:596:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal381=(Token)match(input,91,FOLLOW_91_in_global_attribute5446); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal381_tree = (CommonTree)adaptor.create(char_literal381);
			adaptor.addChild(root_0, char_literal381_tree);
			}

			pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute5450);
			global_attribute_target_specifier382=global_attribute_target_specifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target_specifier382.getTree());

			pushFollow(FOLLOW_attribute_list_in_global_attribute5454);
			attribute_list383=attribute_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list383.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:596:61: ( ',' )?
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==74) ) {
				alt140=1;
			}
			switch (alt140) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:596:61: ','
					{
					char_literal384=(Token)match(input,74,FOLLOW_74_in_global_attribute5458); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal384_tree = (CommonTree)adaptor.create(char_literal384);
					adaptor.addChild(root_0, char_literal384_tree);
					}

					}
					break;

			}

			char_literal385=(Token)match(input,92,FOLLOW_92_in_global_attribute5463); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal385_tree = (CommonTree)adaptor.create(char_literal385);
			adaptor.addChild(root_0, char_literal385_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, global_attribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "global_attribute"


	public static class global_attribute_target_specifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "global_attribute_target_specifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:597:1: global_attribute_target_specifier : global_attribute_target ':' ;
	public final csParser.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
		csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
		retval.start = input.LT(1);
		int global_attribute_target_specifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal387=null;
		ParserRuleReturnScope global_attribute_target386 =null;

		CommonTree char_literal387_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:597:34: ( global_attribute_target ':' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:598:2: global_attribute_target ':'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier5472);
			global_attribute_target386=global_attribute_target();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target386.getTree());

			char_literal387=(Token)match(input,79,FOLLOW_79_in_global_attribute_target_specifier5476); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal387_tree = (CommonTree)adaptor.create(char_literal387);
			adaptor.addChild(root_0, char_literal387_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, global_attribute_target_specifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "global_attribute_target_specifier"


	public static class global_attribute_target_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "global_attribute_target"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:599:1: global_attribute_target : ( 'assembly' | 'module' );
	public final csParser.global_attribute_target_return global_attribute_target() throws RecognitionException {
		csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
		retval.start = input.LT(1);
		int global_attribute_target_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set388=null;

		CommonTree set388_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:599:24: ( 'assembly' | 'module' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set388=input.LT(1);
			if ( input.LA(1)==101||input.LA(1)==148 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set388));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, global_attribute_target_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "global_attribute_target"


	public static class attributes_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attributes"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:601:1: attributes returns [UnknownNode t] : attribute_sections ;
	public final csParser.attributes_return attributes() throws RecognitionException {
		csParser.attributes_return retval = new csParser.attributes_return();
		retval.start = input.LT(1);
		int attributes_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attribute_sections389 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:602:37: ( attribute_sections )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:603:9: attribute_sections
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_attribute_sections_in_attributes5515);
			attribute_sections389=attribute_sections();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_sections389.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, attributes_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attributes"


	public static class attribute_sections_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_sections"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:604:1: attribute_sections : ( attribute_section )+ ;
	public final csParser.attribute_sections_return attribute_sections() throws RecognitionException {
		csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
		retval.start = input.LT(1);
		int attribute_sections_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attribute_section390 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:604:19: ( ( attribute_section )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:605:2: ( attribute_section )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:605:2: ( attribute_section )+
			int cnt141=0;
			loop141:
			while (true) {
				int alt141=2;
				int LA141_0 = input.LA(1);
				if ( (LA141_0==91) ) {
					alt141=1;
				}

				switch (alt141) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:605:2: attribute_section
					{
					pushFollow(FOLLOW_attribute_section_in_attribute_sections5523);
					attribute_section390=attribute_section();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_section390.getTree());

					}
					break;

				default :
					if ( cnt141 >= 1 ) break loop141;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(141, input);
					throw eee;
				}
				cnt141++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, attribute_sections_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_sections"


	public static class attribute_section_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_section"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:606:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
	public final csParser.attribute_section_return attribute_section() throws RecognitionException {
		csParser.attribute_section_return retval = new csParser.attribute_section_return();
		retval.start = input.LT(1);
		int attribute_section_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal391=null;
		Token char_literal394=null;
		Token char_literal395=null;
		ParserRuleReturnScope attribute_target_specifier392 =null;
		ParserRuleReturnScope attribute_list393 =null;

		CommonTree char_literal391_tree=null;
		CommonTree char_literal394_tree=null;
		CommonTree char_literal395_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:606:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:607:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal391=(Token)match(input,91,FOLLOW_91_in_attribute_section5533); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal391_tree = (CommonTree)adaptor.create(char_literal391);
			adaptor.addChild(root_0, char_literal391_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:607:8: ( attribute_target_specifier )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==126||LA142_0==147||LA142_0==157||LA142_0==162||LA142_0==183) ) {
				int LA142_1 = input.LA(2);
				if ( (LA142_1==79) ) {
					alt142=1;
				}
			}
			else if ( (LA142_0==123||LA142_0==168) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:607:8: attribute_target_specifier
					{
					pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section5537);
					attribute_target_specifier392=attribute_target_specifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target_specifier392.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_attribute_list_in_attribute_section5542);
			attribute_list393=attribute_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list393.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:607:55: ( ',' )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==74) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:607:55: ','
					{
					char_literal394=(Token)match(input,74,FOLLOW_74_in_attribute_section5546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal394_tree = (CommonTree)adaptor.create(char_literal394);
					adaptor.addChild(root_0, char_literal394_tree);
					}

					}
					break;

			}

			char_literal395=(Token)match(input,92,FOLLOW_92_in_attribute_section5551); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal395_tree = (CommonTree)adaptor.create(char_literal395);
			adaptor.addChild(root_0, char_literal395_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, attribute_section_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_section"


	public static class attribute_target_specifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_target_specifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:608:1: attribute_target_specifier : attribute_target ':' ;
	public final csParser.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
		csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
		retval.start = input.LT(1);
		int attribute_target_specifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal397=null;
		ParserRuleReturnScope attribute_target396 =null;

		CommonTree char_literal397_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:608:27: ( attribute_target ':' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:609:2: attribute_target ':'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier5560);
			attribute_target396=attribute_target();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target396.getTree());

			char_literal397=(Token)match(input,79,FOLLOW_79_in_attribute_target_specifier5564); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal397_tree = (CommonTree)adaptor.create(char_literal397);
			adaptor.addChild(root_0, char_literal397_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, attribute_target_specifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_target_specifier"


	public static class attribute_target_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_target"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:610:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
	public final csParser.attribute_target_return attribute_target() throws RecognitionException {
		csParser.attribute_target_return retval = new csParser.attribute_target_return();
		retval.start = input.LT(1);
		int attribute_target_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set398=null;

		CommonTree set398_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:610:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set398=input.LT(1);
			if ( input.LA(1)==123||input.LA(1)==126||input.LA(1)==147||input.LA(1)==157||input.LA(1)==162||input.LA(1)==168||input.LA(1)==183 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set398));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, attribute_target_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_target"


	public static class attribute_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:612:1: attribute_list : attribute ( ',' attribute )* ;
	public final csParser.attribute_list_return attribute_list() throws RecognitionException {
		csParser.attribute_list_return retval = new csParser.attribute_list_return();
		retval.start = input.LT(1);
		int attribute_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal400=null;
		ParserRuleReturnScope attribute399 =null;
		ParserRuleReturnScope attribute401 =null;

		CommonTree char_literal400_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:612:15: ( attribute ( ',' attribute )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:613:2: attribute ( ',' attribute )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_attribute_in_attribute_list5606);
			attribute399=attribute();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute399.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:613:12: ( ',' attribute )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==74) ) {
					int LA144_1 = input.LA(2);
					if ( (LA144_1==IDENTIFIER||LA144_1==95||(LA144_1 >= 97 && LA144_1 <= 98)||(LA144_1 >= 100 && LA144_1 <= 101)||LA144_1==105||LA144_1==117||LA144_1==120||LA144_1==122||LA144_1==126||LA144_1==132||LA144_1==135||LA144_1==141||(LA144_1 >= 143 && LA144_1 <= 144)||(LA144_1 >= 147 && LA144_1 <= 148)||LA144_1==152||LA144_1==154||LA144_1==157||LA144_1==160||LA144_1==162||LA144_1==167||(LA144_1 >= 171 && LA144_1 <= 172)||LA144_1==183||LA144_1==190||LA144_1==194||LA144_1==196) ) {
						alt144=1;
					}

				}

				switch (alt144) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:613:13: ',' attribute
					{
					char_literal400=(Token)match(input,74,FOLLOW_74_in_attribute_list5609); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal400_tree = (CommonTree)adaptor.create(char_literal400);
					adaptor.addChild(root_0, char_literal400_tree);
					}

					pushFollow(FOLLOW_attribute_in_attribute_list5611);
					attribute401=attribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute401.getTree());

					}
					break;

				default :
					break loop144;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, attribute_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_list"


	public static class attribute_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:614:1: attribute : type_name ( attribute_arguments )? ;
	public final csParser.attribute_return attribute() throws RecognitionException {
		csParser.attribute_return retval = new csParser.attribute_return();
		retval.start = input.LT(1);
		int attribute_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type_name402 =null;
		ParserRuleReturnScope attribute_arguments403 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:614:10: ( type_name ( attribute_arguments )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:615:2: type_name ( attribute_arguments )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_name_in_attribute5623);
			type_name402=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name402.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:615:14: ( attribute_arguments )?
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==68) ) {
				alt145=1;
			}
			switch (alt145) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:615:14: attribute_arguments
					{
					pushFollow(FOLLOW_attribute_arguments_in_attribute5627);
					attribute_arguments403=attribute_arguments();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_arguments403.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, attribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute"


	public static class attribute_arguments_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_arguments"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:617:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
	public final csParser.attribute_arguments_return attribute_arguments() throws RecognitionException {
		csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
		retval.start = input.LT(1);
		int attribute_arguments_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal404=null;
		Token char_literal405=null;
		Token char_literal408=null;
		Token char_literal410=null;
		ParserRuleReturnScope positional_argument406 =null;
		ParserRuleReturnScope named_argument407 =null;
		ParserRuleReturnScope positional_argument409 =null;

		CommonTree char_literal404_tree=null;
		CommonTree char_literal405_tree=null;
		CommonTree char_literal408_tree=null;
		CommonTree char_literal410_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:617:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:618:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal404=(Token)match(input,68,FOLLOW_68_in_attribute_arguments5638); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal404_tree = (CommonTree)adaptor.create(char_literal404);
			adaptor.addChild(root_0, char_literal404_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:618:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==RPAREN) ) {
				alt147=1;
			}
			else if ( (LA147_0==Character_literal||LA147_0==FALSE||(LA147_0 >= Hex_number && LA147_0 <= IDENTIFIER)||(LA147_0 >= MINUS && LA147_0 <= NUMBER)||LA147_0==Real_literal||LA147_0==STRINGLITERAL||LA147_0==TRUE||LA147_0==Verbatim_string_literal||LA147_0==61||LA147_0==66||(LA147_0 >= 68 && LA147_0 <= 69)||(LA147_0 >= 71 && LA147_0 <= 72)||LA147_0==75||LA147_0==95||(LA147_0 >= 97 && LA147_0 <= 98)||(LA147_0 >= 100 && LA147_0 <= 103)||(LA147_0 >= 105 && LA147_0 <= 106)||(LA147_0 >= 109 && LA147_0 <= 110)||(LA147_0 >= 114 && LA147_0 <= 117)||(LA147_0 >= 119 && LA147_0 <= 120)||LA147_0==122||LA147_0==126||LA147_0==129||LA147_0==132||LA147_0==135||LA147_0==138||LA147_0==141||(LA147_0 >= 143 && LA147_0 <= 144)||(LA147_0 >= 146 && LA147_0 <= 148)||(LA147_0 >= 150 && LA147_0 <= 152)||LA147_0==154||LA147_0==157||LA147_0==160||LA147_0==162||LA147_0==167||LA147_0==169||(LA147_0 >= 171 && LA147_0 <= 174)||LA147_0==177||LA147_0==180||(LA147_0 >= 183 && LA147_0 <= 187)||(LA147_0 >= 189 && LA147_0 <= 190)||LA147_0==194||LA147_0==196||LA147_0==202) ) {
				alt147=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 147, 0, input);
				throw nvae;
			}

			switch (alt147) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:618:9: ')'
					{
					char_literal405=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments5643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal405_tree = (CommonTree)adaptor.create(char_literal405);
					adaptor.addChild(root_0, char_literal405_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
					{
					pushFollow(FOLLOW_positional_argument_in_attribute_arguments5663);
					positional_argument406=positional_argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument406.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
					loop146:
					while (true) {
						int alt146=3;
						int LA146_0 = input.LA(1);
						if ( (LA146_0==IDENTIFIER||LA146_0==95||(LA146_0 >= 97 && LA146_0 <= 98)||(LA146_0 >= 100 && LA146_0 <= 101)||LA146_0==105||LA146_0==117||LA146_0==120||LA146_0==122||LA146_0==126||LA146_0==132||LA146_0==135||LA146_0==141||(LA146_0 >= 143 && LA146_0 <= 144)||(LA146_0 >= 147 && LA146_0 <= 148)||LA146_0==152||LA146_0==154||LA146_0==157||LA146_0==160||LA146_0==162||LA146_0==167||(LA146_0 >= 171 && LA146_0 <= 172)||LA146_0==183||LA146_0==190||LA146_0==194||LA146_0==196) && (synpred24_cs())) {
							alt146=1;
						}
						else if ( (LA146_0==74) ) {
							alt146=2;
						}

						switch (alt146) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:32: ( ',' identifier '=' )=> named_argument
							{
							pushFollow(FOLLOW_named_argument_in_attribute_arguments5682);
							named_argument407=named_argument();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument407.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:620:15: ',' positional_argument
							{
							char_literal408=(Token)match(input,74,FOLLOW_74_in_attribute_arguments5698); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal408_tree = (CommonTree)adaptor.create(char_literal408);
							adaptor.addChild(root_0, char_literal408_tree);
							}

							pushFollow(FOLLOW_positional_argument_in_attribute_arguments5700);
							positional_argument409=positional_argument();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument409.getTree());

							}
							break;

						default :
							break loop146;
						}
					}

					}

					char_literal410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments5711); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal410_tree = (CommonTree)adaptor.create(char_literal410);
					adaptor.addChild(root_0, char_literal410_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, attribute_arguments_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_arguments"


	public static class positional_argument_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "positional_argument_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:623:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
	public final csParser.positional_argument_list_return positional_argument_list() throws RecognitionException {
		csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
		retval.start = input.LT(1);
		int positional_argument_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal412=null;
		ParserRuleReturnScope positional_argument411 =null;
		ParserRuleReturnScope positional_argument413 =null;

		CommonTree char_literal412_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:623:25: ( positional_argument ( ',' positional_argument )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:624:2: positional_argument ( ',' positional_argument )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_positional_argument_in_positional_argument_list5725);
			positional_argument411=positional_argument();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument411.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:624:22: ( ',' positional_argument )*
			loop148:
			while (true) {
				int alt148=2;
				int LA148_0 = input.LA(1);
				if ( (LA148_0==74) ) {
					alt148=1;
				}

				switch (alt148) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:624:23: ',' positional_argument
					{
					char_literal412=(Token)match(input,74,FOLLOW_74_in_positional_argument_list5728); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal412_tree = (CommonTree)adaptor.create(char_literal412);
					adaptor.addChild(root_0, char_literal412_tree);
					}

					pushFollow(FOLLOW_positional_argument_in_positional_argument_list5730);
					positional_argument413=positional_argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument413.getTree());

					}
					break;

				default :
					break loop148;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, positional_argument_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "positional_argument_list"


	public static class positional_argument_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "positional_argument"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:625:1: positional_argument : attribute_argument_expression ;
	public final csParser.positional_argument_return positional_argument() throws RecognitionException {
		csParser.positional_argument_return retval = new csParser.positional_argument_return();
		retval.start = input.LT(1);
		int positional_argument_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attribute_argument_expression414 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:625:20: ( attribute_argument_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:626:2: attribute_argument_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument5741);
			attribute_argument_expression414=attribute_argument_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression414.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, positional_argument_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "positional_argument"


	public static class named_argument_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "named_argument_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:627:1: named_argument_list : named_argument ( ',' named_argument )* ;
	public final csParser.named_argument_list_return named_argument_list() throws RecognitionException {
		csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
		retval.start = input.LT(1);
		int named_argument_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal416=null;
		ParserRuleReturnScope named_argument415 =null;
		ParserRuleReturnScope named_argument417 =null;

		CommonTree char_literal416_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:627:20: ( named_argument ( ',' named_argument )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:628:2: named_argument ( ',' named_argument )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_named_argument_in_named_argument_list5750);
			named_argument415=named_argument();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument415.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:628:17: ( ',' named_argument )*
			loop149:
			while (true) {
				int alt149=2;
				int LA149_0 = input.LA(1);
				if ( (LA149_0==74) ) {
					alt149=1;
				}

				switch (alt149) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:628:18: ',' named_argument
					{
					char_literal416=(Token)match(input,74,FOLLOW_74_in_named_argument_list5753); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal416_tree = (CommonTree)adaptor.create(char_literal416);
					adaptor.addChild(root_0, char_literal416_tree);
					}

					pushFollow(FOLLOW_named_argument_in_named_argument_list5755);
					named_argument417=named_argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument417.getTree());

					}
					break;

				default :
					break loop149;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, named_argument_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "named_argument_list"


	public static class named_argument_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "named_argument"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:629:1: named_argument : identifier '=' attribute_argument_expression ;
	public final csParser.named_argument_return named_argument() throws RecognitionException {
		csParser.named_argument_return retval = new csParser.named_argument_return();
		retval.start = input.LT(1);
		int named_argument_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal419=null;
		ParserRuleReturnScope identifier418 =null;
		ParserRuleReturnScope attribute_argument_expression420 =null;

		CommonTree char_literal419_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:629:15: ( identifier '=' attribute_argument_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:630:2: identifier '=' attribute_argument_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_named_argument5766);
			identifier418=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier418.getTree());

			char_literal419=(Token)match(input,85,FOLLOW_85_in_named_argument5770); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal419_tree = (CommonTree)adaptor.create(char_literal419);
			adaptor.addChild(root_0, char_literal419_tree);
			}

			pushFollow(FOLLOW_attribute_argument_expression_in_named_argument5774);
			attribute_argument_expression420=attribute_argument_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression420.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, named_argument_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "named_argument"


	public static class attribute_argument_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "attribute_argument_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:631:1: attribute_argument_expression : expression ;
	public final csParser.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
		csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
		retval.start = input.LT(1);
		int attribute_argument_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression421 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:631:30: ( expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:632:2: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_attribute_argument_expression5783);
			expression421=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression421.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, attribute_argument_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "attribute_argument_expression"


	public static class class_declaration_return extends ParserRuleReturnScope {
		public class_declaration t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:638:1: class_declaration returns [class_declaration t] : 'class' a= type_or_generic (b= class_base )? (c= type_parameter_constraints_clauses )? d= class_body ( ';' )? ;
	public final csParser.class_declaration_return class_declaration() throws RecognitionException {
		csParser.class_declaration_return retval = new csParser.class_declaration_return();
		retval.start = input.LT(1);
		int class_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal422=null;
		Token char_literal423=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;

		CommonTree string_literal422_tree=null;
		CommonTree char_literal423_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:639:32: ( 'class' a= type_or_generic (b= class_base )? (c= type_parameter_constraints_clauses )? d= class_body ( ';' )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:9: 'class' a= type_or_generic (b= class_base )? (c= type_parameter_constraints_clauses )? d= class_body ( ';' )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal422=(Token)match(input,111,FOLLOW_111_in_class_declaration5814); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal422_tree = (CommonTree)adaptor.create(string_literal422);
			adaptor.addChild(root_0, string_literal422_tree);
			}

			pushFollow(FOLLOW_type_or_generic_in_class_declaration5819);
			a=type_or_generic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:39: (b= class_base )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==79) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:39: b= class_base
					{
					pushFollow(FOLLOW_class_base_in_class_declaration5825);
					b=class_base();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:55: (c= type_parameter_constraints_clauses )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==194) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:55: c= type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration5832);
					c=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_class_body_in_class_declaration5839);
			d=class_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:109: ( ';' )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==SEMI) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:640:109: ';'
					{
					char_literal423=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_declaration5843); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal423_tree = (CommonTree)adaptor.create(char_literal423);
					adaptor.addChild(root_0, char_literal423_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new class_declaration((a!=null?((csParser.type_or_generic_return)a).t:null),(b!=null?((csParser.class_base_return)b).t:null), (c!=null?((csParser.type_parameter_constraints_clauses_return)c).t:null), (d!=null?((csParser.class_body_return)d).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, class_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_declaration"


	public static class class_base_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_base"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:642:1: class_base returns [UnknownNode t] : ':' interface_type_list ;
	public final csParser.class_base_return class_base() throws RecognitionException {
		csParser.class_base_return retval = new csParser.class_base_return();
		retval.start = input.LT(1);
		int class_base_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal424=null;
		ParserRuleReturnScope interface_type_list425 =null;

		CommonTree char_literal424_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:643:37: ( ':' interface_type_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:646:9: ':' interface_type_list
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal424=(Token)match(input,79,FOLLOW_79_in_class_base5898); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal424_tree = (CommonTree)adaptor.create(char_literal424);
			adaptor.addChild(root_0, char_literal424_tree);
			}

			pushFollow(FOLLOW_interface_type_list_in_class_base5902);
			interface_type_list425=interface_type_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list425.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, class_base_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_base"


	public static class interface_type_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_type_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:649:1: interface_type_list : type ( ',' type )* ;
	public final csParser.interface_type_list_return interface_type_list() throws RecognitionException {
		csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
		retval.start = input.LT(1);
		int interface_type_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal427=null;
		ParserRuleReturnScope type426 =null;
		ParserRuleReturnScope type428 =null;

		CommonTree char_literal427_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:649:20: ( type ( ',' type )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:650:2: type ( ',' type )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_interface_type_list5913);
			type426=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type426.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:650:7: ( ',' type )*
			loop153:
			while (true) {
				int alt153=2;
				int LA153_0 = input.LA(1);
				if ( (LA153_0==74) ) {
					alt153=1;
				}

				switch (alt153) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:650:8: ',' type
					{
					char_literal427=(Token)match(input,74,FOLLOW_74_in_interface_type_list5916); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal427_tree = (CommonTree)adaptor.create(char_literal427);
					adaptor.addChild(root_0, char_literal427_tree);
					}

					pushFollow(FOLLOW_type_in_interface_type_list5920);
					type428=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type428.getTree());

					}
					break;

				default :
					break loop153;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, interface_type_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_type_list"


	public static class class_body_return extends ParserRuleReturnScope {
		public class_member_declarations t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:652:1: class_body returns [class_member_declarations t] : '{' (a= class_member_declarations )? '}' ;
	public final csParser.class_body_return class_body() throws RecognitionException {
		csParser.class_body_return retval = new csParser.class_body_return();
		retval.start = input.LT(1);
		int class_body_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal429=null;
		Token char_literal430=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal429_tree=null;
		CommonTree char_literal430_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:653:32: ( '{' (a= class_member_declarations )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:654:9: '{' (a= class_member_declarations )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal429=(Token)match(input,197,FOLLOW_197_in_class_body5950); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal429_tree = (CommonTree)adaptor.create(char_literal429);
			adaptor.addChild(root_0, char_literal429_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:654:16: (a= class_member_declarations )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==ENUM||LA154_0==IDENTIFIER||LA154_0==91||(LA154_0 >= 95 && LA154_0 <= 98)||(LA154_0 >= 100 && LA154_0 <= 101)||LA154_0==103||(LA154_0 >= 105 && LA154_0 <= 106)||LA154_0==109||(LA154_0 >= 111 && LA154_0 <= 112)||LA154_0==114||(LA154_0 >= 116 && LA154_0 <= 117)||(LA154_0 >= 119 && LA154_0 <= 120)||(LA154_0 >= 122 && LA154_0 <= 126)||LA154_0==129||LA154_0==132||(LA154_0 >= 135 && LA154_0 <= 136)||(LA154_0 >= 138 && LA154_0 <= 141)||(LA154_0 >= 143 && LA154_0 <= 144)||(LA154_0 >= 146 && LA154_0 <= 148)||(LA154_0 >= 150 && LA154_0 <= 152)||LA154_0==154||(LA154_0 >= 156 && LA154_0 <= 157)||(LA154_0 >= 159 && LA154_0 <= 165)||LA154_0==167||(LA154_0 >= 169 && LA154_0 <= 173)||(LA154_0 >= 176 && LA154_0 <= 178)||LA154_0==183||(LA154_0 >= 185 && LA154_0 <= 186)||(LA154_0 >= 188 && LA154_0 <= 194)||LA154_0==196||LA154_0==202) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:654:16: a= class_member_declarations
					{
					pushFollow(FOLLOW_class_member_declarations_in_class_body5956);
					a=class_member_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			char_literal430=(Token)match(input,201,FOLLOW_201_in_class_body5961); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal430_tree = (CommonTree)adaptor.create(char_literal430);
			adaptor.addChild(root_0, char_literal430_tree);
			}

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.class_member_declarations_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, class_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_body"


	public static class class_member_declarations_return extends ParserRuleReturnScope {
		public class_member_declarations t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "class_member_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:655:1: class_member_declarations returns [class_member_declarations t] : (a= class_member_declaration )+ ;
	public final csParser.class_member_declarations_return class_member_declarations() throws RecognitionException {
		csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
		retval.start = input.LT(1);
		int class_member_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		retval.t =new class_member_declarations();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:657:32: ( (a= class_member_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:658:9: (a= class_member_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:658:9: (a= class_member_declaration )+
			int cnt155=0;
			loop155:
			while (true) {
				int alt155=2;
				int LA155_0 = input.LA(1);
				if ( (LA155_0==ENUM||LA155_0==IDENTIFIER||LA155_0==91||(LA155_0 >= 95 && LA155_0 <= 98)||(LA155_0 >= 100 && LA155_0 <= 101)||LA155_0==103||(LA155_0 >= 105 && LA155_0 <= 106)||LA155_0==109||(LA155_0 >= 111 && LA155_0 <= 112)||LA155_0==114||(LA155_0 >= 116 && LA155_0 <= 117)||(LA155_0 >= 119 && LA155_0 <= 120)||(LA155_0 >= 122 && LA155_0 <= 126)||LA155_0==129||LA155_0==132||(LA155_0 >= 135 && LA155_0 <= 136)||(LA155_0 >= 138 && LA155_0 <= 141)||(LA155_0 >= 143 && LA155_0 <= 144)||(LA155_0 >= 146 && LA155_0 <= 148)||(LA155_0 >= 150 && LA155_0 <= 152)||LA155_0==154||(LA155_0 >= 156 && LA155_0 <= 157)||(LA155_0 >= 159 && LA155_0 <= 165)||LA155_0==167||(LA155_0 >= 169 && LA155_0 <= 173)||(LA155_0 >= 176 && LA155_0 <= 178)||LA155_0==183||(LA155_0 >= 185 && LA155_0 <= 186)||(LA155_0 >= 188 && LA155_0 <= 194)||LA155_0==196||LA155_0==202) ) {
					alt155=1;
				}

				switch (alt155) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:658:10: a= class_member_declaration
					{
					pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations5997);
					a=class_member_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {((class_member_declarations)retval.t).add((a!=null?((csParser.class_member_declaration_return)a).t:null));}
					}
					break;

				default :
					if ( cnt155 >= 1 ) break loop155;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(155, input);
					throw eee;
				}
				cnt155++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, class_member_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "class_member_declarations"


	public static class constant_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:662:1: constant_declaration : 'const' type constant_declarators ';' ;
	public final csParser.constant_declaration_return constant_declaration() throws RecognitionException {
		csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
		retval.start = input.LT(1);
		int constant_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal431=null;
		Token char_literal434=null;
		ParserRuleReturnScope type432 =null;
		ParserRuleReturnScope constant_declarators433 =null;

		CommonTree string_literal431_tree=null;
		CommonTree char_literal434_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:662:21: ( 'const' type constant_declarators ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:663:2: 'const' type constant_declarators ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal431=(Token)match(input,112,FOLLOW_112_in_constant_declaration6021); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal431_tree = (CommonTree)adaptor.create(string_literal431);
			adaptor.addChild(root_0, string_literal431_tree);
			}

			pushFollow(FOLLOW_type_in_constant_declaration6025);
			type432=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type432.getTree());

			pushFollow(FOLLOW_constant_declarators_in_constant_declaration6029);
			constant_declarators433=constant_declarators();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators433.getTree());

			char_literal434=(Token)match(input,SEMI,FOLLOW_SEMI_in_constant_declaration6033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal434_tree = (CommonTree)adaptor.create(char_literal434);
			adaptor.addChild(root_0, char_literal434_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, constant_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constant_declaration"


	public static class constant_declarators_return extends ParserRuleReturnScope {
		public constant_declarators t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant_declarators"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:664:1: constant_declarators returns [constant_declarators t] : a= constant_declarator ( ',' a= constant_declarator )* ;
	public final csParser.constant_declarators_return constant_declarators() throws RecognitionException {
		csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
		retval.start = input.LT(1);
		int constant_declarators_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal435=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal435_tree=null;

		constant_declarators res=new constant_declarators();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:666:38: (a= constant_declarator ( ',' a= constant_declarator )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:667:9: a= constant_declarator ( ',' a= constant_declarator )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_constant_declarator_in_constant_declarators6065);
			a=constant_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.constant_declarator_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:667:48: ( ',' a= constant_declarator )*
			loop156:
			while (true) {
				int alt156=2;
				int LA156_0 = input.LA(1);
				if ( (LA156_0==74) ) {
					alt156=1;
				}

				switch (alt156) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:667:49: ',' a= constant_declarator
					{
					char_literal435=(Token)match(input,74,FOLLOW_74_in_constant_declarators6070); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal435_tree = (CommonTree)adaptor.create(char_literal435);
					adaptor.addChild(root_0, char_literal435_tree);
					}

					pushFollow(FOLLOW_constant_declarator_in_constant_declarators6074);
					a=constant_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.constant_declarator_return)a).t:null));}
					}
					break;

				default :
					break loop156;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, constant_declarators_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constant_declarators"


	public static class constant_declarator_return extends ParserRuleReturnScope {
		public constant_declarator t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:669:1: constant_declarator returns [constant_declarator t] : a= identifier ( '=' b= constant_expression )? ;
	public final csParser.constant_declarator_return constant_declarator() throws RecognitionException {
		csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
		retval.start = input.LT(1);
		int constant_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal436=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree char_literal436_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:670:31: (a= identifier ( '=' b= constant_expression )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:671:2: a= identifier ( '=' b= constant_expression )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_constant_declarator6100);
			a=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:671:17: ( '=' b= constant_expression )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==85) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:671:18: '=' b= constant_expression
					{
					char_literal436=(Token)match(input,85,FOLLOW_85_in_constant_declarator6105); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal436_tree = (CommonTree)adaptor.create(char_literal436);
					adaptor.addChild(root_0, char_literal436_tree);
					}

					pushFollow(FOLLOW_constant_expression_in_constant_declarator6111);
					b=constant_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new constant_declarator((a!=null?((csParser.identifier_return)a).t:null),(b!=null?((csParser.constant_expression_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, constant_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constant_declarator"


	public static class constant_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:672:1: constant_expression returns [expression t] : a= expression ;
	public final csParser.constant_expression_return constant_expression() throws RecognitionException {
		csParser.constant_expression_return retval = new csParser.constant_expression_return();
		retval.start = input.LT(1);
		int constant_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:672:43: (a= expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:673:2: a= expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_constant_expression6129);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, constant_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constant_expression"


	public static class field_declaration_return extends ParserRuleReturnScope {
		public variable_declarators t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "field_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:675:1: field_declaration returns [variable_declarators t] : a= variable_declarators ';' ;
	public final csParser.field_declaration_return field_declaration() throws RecognitionException {
		csParser.field_declaration_return retval = new csParser.field_declaration_return();
		retval.start = input.LT(1);
		int field_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal437=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal437_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:675:51: (a= variable_declarators ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:676:2: a= variable_declarators ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_variable_declarators_in_field_declaration6145);
			a=variable_declarators();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal437=(Token)match(input,SEMI,FOLLOW_SEMI_in_field_declaration6149); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal437_tree = (CommonTree)adaptor.create(char_literal437);
			adaptor.addChild(root_0, char_literal437_tree);
			}

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.variable_declarators_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, field_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "field_declaration"


	public static class variable_declarators_return extends ParserRuleReturnScope {
		public variable_declarators t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variable_declarators"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:677:1: variable_declarators returns [variable_declarators t] : a= variable_declarator ( ',' a= variable_declarator )* ;
	public final csParser.variable_declarators_return variable_declarators() throws RecognitionException {
		csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
		retval.start = input.LT(1);
		int variable_declarators_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal438=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal438_tree=null;

		variable_declarators res=new variable_declarators();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:679:39: (a= variable_declarator ( ',' a= variable_declarator )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:680:2: a= variable_declarator ( ',' a= variable_declarator )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_variable_declarator_in_variable_declarators6182);
			a=variable_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.variable_declarator_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:680:41: ( ',' a= variable_declarator )*
			loop158:
			while (true) {
				int alt158=2;
				int LA158_0 = input.LA(1);
				if ( (LA158_0==74) ) {
					alt158=1;
				}

				switch (alt158) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:680:42: ',' a= variable_declarator
					{
					char_literal438=(Token)match(input,74,FOLLOW_74_in_variable_declarators6187); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal438_tree = (CommonTree)adaptor.create(char_literal438);
					adaptor.addChild(root_0, char_literal438_tree);
					}

					pushFollow(FOLLOW_variable_declarator_in_variable_declarators6193);
					a=variable_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.variable_declarator_return)a).t:null));}
					}
					break;

				default :
					break loop158;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, variable_declarators_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variable_declarators"


	public static class variable_declarator_return extends ParserRuleReturnScope {
		public variable_declarator t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variable_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:682:1: variable_declarator returns [variable_declarator t] : a= type_name ( '=' b= variable_initializer )? ;
	public final csParser.variable_declarator_return variable_declarator() throws RecognitionException {
		csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
		retval.start = input.LT(1);
		int variable_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal439=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree char_literal439_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:683:32: (a= type_name ( '=' b= variable_initializer )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:684:2: a= type_name ( '=' b= variable_initializer )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_name_in_variable_declarator6221);
			a=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:684:14: ( '=' b= variable_initializer )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==85) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:684:15: '=' b= variable_initializer
					{
					char_literal439=(Token)match(input,85,FOLLOW_85_in_variable_declarator6224); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal439_tree = (CommonTree)adaptor.create(char_literal439);
					adaptor.addChild(root_0, char_literal439_tree);
					}

					pushFollow(FOLLOW_variable_initializer_in_variable_declarator6230);
					b=variable_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new variable_declarator((a!=null?((csParser.type_name_return)a).t:null),(b!=null?((csParser.variable_initializer_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, variable_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variable_declarator"


	public static class method_declaration_return extends ParserRuleReturnScope {
		public method_declaration t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "method_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:687:1: method_declaration returns [method_declaration t] : a= method_header b= method_body ;
	public final csParser.method_declaration_return method_declaration() throws RecognitionException {
		csParser.method_declaration_return retval = new csParser.method_declaration_return();
		retval.start = input.LT(1);
		int method_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:688:32: (a= method_header b= method_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:689:9: a= method_header b= method_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_method_header_in_method_declaration6265);
			a=method_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_method_body_in_method_declaration6271);
			b=method_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t = new method_declaration((a!=null?((csParser.method_header_return)a).t:null),(b!=null?((csParser.method_body_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, method_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "method_declaration"


	public static class method_header_return extends ParserRuleReturnScope {
		public method_header t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "method_header"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:690:1: method_header returns [method_header t] : a= member_name '(' (b= formal_parameter_list )? ')' (c= type_parameter_constraints_clauses )? ;
	public final csParser.method_header_return method_header() throws RecognitionException {
		csParser.method_header_return retval = new csParser.method_header_return();
		retval.start = input.LT(1);
		int method_header_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal440=null;
		Token char_literal441=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree char_literal440_tree=null;
		CommonTree char_literal441_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:691:32: (a= member_name '(' (b= formal_parameter_list )? ')' (c= type_parameter_constraints_clauses )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:692:9: a= member_name '(' (b= formal_parameter_list )? ')' (c= type_parameter_constraints_clauses )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_member_name_in_method_header6299);
			a=member_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal440=(Token)match(input,68,FOLLOW_68_in_method_header6302); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal440_tree = (CommonTree)adaptor.create(char_literal440);
			adaptor.addChild(root_0, char_literal440_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:692:31: (b= formal_parameter_list )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==IDENTIFIER||LA160_0==91||LA160_0==95||(LA160_0 >= 97 && LA160_0 <= 98)||(LA160_0 >= 100 && LA160_0 <= 101)||LA160_0==103||(LA160_0 >= 105 && LA160_0 <= 106)||LA160_0==109||LA160_0==114||LA160_0==117||(LA160_0 >= 119 && LA160_0 <= 120)||LA160_0==122||LA160_0==126||LA160_0==129||LA160_0==132||LA160_0==135||LA160_0==138||LA160_0==141||(LA160_0 >= 143 && LA160_0 <= 144)||(LA160_0 >= 146 && LA160_0 <= 148)||(LA160_0 >= 151 && LA160_0 <= 152)||(LA160_0 >= 154 && LA160_0 <= 155)||(LA160_0 >= 157 && LA160_0 <= 158)||LA160_0==160||LA160_0==162||(LA160_0 >= 166 && LA160_0 <= 167)||LA160_0==169||(LA160_0 >= 171 && LA160_0 <= 173)||LA160_0==177||LA160_0==180||LA160_0==183||(LA160_0 >= 185 && LA160_0 <= 186)||(LA160_0 >= 189 && LA160_0 <= 190)||LA160_0==192||LA160_0==194||LA160_0==196) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:692:31: b= formal_parameter_list
					{
					pushFollow(FOLLOW_formal_parameter_list_in_method_header6308);
					b=formal_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			char_literal441=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_method_header6313); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal441_tree = (CommonTree)adaptor.create(char_literal441);
			adaptor.addChild(root_0, char_literal441_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:692:64: (c= type_parameter_constraints_clauses )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==194) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:692:64: c= type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header6319);
					c=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new method_header((a!=null?((csParser.member_name_return)a).t:null),(b!=null?((csParser.formal_parameter_list_return)b).t:null),(c!=null?((csParser.type_parameter_constraints_clauses_return)c).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, method_header_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "method_header"


	public static class method_body_return extends ParserRuleReturnScope {
		public block t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "method_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:694:1: method_body returns [block t] : a= block ;
	public final csParser.method_body_return method_body() throws RecognitionException {
		csParser.method_body_return retval = new csParser.method_body_return();
		retval.start = input.LT(1);
		int method_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:694:30: (a= block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:695:9: a= block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_method_body6351);
			a=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.block_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, method_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "method_body"


	public static class member_name_return extends ParserRuleReturnScope {
		public qid t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "member_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:696:1: member_name returns [qid t] : a= qid ;
	public final csParser.member_name_return member_name() throws RecognitionException {
		csParser.member_name_return retval = new csParser.member_name_return();
		retval.start = input.LT(1);
		int member_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:696:29: (a= qid )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:697:9: a= qid
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_qid_in_member_name6374);
			a=qid();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.qid_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, member_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "member_name"


	public static class property_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "property_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:701:1: property_declaration : member_name '{' accessor_declarations '}' ;
	public final csParser.property_declaration_return property_declaration() throws RecognitionException {
		csParser.property_declaration_return retval = new csParser.property_declaration_return();
		retval.start = input.LT(1);
		int property_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal443=null;
		Token char_literal445=null;
		ParserRuleReturnScope member_name442 =null;
		ParserRuleReturnScope accessor_declarations444 =null;

		CommonTree char_literal443_tree=null;
		CommonTree char_literal445_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:701:21: ( member_name '{' accessor_declarations '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:702:2: member_name '{' accessor_declarations '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_member_name_in_property_declaration6410);
			member_name442=member_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name442.getTree());

			char_literal443=(Token)match(input,197,FOLLOW_197_in_property_declaration6414); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal443_tree = (CommonTree)adaptor.create(char_literal443);
			adaptor.addChild(root_0, char_literal443_tree);
			}

			pushFollow(FOLLOW_accessor_declarations_in_property_declaration6418);
			accessor_declarations444=accessor_declarations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations444.getTree());

			char_literal445=(Token)match(input,201,FOLLOW_201_in_property_declaration6422); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal445_tree = (CommonTree)adaptor.create(char_literal445);
			adaptor.addChild(root_0, char_literal445_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, property_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "property_declaration"


	public static class accessor_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "accessor_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:703:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
	public final csParser.accessor_declarations_return accessor_declarations() throws RecognitionException {
		csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
		retval.start = input.LT(1);
		int accessor_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes446 =null;
		ParserRuleReturnScope get_accessor_declaration447 =null;
		ParserRuleReturnScope attributes448 =null;
		ParserRuleReturnScope set_accessor_declaration449 =null;
		ParserRuleReturnScope set_accessor_declaration450 =null;
		ParserRuleReturnScope attributes451 =null;
		ParserRuleReturnScope get_accessor_declaration452 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:703:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:704:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:704:2: ( attributes )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==91) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:704:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_accessor_declarations6430);
					attributes446=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes446.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			int alt167=2;
			switch ( input.LA(1) ) {
			case 140:
			case 161:
			case 163:
			case 164:
				{
				int LA167_1 = input.LA(2);
				if ( (LA167_1==133) ) {
					alt167=1;
				}
				else if ( (LA167_1==172) ) {
					alt167=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 167, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 133:
				{
				alt167=1;
				}
				break;
			case 172:
				{
				alt167=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}
			switch (alt167) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
					{
					pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations6436);
					get_accessor_declaration447=get_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration447.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:31: ( attributes )?
					int alt163=2;
					int LA163_0 = input.LA(1);
					if ( (LA163_0==91) ) {
						alt163=1;
					}
					switch (alt163) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:31: attributes
							{
							pushFollow(FOLLOW_attributes_in_accessor_declarations6440);
							attributes448=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes448.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:45: ( set_accessor_declaration )?
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==140||LA164_0==161||(LA164_0 >= 163 && LA164_0 <= 164)||LA164_0==172) ) {
						alt164=1;
					}
					switch (alt164) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:705:45: set_accessor_declaration
							{
							pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations6445);
							set_accessor_declaration449=set_accessor_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration449.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:706:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
					{
					pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations6452);
					set_accessor_declaration450=set_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration450.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:706:32: ( attributes )?
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==91) ) {
						alt165=1;
					}
					switch (alt165) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:706:32: attributes
							{
							pushFollow(FOLLOW_attributes_in_accessor_declarations6456);
							attributes451=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes451.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:706:46: ( get_accessor_declaration )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==133||LA166_0==140||LA166_0==161||(LA166_0 >= 163 && LA166_0 <= 164)) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:706:46: get_accessor_declaration
							{
							pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations6461);
							get_accessor_declaration452=get_accessor_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration452.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, accessor_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "accessor_declarations"


	public static class get_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "get_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:707:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
	public final csParser.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
		csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
		retval.start = input.LT(1);
		int get_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal454=null;
		ParserRuleReturnScope accessor_modifier453 =null;
		ParserRuleReturnScope accessor_body455 =null;

		CommonTree string_literal454_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:707:25: ( ( accessor_modifier )? 'get' accessor_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:708:2: ( accessor_modifier )? 'get' accessor_body
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:708:2: ( accessor_modifier )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==140||LA168_0==161||(LA168_0 >= 163 && LA168_0 <= 164)) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:708:2: accessor_modifier
					{
					pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration6471);
					accessor_modifier453=accessor_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier453.getTree());

					}
					break;

			}

			string_literal454=(Token)match(input,133,FOLLOW_133_in_get_accessor_declaration6476); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal454_tree = (CommonTree)adaptor.create(string_literal454);
			adaptor.addChild(root_0, string_literal454_tree);
			}

			pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration6480);
			accessor_body455=accessor_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body455.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, get_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "get_accessor_declaration"


	public static class set_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "set_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:709:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
	public final csParser.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
		csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
		retval.start = input.LT(1);
		int set_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal457=null;
		ParserRuleReturnScope accessor_modifier456 =null;
		ParserRuleReturnScope accessor_body458 =null;

		CommonTree string_literal457_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:709:25: ( ( accessor_modifier )? 'set' accessor_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:710:2: ( accessor_modifier )? 'set' accessor_body
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:710:2: ( accessor_modifier )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==140||LA169_0==161||(LA169_0 >= 163 && LA169_0 <= 164)) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:710:2: accessor_modifier
					{
					pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration6488);
					accessor_modifier456=accessor_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier456.getTree());

					}
					break;

			}

			string_literal457=(Token)match(input,172,FOLLOW_172_in_set_accessor_declaration6493); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal457_tree = (CommonTree)adaptor.create(string_literal457);
			adaptor.addChild(root_0, string_literal457_tree);
			}

			pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration6497);
			accessor_body458=accessor_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body458.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, set_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "set_accessor_declaration"


	public static class accessor_modifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "accessor_modifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:711:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
	public final csParser.accessor_modifier_return accessor_modifier() throws RecognitionException {
		csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
		retval.start = input.LT(1);
		int accessor_modifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set459=null;

		CommonTree set459_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:711:18: ( 'public' | 'protected' | 'private' | 'internal' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set459=input.LT(1);
			if ( input.LA(1)==140||input.LA(1)==161||(input.LA(1) >= 163 && input.LA(1) <= 164) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set459));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, accessor_modifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "accessor_modifier"


	public static class accessor_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "accessor_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:713:1: accessor_body : block ;
	public final csParser.accessor_body_return accessor_body() throws RecognitionException {
		csParser.accessor_body_return retval = new csParser.accessor_body_return();
		retval.start = input.LT(1);
		int accessor_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope block460 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:713:14: ( block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:714:2: block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_accessor_body6525);
			block460=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block460.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, accessor_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "accessor_body"


	public static class event_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "event_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:717:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
	public final csParser.event_declaration_return event_declaration() throws RecognitionException {
		csParser.event_declaration_return retval = new csParser.event_declaration_return();
		retval.start = input.LT(1);
		int event_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal461=null;
		Token char_literal464=null;
		Token char_literal466=null;
		Token char_literal468=null;
		ParserRuleReturnScope type462 =null;
		ParserRuleReturnScope member_name463 =null;
		ParserRuleReturnScope event_accessor_declarations465 =null;
		ParserRuleReturnScope variable_declarators467 =null;

		CommonTree string_literal461_tree=null;
		CommonTree char_literal464_tree=null;
		CommonTree char_literal466_tree=null;
		CommonTree char_literal468_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:717:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:718:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal461=(Token)match(input,123,FOLLOW_123_in_event_declaration6535); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal461_tree = (CommonTree)adaptor.create(string_literal461);
			adaptor.addChild(root_0, string_literal461_tree);
			}

			pushFollow(FOLLOW_type_in_event_declaration6539);
			type462=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type462.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:719:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==103||LA170_0==106||LA170_0==109||LA170_0==114||LA170_0==119||LA170_0==129||LA170_0==138||LA170_0==146||LA170_0==151||LA170_0==169||LA170_0==173||LA170_0==177||(LA170_0 >= 185 && LA170_0 <= 186)||LA170_0==189) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==IDENTIFIER||LA170_0==95||(LA170_0 >= 97 && LA170_0 <= 98)||(LA170_0 >= 100 && LA170_0 <= 101)||LA170_0==105||LA170_0==117||LA170_0==120||LA170_0==122||LA170_0==126||LA170_0==132||LA170_0==135||LA170_0==141||(LA170_0 >= 143 && LA170_0 <= 144)||(LA170_0 >= 147 && LA170_0 <= 148)||LA170_0==152||LA170_0==154||LA170_0==157||LA170_0==160||LA170_0==162||LA170_0==167||(LA170_0 >= 171 && LA170_0 <= 172)||LA170_0==183||LA170_0==190||LA170_0==194||LA170_0==196) ) {
				int LA170_2 = input.LA(2);
				if ( (synpred25_cs()) ) {
					alt170=1;
				}
				else if ( (true) ) {
					alt170=2;
				}

			}
			else if ( (LA170_0==Real_literal) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==NUMBER) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==Hex_number) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==Character_literal) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==STRINGLITERAL) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==Verbatim_string_literal) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==TRUE) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==FALSE) && (synpred25_cs())) {
				alt170=1;
			}
			else if ( (LA170_0==NULL) && (synpred25_cs())) {
				alt170=1;
			}

			switch (alt170) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:719:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
					{
					pushFollow(FOLLOW_member_name_in_event_declaration6554);
					member_name463=member_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name463.getTree());

					char_literal464=(Token)match(input,197,FOLLOW_197_in_event_declaration6558); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal464_tree = (CommonTree)adaptor.create(char_literal464);
					adaptor.addChild(root_0, char_literal464_tree);
					}

					pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration6562);
					event_accessor_declarations465=event_accessor_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_accessor_declarations465.getTree());

					char_literal466=(Token)match(input,201,FOLLOW_201_in_event_declaration6566); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal466_tree = (CommonTree)adaptor.create(char_literal466);
					adaptor.addChild(root_0, char_literal466_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:720:5: variable_declarators ';'
					{
					pushFollow(FOLLOW_variable_declarators_in_event_declaration6572);
					variable_declarators467=variable_declarators();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarators467.getTree());

					char_literal468=(Token)match(input,SEMI,FOLLOW_SEMI_in_event_declaration6576); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal468_tree = (CommonTree)adaptor.create(char_literal468);
					adaptor.addChild(root_0, char_literal468_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, event_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "event_declaration"


	public static class event_modifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "event_modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:722:1: event_modifiers : ( modifier )+ ;
	public final csParser.event_modifiers_return event_modifiers() throws RecognitionException {
		csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
		retval.start = input.LT(1);
		int event_modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope modifier469 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:722:16: ( ( modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:723:2: ( modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:723:2: ( modifier )+
			int cnt171=0;
			loop171:
			while (true) {
				int alt171=2;
				int LA171_0 = input.LA(1);
				if ( (LA171_0==96||LA171_0==125||LA171_0==140||LA171_0==150||LA171_0==156||LA171_0==161||(LA171_0 >= 163 && LA171_0 <= 165)||LA171_0==170||LA171_0==176||LA171_0==188||LA171_0==191||LA171_0==193) ) {
					alt171=1;
				}

				switch (alt171) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:723:2: modifier
					{
					pushFollow(FOLLOW_modifier_in_event_modifiers6588);
					modifier469=modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier469.getTree());

					}
					break;

				default :
					if ( cnt171 >= 1 ) break loop171;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(171, input);
					throw eee;
				}
				cnt171++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, event_modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "event_modifiers"


	public static class event_accessor_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "event_accessor_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:724:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
	public final csParser.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
		csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
		retval.start = input.LT(1);
		int event_accessor_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes470 =null;
		ParserRuleReturnScope add_accessor_declaration471 =null;
		ParserRuleReturnScope attributes472 =null;
		ParserRuleReturnScope remove_accessor_declaration473 =null;
		ParserRuleReturnScope remove_accessor_declaration474 =null;
		ParserRuleReturnScope attributes475 =null;
		ParserRuleReturnScope add_accessor_declaration476 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:724:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:2: ( attributes )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==91) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_event_accessor_declarations6597);
					attributes470=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes470.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==97) ) {
				alt175=1;
			}
			else if ( (LA175_0==167) ) {
				alt175=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 175, 0, input);
				throw nvae;
			}

			switch (alt175) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
					{
					pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations6604);
					add_accessor_declaration471=add_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration471.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:45: ( attributes )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==91) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:725:45: attributes
							{
							pushFollow(FOLLOW_attributes_in_event_accessor_declarations6608);
							attributes472=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes472.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations6613);
					remove_accessor_declaration473=remove_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration473.getTree());

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:726:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:726:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:726:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
					{
					pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations6634);
					remove_accessor_declaration474=remove_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration474.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:726:49: ( attributes )?
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==91) ) {
						alt174=1;
					}
					switch (alt174) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:726:49: attributes
							{
							pushFollow(FOLLOW_attributes_in_event_accessor_declarations6638);
							attributes475=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes475.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations6643);
					add_accessor_declaration476=add_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration476.getTree());

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, event_accessor_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "event_accessor_declarations"


	public static class add_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "add_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:727:1: add_accessor_declaration : 'add' block ;
	public final csParser.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
		csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
		retval.start = input.LT(1);
		int add_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal477=null;
		ParserRuleReturnScope block478 =null;

		CommonTree string_literal477_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:727:25: ( 'add' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:728:2: 'add' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal477=(Token)match(input,97,FOLLOW_97_in_add_accessor_declaration6653); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal477_tree = (CommonTree)adaptor.create(string_literal477);
			adaptor.addChild(root_0, string_literal477_tree);
			}

			pushFollow(FOLLOW_block_in_add_accessor_declaration6657);
			block478=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block478.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, add_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "add_accessor_declaration"


	public static class remove_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "remove_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:729:1: remove_accessor_declaration : 'remove' block ;
	public final csParser.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
		csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
		retval.start = input.LT(1);
		int remove_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal479=null;
		ParserRuleReturnScope block480 =null;

		CommonTree string_literal479_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:729:28: ( 'remove' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:730:2: 'remove' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal479=(Token)match(input,167,FOLLOW_167_in_remove_accessor_declaration6665); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal479_tree = (CommonTree)adaptor.create(string_literal479);
			adaptor.addChild(root_0, string_literal479_tree);
			}

			pushFollow(FOLLOW_block_in_remove_accessor_declaration6669);
			block480=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block480.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, remove_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "remove_accessor_declaration"


	public static class enum_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enum_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:735:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
	public final csParser.enum_declaration_return enum_declaration() throws RecognitionException {
		csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
		retval.start = input.LT(1);
		int enum_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal481=null;
		Token char_literal485=null;
		ParserRuleReturnScope identifier482 =null;
		ParserRuleReturnScope enum_base483 =null;
		ParserRuleReturnScope enum_body484 =null;

		CommonTree string_literal481_tree=null;
		CommonTree char_literal485_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:735:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:736:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal481=(Token)match(input,ENUM,FOLLOW_ENUM_in_enum_declaration6681); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal481_tree = (CommonTree)adaptor.create(string_literal481);
			adaptor.addChild(root_0, string_literal481_tree);
			}

			pushFollow(FOLLOW_identifier_in_enum_declaration6685);
			identifier482=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier482.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:736:24: ( enum_base )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==79) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:736:24: enum_base
					{
					pushFollow(FOLLOW_enum_base_in_enum_declaration6689);
					enum_base483=enum_base();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_base483.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_enum_body_in_enum_declaration6694);
			enum_body484=enum_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_body484.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:736:49: ( ';' )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==SEMI) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:736:49: ';'
					{
					char_literal485=(Token)match(input,SEMI,FOLLOW_SEMI_in_enum_declaration6698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal485_tree = (CommonTree)adaptor.create(char_literal485);
					adaptor.addChild(root_0, char_literal485_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 177, enum_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enum_declaration"


	public static class enum_base_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enum_base"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:737:1: enum_base : ':' integral_type ;
	public final csParser.enum_base_return enum_base() throws RecognitionException {
		csParser.enum_base_return retval = new csParser.enum_base_return();
		retval.start = input.LT(1);
		int enum_base_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal486=null;
		ParserRuleReturnScope integral_type487 =null;

		CommonTree char_literal486_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:737:10: ( ':' integral_type )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:738:2: ':' integral_type
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal486=(Token)match(input,79,FOLLOW_79_in_enum_base6707); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal486_tree = (CommonTree)adaptor.create(char_literal486);
			adaptor.addChild(root_0, char_literal486_tree);
			}

			pushFollow(FOLLOW_integral_type_in_enum_base6711);
			integral_type487=integral_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, integral_type487.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 178, enum_base_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enum_base"


	public static class enum_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enum_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:739:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
	public final csParser.enum_body_return enum_body() throws RecognitionException {
		csParser.enum_body_return retval = new csParser.enum_body_return();
		retval.start = input.LT(1);
		int enum_body_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal488=null;
		Token char_literal490=null;
		Token char_literal491=null;
		ParserRuleReturnScope enum_member_declarations489 =null;

		CommonTree char_literal488_tree=null;
		CommonTree char_literal490_tree=null;
		CommonTree char_literal491_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:739:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:740:2: '{' ( enum_member_declarations ( ',' )? )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal488=(Token)match(input,197,FOLLOW_197_in_enum_body6719); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal488_tree = (CommonTree)adaptor.create(char_literal488);
			adaptor.addChild(root_0, char_literal488_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:740:6: ( enum_member_declarations ( ',' )? )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==IDENTIFIER||LA179_0==91||LA179_0==95||(LA179_0 >= 97 && LA179_0 <= 98)||(LA179_0 >= 100 && LA179_0 <= 101)||LA179_0==105||LA179_0==117||LA179_0==120||LA179_0==122||LA179_0==126||LA179_0==132||LA179_0==135||LA179_0==141||(LA179_0 >= 143 && LA179_0 <= 144)||(LA179_0 >= 147 && LA179_0 <= 148)||LA179_0==152||LA179_0==154||LA179_0==157||LA179_0==160||LA179_0==162||LA179_0==167||(LA179_0 >= 171 && LA179_0 <= 172)||LA179_0==183||LA179_0==190||LA179_0==194||LA179_0==196) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:740:7: enum_member_declarations ( ',' )?
					{
					pushFollow(FOLLOW_enum_member_declarations_in_enum_body6722);
					enum_member_declarations489=enum_member_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declarations489.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:740:32: ( ',' )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==74) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:740:32: ','
							{
							char_literal490=(Token)match(input,74,FOLLOW_74_in_enum_body6724); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal490_tree = (CommonTree)adaptor.create(char_literal490);
							adaptor.addChild(root_0, char_literal490_tree);
							}

							}
							break;

					}

					}
					break;

			}

			char_literal491=(Token)match(input,201,FOLLOW_201_in_enum_body6731); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal491_tree = (CommonTree)adaptor.create(char_literal491);
			adaptor.addChild(root_0, char_literal491_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 179, enum_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enum_body"


	public static class enum_member_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enum_member_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:741:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
	public final csParser.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
		csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
		retval.start = input.LT(1);
		int enum_member_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal493=null;
		ParserRuleReturnScope enum_member_declaration492 =null;
		ParserRuleReturnScope enum_member_declaration494 =null;

		CommonTree char_literal493_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:741:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:742:2: enum_member_declaration ( ',' enum_member_declaration )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations6739);
			enum_member_declaration492=enum_member_declaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration492.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:742:26: ( ',' enum_member_declaration )*
			loop180:
			while (true) {
				int alt180=2;
				int LA180_0 = input.LA(1);
				if ( (LA180_0==74) ) {
					int LA180_1 = input.LA(2);
					if ( (LA180_1==IDENTIFIER||LA180_1==91||LA180_1==95||(LA180_1 >= 97 && LA180_1 <= 98)||(LA180_1 >= 100 && LA180_1 <= 101)||LA180_1==105||LA180_1==117||LA180_1==120||LA180_1==122||LA180_1==126||LA180_1==132||LA180_1==135||LA180_1==141||(LA180_1 >= 143 && LA180_1 <= 144)||(LA180_1 >= 147 && LA180_1 <= 148)||LA180_1==152||LA180_1==154||LA180_1==157||LA180_1==160||LA180_1==162||LA180_1==167||(LA180_1 >= 171 && LA180_1 <= 172)||LA180_1==183||LA180_1==190||LA180_1==194||LA180_1==196) ) {
						alt180=1;
					}

				}

				switch (alt180) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:742:27: ',' enum_member_declaration
					{
					char_literal493=(Token)match(input,74,FOLLOW_74_in_enum_member_declarations6742); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal493_tree = (CommonTree)adaptor.create(char_literal493);
					adaptor.addChild(root_0, char_literal493_tree);
					}

					pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations6744);
					enum_member_declaration494=enum_member_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration494.getTree());

					}
					break;

				default :
					break loop180;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 180, enum_member_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enum_member_declarations"


	public static class enum_member_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enum_member_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:743:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
	public final csParser.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
		csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
		retval.start = input.LT(1);
		int enum_member_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal497=null;
		ParserRuleReturnScope attributes495 =null;
		ParserRuleReturnScope identifier496 =null;
		ParserRuleReturnScope expression498 =null;

		CommonTree char_literal497_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:743:24: ( ( attributes )? identifier ( '=' expression )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:744:2: ( attributes )? identifier ( '=' expression )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:744:2: ( attributes )?
			int alt181=2;
			int LA181_0 = input.LA(1);
			if ( (LA181_0==91) ) {
				alt181=1;
			}
			switch (alt181) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:744:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_enum_member_declaration6754);
					attributes495=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes495.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_enum_member_declaration6759);
			identifier496=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier496.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:744:29: ( '=' expression )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==85) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:744:30: '=' expression
					{
					char_literal497=(Token)match(input,85,FOLLOW_85_in_enum_member_declaration6764); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal497_tree = (CommonTree)adaptor.create(char_literal497);
					adaptor.addChild(root_0, char_literal497_tree);
					}

					pushFollow(FOLLOW_expression_in_enum_member_declaration6768);
					expression498=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 181, enum_member_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enum_member_declaration"


	public static class integral_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "integral_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:749:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
	public final csParser.integral_type_return integral_type() throws RecognitionException {
		csParser.integral_type_return retval = new csParser.integral_type_return();
		retval.start = input.LT(1);
		int integral_type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set499=null;

		CommonTree set499_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:749:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set499=input.LT(1);
			if ( input.LA(1)==106||input.LA(1)==109||input.LA(1)==138||input.LA(1)==146||input.LA(1)==169||input.LA(1)==173||(input.LA(1) >= 185 && input.LA(1) <= 186)||input.LA(1)==189 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set499));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 182, integral_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "integral_type"


	public static class delegate_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delegate_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:753:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	public final csParser.delegate_declaration_return delegate_declaration() throws RecognitionException {
		csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
		retval.start = input.LT(1);
		int delegate_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal500=null;
		Token char_literal504=null;
		Token char_literal506=null;
		Token char_literal508=null;
		ParserRuleReturnScope return_type501 =null;
		ParserRuleReturnScope identifier502 =null;
		ParserRuleReturnScope variant_generic_parameter_list503 =null;
		ParserRuleReturnScope formal_parameter_list505 =null;
		ParserRuleReturnScope type_parameter_constraints_clauses507 =null;

		CommonTree string_literal500_tree=null;
		CommonTree char_literal504_tree=null;
		CommonTree char_literal506_tree=null;
		CommonTree char_literal508_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:753:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:754:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal500=(Token)match(input,116,FOLLOW_116_in_delegate_declaration6825); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal500_tree = (CommonTree)adaptor.create(string_literal500);
			adaptor.addChild(root_0, string_literal500_tree);
			}

			pushFollow(FOLLOW_return_type_in_delegate_declaration6829);
			return_type501=return_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type501.getTree());

			pushFollow(FOLLOW_identifier_in_delegate_declaration6833);
			identifier502=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier502.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:754:41: ( variant_generic_parameter_list )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==81) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:754:41: variant_generic_parameter_list
					{
					pushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration6836);
					variant_generic_parameter_list503=variant_generic_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_generic_parameter_list503.getTree());

					}
					break;

			}

			char_literal504=(Token)match(input,68,FOLLOW_68_in_delegate_declaration6844); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal504_tree = (CommonTree)adaptor.create(char_literal504);
			adaptor.addChild(root_0, char_literal504_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:755:9: ( formal_parameter_list )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==IDENTIFIER||LA184_0==91||LA184_0==95||(LA184_0 >= 97 && LA184_0 <= 98)||(LA184_0 >= 100 && LA184_0 <= 101)||LA184_0==103||(LA184_0 >= 105 && LA184_0 <= 106)||LA184_0==109||LA184_0==114||LA184_0==117||(LA184_0 >= 119 && LA184_0 <= 120)||LA184_0==122||LA184_0==126||LA184_0==129||LA184_0==132||LA184_0==135||LA184_0==138||LA184_0==141||(LA184_0 >= 143 && LA184_0 <= 144)||(LA184_0 >= 146 && LA184_0 <= 148)||(LA184_0 >= 151 && LA184_0 <= 152)||(LA184_0 >= 154 && LA184_0 <= 155)||(LA184_0 >= 157 && LA184_0 <= 158)||LA184_0==160||LA184_0==162||(LA184_0 >= 166 && LA184_0 <= 167)||LA184_0==169||(LA184_0 >= 171 && LA184_0 <= 173)||LA184_0==177||LA184_0==180||LA184_0==183||(LA184_0 >= 185 && LA184_0 <= 186)||(LA184_0 >= 189 && LA184_0 <= 190)||LA184_0==192||LA184_0==194||LA184_0==196) ) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:755:9: formal_parameter_list
					{
					pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration6848);
					formal_parameter_list505=formal_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list505.getTree());

					}
					break;

			}

			char_literal506=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration6853); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal506_tree = (CommonTree)adaptor.create(char_literal506);
			adaptor.addChild(root_0, char_literal506_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:755:40: ( type_parameter_constraints_clauses )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==194) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:755:40: type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration6857);
					type_parameter_constraints_clauses507=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses507.getTree());

					}
					break;

			}

			char_literal508=(Token)match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration6862); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal508_tree = (CommonTree)adaptor.create(char_literal508);
			adaptor.addChild(root_0, char_literal508_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 183, delegate_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "delegate_declaration"


	public static class delegate_modifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delegate_modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:756:1: delegate_modifiers : ( modifier )+ ;
	public final csParser.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
		csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
		retval.start = input.LT(1);
		int delegate_modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope modifier509 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:756:19: ( ( modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:757:2: ( modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:757:2: ( modifier )+
			int cnt186=0;
			loop186:
			while (true) {
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==96||LA186_0==125||LA186_0==140||LA186_0==150||LA186_0==156||LA186_0==161||(LA186_0 >= 163 && LA186_0 <= 165)||LA186_0==170||LA186_0==176||LA186_0==188||LA186_0==191||LA186_0==193) ) {
					alt186=1;
				}

				switch (alt186) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:757:2: modifier
					{
					pushFollow(FOLLOW_modifier_in_delegate_modifiers6870);
					modifier509=modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier509.getTree());

					}
					break;

				default :
					if ( cnt186 >= 1 ) break loop186;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(186, input);
					throw eee;
				}
				cnt186++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 184, delegate_modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "delegate_modifiers"


	public static class variant_generic_parameter_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variant_generic_parameter_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:759:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
	public final csParser.variant_generic_parameter_list_return variant_generic_parameter_list() throws RecognitionException {
		csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
		retval.start = input.LT(1);
		int variant_generic_parameter_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal510=null;
		Token char_literal512=null;
		ParserRuleReturnScope variant_type_parameters511 =null;

		CommonTree char_literal510_tree=null;
		CommonTree char_literal512_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:759:31: ( '<' variant_type_parameters '>' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:760:2: '<' variant_type_parameters '>'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal510=(Token)match(input,81,FOLLOW_81_in_variant_generic_parameter_list6880); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal510_tree = (CommonTree)adaptor.create(char_literal510);
			adaptor.addChild(root_0, char_literal510_tree);
			}

			pushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list6884);
			variant_type_parameters511=variant_type_parameters();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_parameters511.getTree());

			char_literal512=(Token)match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list6888); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal512_tree = (CommonTree)adaptor.create(char_literal512);
			adaptor.addChild(root_0, char_literal512_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 185, variant_generic_parameter_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variant_generic_parameter_list"


	public static class variant_type_parameters_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variant_type_parameters"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:761:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
	public final csParser.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
		csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
		retval.start = input.LT(1);
		int variant_type_parameters_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal514=null;
		ParserRuleReturnScope variant_type_variable_name513 =null;
		ParserRuleReturnScope variant_type_variable_name515 =null;

		CommonTree char_literal514_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:761:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:762:2: variant_type_variable_name ( ',' variant_type_variable_name )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters6896);
			variant_type_variable_name513=variant_type_variable_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name513.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:762:29: ( ',' variant_type_variable_name )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==74) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:762:30: ',' variant_type_variable_name
					{
					char_literal514=(Token)match(input,74,FOLLOW_74_in_variant_type_parameters6899); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal514_tree = (CommonTree)adaptor.create(char_literal514);
					adaptor.addChild(root_0, char_literal514_tree);
					}

					pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters6901);
					variant_type_variable_name515=variant_type_variable_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name515.getTree());

					}
					break;

				default :
					break loop187;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 186, variant_type_parameters_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variant_type_parameters"


	public static class variant_type_variable_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variant_type_variable_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:763:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
	public final csParser.variant_type_variable_name_return variant_type_variable_name() throws RecognitionException {
		csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
		retval.start = input.LT(1);
		int variant_type_variable_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes516 =null;
		ParserRuleReturnScope variance_annotation517 =null;
		ParserRuleReturnScope type_variable_name518 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:763:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:764:2: ( attributes )? ( variance_annotation )? type_variable_name
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:764:2: ( attributes )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==91) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:764:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_variant_type_variable_name6911);
					attributes516=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes516.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:764:16: ( variance_annotation )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==137||LA189_0==155) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:764:16: variance_annotation
					{
					pushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name6916);
					variance_annotation517=variance_annotation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variance_annotation517.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name6921);
			type_variable_name518=type_variable_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name518.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 187, variant_type_variable_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variant_type_variable_name"


	public static class variance_annotation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "variance_annotation"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:765:1: variance_annotation : ( 'in' | 'out' );
	public final csParser.variance_annotation_return variance_annotation() throws RecognitionException {
		csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
		retval.start = input.LT(1);
		int variance_annotation_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set519=null;

		CommonTree set519_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:765:20: ( 'in' | 'out' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set519=input.LT(1);
			if ( input.LA(1)==137||input.LA(1)==155 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set519));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 188, variance_annotation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variance_annotation"


	public static class type_parameter_constraints_clauses_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_parameter_constraints_clauses"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:768:1: type_parameter_constraints_clauses returns [UnknownNode t] : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
	public final csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
		csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
		retval.start = input.LT(1);
		int type_parameter_constraints_clauses_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal521=null;
		ParserRuleReturnScope type_parameter_constraints_clause520 =null;
		ParserRuleReturnScope type_parameter_constraints_clause522 =null;

		CommonTree char_literal521_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:769:37: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:770:9: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6960);
			type_parameter_constraints_clause520=type_parameter_constraints_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause520.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:770:45: ( ',' type_parameter_constraints_clause )*
			loop190:
			while (true) {
				int alt190=2;
				int LA190_0 = input.LA(1);
				if ( (LA190_0==74) ) {
					alt190=1;
				}

				switch (alt190) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:770:46: ',' type_parameter_constraints_clause
					{
					char_literal521=(Token)match(input,74,FOLLOW_74_in_type_parameter_constraints_clauses6965); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal521_tree = (CommonTree)adaptor.create(char_literal521);
					adaptor.addChild(root_0, char_literal521_tree);
					}

					pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6969);
					type_parameter_constraints_clause522=type_parameter_constraints_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause522.getTree());

					}
					break;

				default :
					break loop190;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_parameter_constraints_clauses"


	public static class type_parameter_constraints_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_parameter_constraints_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:772:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
	public final csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
		csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
		retval.start = input.LT(1);
		int type_parameter_constraints_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal523=null;
		Token char_literal525=null;
		ParserRuleReturnScope type_variable_name524 =null;
		ParserRuleReturnScope type_parameter_constraint_list526 =null;

		CommonTree string_literal523_tree=null;
		CommonTree char_literal525_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:772:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:773:2: 'where' type_variable_name ':' type_parameter_constraint_list
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal523=(Token)match(input,194,FOLLOW_194_in_type_parameter_constraints_clause6980); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal523_tree = (CommonTree)adaptor.create(string_literal523);
			adaptor.addChild(root_0, string_literal523_tree);
			}

			pushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause6984);
			type_variable_name524=type_variable_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name524.getTree());

			char_literal525=(Token)match(input,79,FOLLOW_79_in_type_parameter_constraints_clause6988); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal525_tree = (CommonTree)adaptor.create(char_literal525);
			adaptor.addChild(root_0, char_literal525_tree);
			}

			pushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause6992);
			type_parameter_constraint_list526=type_parameter_constraint_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraint_list526.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 190, type_parameter_constraints_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_parameter_constraints_clause"


	public static class type_parameter_constraint_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_parameter_constraint_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:775:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
	public final csParser.type_parameter_constraint_list_return type_parameter_constraint_list() throws RecognitionException {
		csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
		retval.start = input.LT(1);
		int type_parameter_constraint_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set527=null;
		Token char_literal528=null;
		Token char_literal530=null;
		Token char_literal533=null;
		ParserRuleReturnScope secondary_constraint_list529 =null;
		ParserRuleReturnScope constructor_constraint531 =null;
		ParserRuleReturnScope secondary_constraint_list532 =null;
		ParserRuleReturnScope constructor_constraint534 =null;
		ParserRuleReturnScope constructor_constraint535 =null;

		CommonTree set527_tree=null;
		CommonTree char_literal528_tree=null;
		CommonTree char_literal530_tree=null;
		CommonTree char_literal533_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:775:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
			int alt194=3;
			switch ( input.LA(1) ) {
			case 111:
			case 178:
				{
				alt194=1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt194=2;
				}
				break;
			case 150:
				{
				alt194=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}
			switch (alt194) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:776:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
					{
					root_0 = (CommonTree)adaptor.nil();


					set527=input.LT(1);
					if ( input.LA(1)==111||input.LA(1)==178 ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set527));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:776:28: ( ',' secondary_constraint_list )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==74) ) {
						int LA191_1 = input.LA(2);
						if ( (LA191_1==194) ) {
							int LA191_3 = input.LA(3);
							if ( (LA191_3==DOT||LA191_3==SEMI||LA191_3==74||(LA191_3 >= 80 && LA191_3 <= 81)||LA191_3==197) ) {
								alt191=1;
							}
						}
						else if ( (LA191_1==IDENTIFIER||LA191_1==95||(LA191_1 >= 97 && LA191_1 <= 98)||(LA191_1 >= 100 && LA191_1 <= 101)||LA191_1==105||LA191_1==117||LA191_1==120||LA191_1==122||LA191_1==126||LA191_1==132||LA191_1==135||LA191_1==141||(LA191_1 >= 143 && LA191_1 <= 144)||(LA191_1 >= 147 && LA191_1 <= 148)||LA191_1==152||LA191_1==154||LA191_1==157||LA191_1==160||LA191_1==162||LA191_1==167||(LA191_1 >= 171 && LA191_1 <= 172)||LA191_1==183||LA191_1==190||LA191_1==196) ) {
							alt191=1;
						}
					}
					switch (alt191) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:776:29: ',' secondary_constraint_list
							{
							char_literal528=(Token)match(input,74,FOLLOW_74_in_type_parameter_constraint_list7066); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal528_tree = (CommonTree)adaptor.create(char_literal528);
							adaptor.addChild(root_0, char_literal528_tree);
							}

							pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7070);
							secondary_constraint_list529=secondary_constraint_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list529.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:776:65: ( ',' constructor_constraint )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==74) ) {
						int LA192_1 = input.LA(2);
						if ( (LA192_1==150) ) {
							alt192=1;
						}
					}
					switch (alt192) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:776:66: ',' constructor_constraint
							{
							char_literal530=(Token)match(input,74,FOLLOW_74_in_type_parameter_constraint_list7077); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal530_tree = (CommonTree)adaptor.create(char_literal530);
							adaptor.addChild(root_0, char_literal530_tree);
							}

							pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7081);
							constructor_constraint531=constructor_constraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint531.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:777:4: secondary_constraint_list ( ',' constructor_constraint )?
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7088);
					secondary_constraint_list532=secondary_constraint_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list532.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:777:32: ( ',' constructor_constraint )?
					int alt193=2;
					int LA193_0 = input.LA(1);
					if ( (LA193_0==74) ) {
						int LA193_1 = input.LA(2);
						if ( (LA193_1==150) ) {
							alt193=1;
						}
					}
					switch (alt193) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:777:33: ',' constructor_constraint
							{
							char_literal533=(Token)match(input,74,FOLLOW_74_in_type_parameter_constraint_list7093); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal533_tree = (CommonTree)adaptor.create(char_literal533);
							adaptor.addChild(root_0, char_literal533_tree);
							}

							pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7097);
							constructor_constraint534=constructor_constraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint534.getTree());

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:778:4: constructor_constraint
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list7104);
					constructor_constraint535=constructor_constraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint535.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 191, type_parameter_constraint_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_parameter_constraint_list"


	public static class secondary_constraint_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "secondary_constraint_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:783:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
	public final csParser.secondary_constraint_list_return secondary_constraint_list() throws RecognitionException {
		csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
		retval.start = input.LT(1);
		int secondary_constraint_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal537=null;
		ParserRuleReturnScope secondary_constraint536 =null;
		ParserRuleReturnScope secondary_constraint538 =null;

		CommonTree char_literal537_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:783:26: ( secondary_constraint ( ',' secondary_constraint )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:784:2: secondary_constraint ( ',' secondary_constraint )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list7116);
			secondary_constraint536=secondary_constraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint536.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:784:23: ( ',' secondary_constraint )*
			loop195:
			while (true) {
				int alt195=2;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==74) ) {
					int LA195_1 = input.LA(2);
					if ( (LA195_1==194) ) {
						int LA195_3 = input.LA(3);
						if ( (LA195_3==DOT||LA195_3==SEMI||LA195_3==74||(LA195_3 >= 80 && LA195_3 <= 81)||LA195_3==197) ) {
							alt195=1;
						}

					}
					else if ( (LA195_1==IDENTIFIER||LA195_1==95||(LA195_1 >= 97 && LA195_1 <= 98)||(LA195_1 >= 100 && LA195_1 <= 101)||LA195_1==105||LA195_1==117||LA195_1==120||LA195_1==122||LA195_1==126||LA195_1==132||LA195_1==135||LA195_1==141||(LA195_1 >= 143 && LA195_1 <= 144)||(LA195_1 >= 147 && LA195_1 <= 148)||LA195_1==152||LA195_1==154||LA195_1==157||LA195_1==160||LA195_1==162||LA195_1==167||(LA195_1 >= 171 && LA195_1 <= 172)||LA195_1==183||LA195_1==190||LA195_1==196) ) {
						alt195=1;
					}

				}

				switch (alt195) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:784:24: ',' secondary_constraint
					{
					char_literal537=(Token)match(input,74,FOLLOW_74_in_secondary_constraint_list7119); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal537_tree = (CommonTree)adaptor.create(char_literal537);
					adaptor.addChild(root_0, char_literal537_tree);
					}

					pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list7121);
					secondary_constraint538=secondary_constraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint538.getTree());

					}
					break;

				default :
					break loop195;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 192, secondary_constraint_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "secondary_constraint_list"


	public static class secondary_constraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "secondary_constraint"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:785:1: secondary_constraint : type_name ;
	public final csParser.secondary_constraint_return secondary_constraint() throws RecognitionException {
		csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
		retval.start = input.LT(1);
		int secondary_constraint_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope type_name539 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:785:21: ( type_name )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:786:2: type_name
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_name_in_secondary_constraint7131);
			type_name539=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name539.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 193, secondary_constraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "secondary_constraint"


	public static class type_variable_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type_variable_name"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:787:1: type_variable_name : identifier ;
	public final csParser.type_variable_name_return type_variable_name() throws RecognitionException {
		csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
		retval.start = input.LT(1);
		int type_variable_name_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope identifier540 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:787:19: ( identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:788:2: identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_type_variable_name7141);
			identifier540=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier540.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 194, type_variable_name_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "type_variable_name"


	public static class constructor_constraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constructor_constraint"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:789:1: constructor_constraint : 'new' '(' ')' ;
	public final csParser.constructor_constraint_return constructor_constraint() throws RecognitionException {
		csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
		retval.start = input.LT(1);
		int constructor_constraint_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal541=null;
		Token char_literal542=null;
		Token char_literal543=null;

		CommonTree string_literal541_tree=null;
		CommonTree char_literal542_tree=null;
		CommonTree char_literal543_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:789:23: ( 'new' '(' ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:790:2: 'new' '(' ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal541=(Token)match(input,150,FOLLOW_150_in_constructor_constraint7149); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal541_tree = (CommonTree)adaptor.create(string_literal541);
			adaptor.addChild(root_0, string_literal541_tree);
			}

			char_literal542=(Token)match(input,68,FOLLOW_68_in_constructor_constraint7153); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal542_tree = (CommonTree)adaptor.create(char_literal542);
			adaptor.addChild(root_0, char_literal542_tree);
			}

			char_literal543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint7157); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal543_tree = (CommonTree)adaptor.create(char_literal543);
			adaptor.addChild(root_0, char_literal543_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 195, constructor_constraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constructor_constraint"


	public static class return_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "return_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:791:1: return_type : ( type | 'void' );
	public final csParser.return_type_return return_type() throws RecognitionException {
		csParser.return_type_return retval = new csParser.return_type_return();
		retval.start = input.LT(1);
		int return_type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal545=null;
		ParserRuleReturnScope type544 =null;

		CommonTree string_literal545_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:791:12: ( type | 'void' )
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==IDENTIFIER||LA196_0==95||(LA196_0 >= 97 && LA196_0 <= 98)||(LA196_0 >= 100 && LA196_0 <= 101)||LA196_0==103||(LA196_0 >= 105 && LA196_0 <= 106)||LA196_0==109||LA196_0==114||LA196_0==117||(LA196_0 >= 119 && LA196_0 <= 120)||LA196_0==122||LA196_0==126||LA196_0==129||LA196_0==132||LA196_0==135||LA196_0==138||LA196_0==141||(LA196_0 >= 143 && LA196_0 <= 144)||(LA196_0 >= 146 && LA196_0 <= 148)||(LA196_0 >= 151 && LA196_0 <= 152)||LA196_0==154||LA196_0==157||LA196_0==160||LA196_0==162||LA196_0==167||LA196_0==169||(LA196_0 >= 171 && LA196_0 <= 173)||LA196_0==177||LA196_0==183||(LA196_0 >= 185 && LA196_0 <= 186)||(LA196_0 >= 189 && LA196_0 <= 190)||LA196_0==194||LA196_0==196) ) {
				alt196=1;
			}
			else if ( (LA196_0==192) ) {
				int LA196_2 = input.LA(2);
				if ( (LA196_2==69) ) {
					alt196=1;
				}
				else if ( (LA196_2==IDENTIFIER||LA196_2==95||(LA196_2 >= 97 && LA196_2 <= 98)||(LA196_2 >= 100 && LA196_2 <= 101)||LA196_2==105||LA196_2==117||LA196_2==120||LA196_2==122||LA196_2==126||LA196_2==132||LA196_2==135||LA196_2==141||(LA196_2 >= 143 && LA196_2 <= 144)||(LA196_2 >= 147 && LA196_2 <= 148)||LA196_2==152||LA196_2==154||LA196_2==157||LA196_2==160||LA196_2==162||LA196_2==167||(LA196_2 >= 171 && LA196_2 <= 172)||LA196_2==183||LA196_2==190||LA196_2==194||LA196_2==196) ) {
					alt196=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 196, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 196, 0, input);
				throw nvae;
			}

			switch (alt196) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:792:2: type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_type_in_return_type7165);
					type544=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type544.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:793:5: 'void'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal545=(Token)match(input,192,FOLLOW_192_in_return_type7171); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal545_tree = (CommonTree)adaptor.create(string_literal545);
					adaptor.addChild(root_0, string_literal545_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 196, return_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "return_type"


	public static class formal_parameter_list_return extends ParserRuleReturnScope {
		public formal_parameter_list t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "formal_parameter_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:794:1: formal_parameter_list returns [formal_parameter_list t] : a= formal_parameter ( ',' a= formal_parameter )* ;
	public final csParser.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
		csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
		retval.start = input.LT(1);
		int formal_parameter_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal546=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal546_tree=null;

		formal_parameter_list res=new formal_parameter_list();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:796:39: (a= formal_parameter ( ',' a= formal_parameter )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:797:9: a= formal_parameter ( ',' a= formal_parameter )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7204);
			a=formal_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.formal_parameter_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:797:45: ( ',' a= formal_parameter )*
			loop197:
			while (true) {
				int alt197=2;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==74) ) {
					alt197=1;
				}

				switch (alt197) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:797:46: ',' a= formal_parameter
					{
					char_literal546=(Token)match(input,74,FOLLOW_74_in_formal_parameter_list7209); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal546_tree = (CommonTree)adaptor.create(char_literal546);
					adaptor.addChild(root_0, char_literal546_tree);
					}

					pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7213);
					a=formal_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.formal_parameter_return)a).t:null));}
					}
					break;

				default :
					break loop197;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 197, formal_parameter_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formal_parameter_list"


	public static class formal_parameter_return extends ParserRuleReturnScope {
		public formal_parameter t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "formal_parameter"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:799:1: formal_parameter returns [formal_parameter t] : ( (a= attributes )? (b= fixed_parameter |c= parameter_array ) | '__arglist' );
	public final csParser.formal_parameter_return formal_parameter() throws RecognitionException {
		csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
		retval.start = input.LT(1);
		int formal_parameter_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal547=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree string_literal547_tree=null;

		CsharpNode res=null;
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:801:32: ( (a= attributes )? (b= fixed_parameter |c= parameter_array ) | '__arglist' )
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==IDENTIFIER||LA200_0==91||(LA200_0 >= 97 && LA200_0 <= 98)||(LA200_0 >= 100 && LA200_0 <= 101)||LA200_0==103||(LA200_0 >= 105 && LA200_0 <= 106)||LA200_0==109||LA200_0==114||LA200_0==117||(LA200_0 >= 119 && LA200_0 <= 120)||LA200_0==122||LA200_0==126||LA200_0==129||LA200_0==132||LA200_0==135||LA200_0==138||LA200_0==141||(LA200_0 >= 143 && LA200_0 <= 144)||(LA200_0 >= 146 && LA200_0 <= 148)||(LA200_0 >= 151 && LA200_0 <= 152)||(LA200_0 >= 154 && LA200_0 <= 155)||(LA200_0 >= 157 && LA200_0 <= 158)||LA200_0==160||LA200_0==162||(LA200_0 >= 166 && LA200_0 <= 167)||LA200_0==169||(LA200_0 >= 171 && LA200_0 <= 173)||LA200_0==177||LA200_0==180||LA200_0==183||(LA200_0 >= 185 && LA200_0 <= 186)||(LA200_0 >= 189 && LA200_0 <= 190)||LA200_0==192||LA200_0==194||LA200_0==196) ) {
				alt200=1;
			}
			else if ( (LA200_0==95) ) {
				int LA200_2 = input.LA(2);
				if ( (LA200_2==DOT||LA200_2==IDENTIFIER||LA200_2==69||(LA200_2 >= 80 && LA200_2 <= 81)||LA200_2==89||LA200_2==91||LA200_2==95||(LA200_2 >= 97 && LA200_2 <= 98)||(LA200_2 >= 100 && LA200_2 <= 101)||LA200_2==105||LA200_2==117||LA200_2==120||LA200_2==122||LA200_2==126||LA200_2==132||LA200_2==135||LA200_2==141||(LA200_2 >= 143 && LA200_2 <= 144)||(LA200_2 >= 147 && LA200_2 <= 148)||LA200_2==152||LA200_2==154||LA200_2==157||LA200_2==160||LA200_2==162||LA200_2==167||(LA200_2 >= 171 && LA200_2 <= 172)||LA200_2==183||LA200_2==190||LA200_2==194||LA200_2==196) ) {
					alt200=1;
				}
				else if ( (LA200_2==RPAREN||LA200_2==74||LA200_2==92) ) {
					alt200=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 200, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 200, 0, input);
				throw nvae;
			}

			switch (alt200) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:2: (a= attributes )? (b= fixed_parameter |c= parameter_array )
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:3: (a= attributes )?
					int alt198=2;
					int LA198_0 = input.LA(1);
					if ( (LA198_0==91) ) {
						alt198=1;
					}
					switch (alt198) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:3: a= attributes
							{
							pushFollow(FOLLOW_attributes_in_formal_parameter7244);
							a=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:18: (b= fixed_parameter |c= parameter_array )
					int alt199=2;
					int LA199_0 = input.LA(1);
					if ( (LA199_0==IDENTIFIER||LA199_0==95||(LA199_0 >= 97 && LA199_0 <= 98)||(LA199_0 >= 100 && LA199_0 <= 101)||LA199_0==103||(LA199_0 >= 105 && LA199_0 <= 106)||LA199_0==109||LA199_0==114||LA199_0==117||(LA199_0 >= 119 && LA199_0 <= 120)||LA199_0==122||LA199_0==126||LA199_0==129||LA199_0==132||LA199_0==135||LA199_0==138||LA199_0==141||(LA199_0 >= 143 && LA199_0 <= 144)||(LA199_0 >= 146 && LA199_0 <= 148)||(LA199_0 >= 151 && LA199_0 <= 152)||(LA199_0 >= 154 && LA199_0 <= 155)||LA199_0==157||LA199_0==160||LA199_0==162||(LA199_0 >= 166 && LA199_0 <= 167)||LA199_0==169||(LA199_0 >= 171 && LA199_0 <= 173)||LA199_0==177||LA199_0==180||LA199_0==183||(LA199_0 >= 185 && LA199_0 <= 186)||(LA199_0 >= 189 && LA199_0 <= 190)||LA199_0==192||LA199_0==194||LA199_0==196) ) {
						alt199=1;
					}
					else if ( (LA199_0==158) ) {
						alt199=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 199, 0, input);
						throw nvae;
					}

					switch (alt199) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:19: b= fixed_parameter
							{
							pushFollow(FOLLOW_fixed_parameter_in_formal_parameter7252);
							b=fixed_parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

							if ( state.backtracking==0 ) {res=(b!=null?((csParser.fixed_parameter_return)b).t:null);}
							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:802:51: c= parameter_array
							{
							pushFollow(FOLLOW_parameter_array_in_formal_parameter7260);
							c=parameter_array();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

							if ( state.backtracking==0 ) {res=(c!=null?((csParser.parameter_array_return)c).t:null);}
							}
							break;

					}

					if ( state.backtracking==0 ) {retval.t = new formal_parameter((a!=null?((csParser.attributes_return)a).t:null), res);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:803:4: '__arglist'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal547=(Token)match(input,95,FOLLOW_95_in_formal_parameter7270); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal547_tree = (CommonTree)adaptor.create(string_literal547);
					adaptor.addChild(root_0, string_literal547_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 198, formal_parameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formal_parameter"


	public static class fixed_parameters_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_parameters"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:804:1: fixed_parameters returns [UnknownNode t] : fixed_parameter ( ',' fixed_parameter )* ;
	public final csParser.fixed_parameters_return fixed_parameters() throws RecognitionException {
		csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
		retval.start = input.LT(1);
		int fixed_parameters_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal549=null;
		ParserRuleReturnScope fixed_parameter548 =null;
		ParserRuleReturnScope fixed_parameter550 =null;

		CommonTree char_literal549_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:805:37: ( fixed_parameter ( ',' fixed_parameter )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:806:2: fixed_parameter ( ',' fixed_parameter )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters7290);
			fixed_parameter548=fixed_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter548.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:806:20: ( ',' fixed_parameter )*
			loop201:
			while (true) {
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==74) ) {
					alt201=1;
				}

				switch (alt201) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:806:21: ',' fixed_parameter
					{
					char_literal549=(Token)match(input,74,FOLLOW_74_in_fixed_parameters7295); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal549_tree = (CommonTree)adaptor.create(char_literal549);
					adaptor.addChild(root_0, char_literal549_tree);
					}

					pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters7299);
					fixed_parameter550=fixed_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter550.getTree());

					}
					break;

				default :
					break loop201;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 199, fixed_parameters_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_parameters"


	public static class fixed_parameter_return extends ParserRuleReturnScope {
		public fixed_parameter t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_parameter"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:808:1: fixed_parameter returns [fixed_parameter t] : (a= parameter_modifier )? b= type c= identifier (d= default_argument )? ;
	public final csParser.fixed_parameter_return fixed_parameter() throws RecognitionException {
		csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
		retval.start = input.LT(1);
		int fixed_parameter_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:809:32: ( (a= parameter_modifier )? b= type c= identifier (d= default_argument )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:810:2: (a= parameter_modifier )? b= type c= identifier (d= default_argument )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:810:3: (a= parameter_modifier )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==155||LA202_0==166||LA202_0==180) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:810:3: a= parameter_modifier
					{
					pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter7323);
					a=parameter_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_type_in_fixed_parameter7330);
			b=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			pushFollow(FOLLOW_identifier_in_fixed_parameter7336);
			c=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:810:51: (d= default_argument )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==85) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:810:51: d= default_argument
					{
					pushFollow(FOLLOW_default_argument_in_fixed_parameter7342);
					d=default_argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new fixed_parameter((a!=null?((csParser.parameter_modifier_return)a).t:null),(b!=null?((csParser.type_return)b).t:null),(c!=null?((csParser.identifier_return)c).t:null),(d!=null?((csParser.default_argument_return)d).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 200, fixed_parameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_parameter"


	public static class default_argument_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "default_argument"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:812:1: default_argument returns [UnknownNode t] : '=' expression ;
	public final csParser.default_argument_return default_argument() throws RecognitionException {
		csParser.default_argument_return retval = new csParser.default_argument_return();
		retval.start = input.LT(1);
		int default_argument_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal551=null;
		ParserRuleReturnScope expression552 =null;

		CommonTree char_literal551_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:813:37: ( '=' expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:814:2: '=' expression
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal551=(Token)match(input,85,FOLLOW_85_in_default_argument7365); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal551_tree = (CommonTree)adaptor.create(char_literal551);
			adaptor.addChild(root_0, char_literal551_tree);
			}

			pushFollow(FOLLOW_expression_in_default_argument7367);
			expression552=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression552.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 201, default_argument_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "default_argument"


	public static class parameter_modifier_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parameter_modifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:815:1: parameter_modifier returns [UnknownNode t] : ( 'ref' | 'out' | 'this' );
	public final csParser.parameter_modifier_return parameter_modifier() throws RecognitionException {
		csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
		retval.start = input.LT(1);
		int parameter_modifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set553=null;

		CommonTree set553_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:816:37: ( 'ref' | 'out' | 'this' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set553=input.LT(1);
			if ( input.LA(1)==155||input.LA(1)==166||input.LA(1)==180 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set553));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 202, parameter_modifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameter_modifier"


	public static class parameter_array_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parameter_array"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:818:1: parameter_array returns [UnknownNode t] : 'params' type identifier ;
	public final csParser.parameter_array_return parameter_array() throws RecognitionException {
		csParser.parameter_array_return retval = new csParser.parameter_array_return();
		retval.start = input.LT(1);
		int parameter_array_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal554=null;
		ParserRuleReturnScope type555 =null;
		ParserRuleReturnScope identifier556 =null;

		CommonTree string_literal554_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:819:37: ( 'params' type identifier )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:820:2: 'params' type identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal554=(Token)match(input,158,FOLLOW_158_in_parameter_array7412); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal554_tree = (CommonTree)adaptor.create(string_literal554);
			adaptor.addChild(root_0, string_literal554_tree);
			}

			pushFollow(FOLLOW_type_in_parameter_array7416);
			type555=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type555.getTree());

			pushFollow(FOLLOW_identifier_in_parameter_array7420);
			identifier556=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier556.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 203, parameter_array_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameter_array"


	public static class interface_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:823:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
	public final csParser.interface_declaration_return interface_declaration() throws RecognitionException {
		csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
		retval.start = input.LT(1);
		int interface_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal557=null;
		Token char_literal563=null;
		ParserRuleReturnScope identifier558 =null;
		ParserRuleReturnScope variant_generic_parameter_list559 =null;
		ParserRuleReturnScope interface_base560 =null;
		ParserRuleReturnScope type_parameter_constraints_clauses561 =null;
		ParserRuleReturnScope interface_body562 =null;

		CommonTree string_literal557_tree=null;
		CommonTree char_literal563_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:823:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:824:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal557=(Token)match(input,139,FOLLOW_139_in_interface_declaration7430); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal557_tree = (CommonTree)adaptor.create(string_literal557);
			adaptor.addChild(root_0, string_literal557_tree);
			}

			pushFollow(FOLLOW_identifier_in_interface_declaration7434);
			identifier558=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier558.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:824:29: ( variant_generic_parameter_list )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==81) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:824:29: variant_generic_parameter_list
					{
					pushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration7438);
					variant_generic_parameter_list559=variant_generic_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_generic_parameter_list559.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:6: ( interface_base )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==79) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:6: interface_base
					{
					pushFollow(FOLLOW_interface_base_in_interface_declaration7447);
					interface_base560=interface_base();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_base560.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:24: ( type_parameter_constraints_clauses )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==194) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:24: type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration7452);
					type_parameter_constraints_clauses561=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses561.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_interface_body_in_interface_declaration7457);
			interface_body562=interface_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_body562.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:79: ( ';' )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==SEMI) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:825:79: ';'
					{
					char_literal563=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_declaration7461); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal563_tree = (CommonTree)adaptor.create(char_literal563);
					adaptor.addChild(root_0, char_literal563_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 204, interface_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_declaration"


	public static class interface_modifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:826:1: interface_modifiers : ( modifier )+ ;
	public final csParser.interface_modifiers_return interface_modifiers() throws RecognitionException {
		csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
		retval.start = input.LT(1);
		int interface_modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope modifier564 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:826:20: ( ( modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:827:2: ( modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:827:2: ( modifier )+
			int cnt208=0;
			loop208:
			while (true) {
				int alt208=2;
				int LA208_0 = input.LA(1);
				if ( (LA208_0==96||LA208_0==125||LA208_0==140||LA208_0==150||LA208_0==156||LA208_0==161||(LA208_0 >= 163 && LA208_0 <= 165)||LA208_0==170||LA208_0==176||LA208_0==188||LA208_0==191||LA208_0==193) ) {
					alt208=1;
				}

				switch (alt208) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:827:2: modifier
					{
					pushFollow(FOLLOW_modifier_in_interface_modifiers7471);
					modifier564=modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier564.getTree());

					}
					break;

				default :
					if ( cnt208 >= 1 ) break loop208;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(208, input);
					throw eee;
				}
				cnt208++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 205, interface_modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_modifiers"


	public static class interface_base_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_base"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:828:1: interface_base : ':' interface_type_list ;
	public final csParser.interface_base_return interface_base() throws RecognitionException {
		csParser.interface_base_return retval = new csParser.interface_base_return();
		retval.start = input.LT(1);
		int interface_base_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal565=null;
		ParserRuleReturnScope interface_type_list566 =null;

		CommonTree char_literal565_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:828:15: ( ':' interface_type_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:829:5: ':' interface_type_list
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal565=(Token)match(input,79,FOLLOW_79_in_interface_base7484); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal565_tree = (CommonTree)adaptor.create(char_literal565);
			adaptor.addChild(root_0, char_literal565_tree);
			}

			pushFollow(FOLLOW_interface_type_list_in_interface_base7486);
			interface_type_list566=interface_type_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list566.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 206, interface_base_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_base"


	public static class interface_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:830:1: interface_body : '{' ( interface_member_declarations )? '}' ;
	public final csParser.interface_body_return interface_body() throws RecognitionException {
		csParser.interface_body_return retval = new csParser.interface_body_return();
		retval.start = input.LT(1);
		int interface_body_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal567=null;
		Token char_literal569=null;
		ParserRuleReturnScope interface_member_declarations568 =null;

		CommonTree char_literal567_tree=null;
		CommonTree char_literal569_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:830:15: ( '{' ( interface_member_declarations )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:831:2: '{' ( interface_member_declarations )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal567=(Token)match(input,197,FOLLOW_197_in_interface_body7494); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal567_tree = (CommonTree)adaptor.create(char_literal567);
			adaptor.addChild(root_0, char_literal567_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:831:8: ( interface_member_declarations )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==IDENTIFIER||LA209_0==91||(LA209_0 >= 95 && LA209_0 <= 98)||(LA209_0 >= 100 && LA209_0 <= 101)||LA209_0==103||(LA209_0 >= 105 && LA209_0 <= 106)||LA209_0==109||LA209_0==114||LA209_0==117||(LA209_0 >= 119 && LA209_0 <= 120)||(LA209_0 >= 122 && LA209_0 <= 123)||(LA209_0 >= 125 && LA209_0 <= 126)||LA209_0==129||LA209_0==132||LA209_0==135||LA209_0==138||(LA209_0 >= 140 && LA209_0 <= 141)||(LA209_0 >= 143 && LA209_0 <= 144)||(LA209_0 >= 146 && LA209_0 <= 148)||(LA209_0 >= 150 && LA209_0 <= 152)||LA209_0==154||(LA209_0 >= 156 && LA209_0 <= 157)||(LA209_0 >= 160 && LA209_0 <= 165)||LA209_0==167||(LA209_0 >= 169 && LA209_0 <= 173)||(LA209_0 >= 176 && LA209_0 <= 177)||LA209_0==183||(LA209_0 >= 185 && LA209_0 <= 186)||(LA209_0 >= 188 && LA209_0 <= 194)||LA209_0==196) ) {
				alt209=1;
			}
			switch (alt209) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:831:8: interface_member_declarations
					{
					pushFollow(FOLLOW_interface_member_declarations_in_interface_body7498);
					interface_member_declarations568=interface_member_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_member_declarations568.getTree());

					}
					break;

			}

			char_literal569=(Token)match(input,201,FOLLOW_201_in_interface_body7503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal569_tree = (CommonTree)adaptor.create(char_literal569);
			adaptor.addChild(root_0, char_literal569_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 207, interface_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_body"


	public static class interface_member_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_member_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:832:1: interface_member_declarations : ( interface_member_declaration )+ ;
	public final csParser.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
		csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
		retval.start = input.LT(1);
		int interface_member_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope interface_member_declaration570 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:832:30: ( ( interface_member_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:833:2: ( interface_member_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:833:2: ( interface_member_declaration )+
			int cnt210=0;
			loop210:
			while (true) {
				int alt210=2;
				int LA210_0 = input.LA(1);
				if ( (LA210_0==IDENTIFIER||LA210_0==91||(LA210_0 >= 95 && LA210_0 <= 98)||(LA210_0 >= 100 && LA210_0 <= 101)||LA210_0==103||(LA210_0 >= 105 && LA210_0 <= 106)||LA210_0==109||LA210_0==114||LA210_0==117||(LA210_0 >= 119 && LA210_0 <= 120)||(LA210_0 >= 122 && LA210_0 <= 123)||(LA210_0 >= 125 && LA210_0 <= 126)||LA210_0==129||LA210_0==132||LA210_0==135||LA210_0==138||(LA210_0 >= 140 && LA210_0 <= 141)||(LA210_0 >= 143 && LA210_0 <= 144)||(LA210_0 >= 146 && LA210_0 <= 148)||(LA210_0 >= 150 && LA210_0 <= 152)||LA210_0==154||(LA210_0 >= 156 && LA210_0 <= 157)||(LA210_0 >= 160 && LA210_0 <= 165)||LA210_0==167||(LA210_0 >= 169 && LA210_0 <= 173)||(LA210_0 >= 176 && LA210_0 <= 177)||LA210_0==183||(LA210_0 >= 185 && LA210_0 <= 186)||(LA210_0 >= 188 && LA210_0 <= 194)||LA210_0==196) ) {
					alt210=1;
				}

				switch (alt210) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:833:2: interface_member_declaration
					{
					pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations7511);
					interface_member_declaration570=interface_member_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_member_declaration570.getTree());

					}
					break;

				default :
					if ( cnt210 >= 1 ) break loop210;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(210, input);
					throw eee;
				}
				cnt210++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 208, interface_member_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_member_declarations"


	public static class interface_member_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_member_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:834:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
	public final csParser.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
		csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
		retval.start = input.LT(1);
		int interface_member_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal573=null;
		ParserRuleReturnScope attributes571 =null;
		ParserRuleReturnScope modifiers572 =null;
		ParserRuleReturnScope interface_method_declaration574 =null;
		ParserRuleReturnScope interface_event_declaration575 =null;
		ParserRuleReturnScope type576 =null;
		ParserRuleReturnScope interface_method_declaration577 =null;
		ParserRuleReturnScope interface_property_declaration578 =null;
		ParserRuleReturnScope interface_indexer_declaration579 =null;

		CommonTree string_literal573_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:834:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:835:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:835:2: ( attributes )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==91) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:835:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_interface_member_declaration7520);
					attributes571=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes571.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:835:17: ( modifiers )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==96||LA212_0==125||LA212_0==140||LA212_0==150||LA212_0==156||LA212_0==161||(LA212_0 >= 163 && LA212_0 <= 165)||LA212_0==170||LA212_0==176||LA212_0==188||LA212_0==191||LA212_0==193) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:835:17: modifiers
					{
					pushFollow(FOLLOW_modifiers_in_interface_member_declaration7526);
					modifiers572=modifiers();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers572.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:836:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			int alt214=3;
			switch ( input.LA(1) ) {
			case 192:
				{
				int LA214_1 = input.LA(2);
				if ( (LA214_1==IDENTIFIER||LA214_1==95||(LA214_1 >= 97 && LA214_1 <= 98)||(LA214_1 >= 100 && LA214_1 <= 101)||LA214_1==105||LA214_1==117||LA214_1==120||LA214_1==122||LA214_1==126||LA214_1==132||LA214_1==135||LA214_1==141||(LA214_1 >= 143 && LA214_1 <= 144)||(LA214_1 >= 147 && LA214_1 <= 148)||LA214_1==152||LA214_1==154||LA214_1==157||LA214_1==160||LA214_1==162||LA214_1==167||(LA214_1 >= 171 && LA214_1 <= 172)||LA214_1==183||LA214_1==190||LA214_1==194||LA214_1==196) ) {
					alt214=1;
				}
				else if ( (LA214_1==69) ) {
					alt214=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 214, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 123:
				{
				alt214=2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt214=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}
			switch (alt214) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:836:4: 'void' interface_method_declaration
					{
					string_literal573=(Token)match(input,192,FOLLOW_192_in_interface_member_declaration7532); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal573_tree = (CommonTree)adaptor.create(string_literal573);
					adaptor.addChild(root_0, string_literal573_tree);
					}

					pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration7536);
					interface_method_declaration574=interface_method_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration574.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:837:5: interface_event_declaration
					{
					pushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration7542);
					interface_event_declaration575=interface_event_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_event_declaration575.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:838:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
					{
					pushFollow(FOLLOW_type_in_interface_member_declaration7548);
					type576=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type576.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:838:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
					int alt213=3;
					int LA213_0 = input.LA(1);
					if ( (LA213_0==IDENTIFIER||LA213_0==95||(LA213_0 >= 97 && LA213_0 <= 98)||(LA213_0 >= 100 && LA213_0 <= 101)||LA213_0==105||LA213_0==117||LA213_0==120||LA213_0==122||LA213_0==126||LA213_0==132||LA213_0==135||LA213_0==141||(LA213_0 >= 143 && LA213_0 <= 144)||(LA213_0 >= 147 && LA213_0 <= 148)||LA213_0==152||LA213_0==154||LA213_0==157||LA213_0==160||LA213_0==162||LA213_0==167||(LA213_0 >= 171 && LA213_0 <= 172)||LA213_0==183||LA213_0==190||LA213_0==194||LA213_0==196) ) {
						int LA213_1 = input.LA(2);
						if ( (LA213_1==81) && (synpred26_cs())) {
							alt213=1;
						}
						else if ( (LA213_1==68) && (synpred26_cs())) {
							alt213=1;
						}
						else if ( (LA213_1==197) && (synpred27_cs())) {
							alt213=2;
						}

					}
					else if ( (LA213_0==180) ) {
						alt213=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 213, 0, input);
						throw nvae;
					}

					switch (alt213) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:838:14: ( member_name '(' )=> interface_method_declaration
							{
							pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration7564);
							interface_method_declaration577=interface_method_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration577.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:839:14: ( member_name '{' )=> interface_property_declaration
							{
							pushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration7589);
							interface_property_declaration578=interface_property_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_property_declaration578.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:840:8: interface_indexer_declaration
							{
							pushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration7599);
							interface_indexer_declaration579=interface_indexer_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_indexer_declaration579.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 209, interface_member_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_member_declaration"


	public static class interface_property_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_property_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:843:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
	public final csParser.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
		csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
		retval.start = input.LT(1);
		int interface_property_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal581=null;
		Token char_literal583=null;
		ParserRuleReturnScope identifier580 =null;
		ParserRuleReturnScope interface_accessor_declarations582 =null;

		CommonTree char_literal581_tree=null;
		CommonTree char_literal583_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:843:31: ( identifier '{' interface_accessor_declarations '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:844:2: identifier '{' interface_accessor_declarations '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_interface_property_declaration7616);
			identifier580=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier580.getTree());

			char_literal581=(Token)match(input,197,FOLLOW_197_in_interface_property_declaration7620); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal581_tree = (CommonTree)adaptor.create(char_literal581);
			adaptor.addChild(root_0, char_literal581_tree);
			}

			pushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration7624);
			interface_accessor_declarations582=interface_accessor_declarations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations582.getTree());

			char_literal583=(Token)match(input,201,FOLLOW_201_in_interface_property_declaration7628); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal583_tree = (CommonTree)adaptor.create(char_literal583);
			adaptor.addChild(root_0, char_literal583_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 210, interface_property_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_property_declaration"


	public static class interface_method_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_method_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:845:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	public final csParser.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
		csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
		retval.start = input.LT(1);
		int interface_method_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal586=null;
		Token char_literal588=null;
		Token char_literal590=null;
		ParserRuleReturnScope identifier584 =null;
		ParserRuleReturnScope generic_argument_list585 =null;
		ParserRuleReturnScope formal_parameter_list587 =null;
		ParserRuleReturnScope type_parameter_constraints_clauses589 =null;

		CommonTree char_literal586_tree=null;
		CommonTree char_literal588_tree=null;
		CommonTree char_literal590_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:845:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:846:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_interface_method_declaration7636);
			identifier584=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier584.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:846:15: ( generic_argument_list )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==81) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:846:15: generic_argument_list
					{
					pushFollow(FOLLOW_generic_argument_list_in_interface_method_declaration7640);
					generic_argument_list585=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list585.getTree());

					}
					break;

			}

			char_literal586=(Token)match(input,68,FOLLOW_68_in_interface_method_declaration7648); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal586_tree = (CommonTree)adaptor.create(char_literal586);
			adaptor.addChild(root_0, char_literal586_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:847:12: ( formal_parameter_list )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==IDENTIFIER||LA216_0==91||LA216_0==95||(LA216_0 >= 97 && LA216_0 <= 98)||(LA216_0 >= 100 && LA216_0 <= 101)||LA216_0==103||(LA216_0 >= 105 && LA216_0 <= 106)||LA216_0==109||LA216_0==114||LA216_0==117||(LA216_0 >= 119 && LA216_0 <= 120)||LA216_0==122||LA216_0==126||LA216_0==129||LA216_0==132||LA216_0==135||LA216_0==138||LA216_0==141||(LA216_0 >= 143 && LA216_0 <= 144)||(LA216_0 >= 146 && LA216_0 <= 148)||(LA216_0 >= 151 && LA216_0 <= 152)||(LA216_0 >= 154 && LA216_0 <= 155)||(LA216_0 >= 157 && LA216_0 <= 158)||LA216_0==160||LA216_0==162||(LA216_0 >= 166 && LA216_0 <= 167)||LA216_0==169||(LA216_0 >= 171 && LA216_0 <= 173)||LA216_0==177||LA216_0==180||LA216_0==183||(LA216_0 >= 185 && LA216_0 <= 186)||(LA216_0 >= 189 && LA216_0 <= 190)||LA216_0==192||LA216_0==194||LA216_0==196) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:847:12: formal_parameter_list
					{
					pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration7652);
					formal_parameter_list587=formal_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list587.getTree());

					}
					break;

			}

			char_literal588=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration7657); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal588_tree = (CommonTree)adaptor.create(char_literal588);
			adaptor.addChild(root_0, char_literal588_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:847:43: ( type_parameter_constraints_clauses )?
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==194) ) {
				alt217=1;
			}
			switch (alt217) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:847:43: type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration7661);
					type_parameter_constraints_clauses589=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses589.getTree());

					}
					break;

			}

			char_literal590=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration7666); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal590_tree = (CommonTree)adaptor.create(char_literal590);
			adaptor.addChild(root_0, char_literal590_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 211, interface_method_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_method_declaration"


	public static class interface_event_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_event_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:848:1: interface_event_declaration : 'event' type identifier ';' ;
	public final csParser.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
		csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
		retval.start = input.LT(1);
		int interface_event_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal591=null;
		Token char_literal594=null;
		ParserRuleReturnScope type592 =null;
		ParserRuleReturnScope identifier593 =null;

		CommonTree string_literal591_tree=null;
		CommonTree char_literal594_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:848:28: ( 'event' type identifier ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:850:2: 'event' type identifier ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal591=(Token)match(input,123,FOLLOW_123_in_interface_event_declaration7677); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal591_tree = (CommonTree)adaptor.create(string_literal591);
			adaptor.addChild(root_0, string_literal591_tree);
			}

			pushFollow(FOLLOW_type_in_interface_event_declaration7681);
			type592=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type592.getTree());

			pushFollow(FOLLOW_identifier_in_interface_event_declaration7685);
			identifier593=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier593.getTree());

			char_literal594=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration7689); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal594_tree = (CommonTree)adaptor.create(char_literal594);
			adaptor.addChild(root_0, char_literal594_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 212, interface_event_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_event_declaration"


	public static class interface_indexer_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_indexer_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:851:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
	public final csParser.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
		csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
		retval.start = input.LT(1);
		int interface_indexer_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal595=null;
		Token char_literal596=null;
		Token char_literal598=null;
		Token char_literal599=null;
		Token char_literal601=null;
		ParserRuleReturnScope formal_parameter_list597 =null;
		ParserRuleReturnScope interface_accessor_declarations600 =null;

		CommonTree string_literal595_tree=null;
		CommonTree char_literal596_tree=null;
		CommonTree char_literal598_tree=null;
		CommonTree char_literal599_tree=null;
		CommonTree char_literal601_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:851:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:853:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal595=(Token)match(input,180,FOLLOW_180_in_interface_indexer_declaration7701); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal595_tree = (CommonTree)adaptor.create(string_literal595);
			adaptor.addChild(root_0, string_literal595_tree);
			}

			char_literal596=(Token)match(input,91,FOLLOW_91_in_interface_indexer_declaration7705); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal596_tree = (CommonTree)adaptor.create(char_literal596);
			adaptor.addChild(root_0, char_literal596_tree);
			}

			pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration7709);
			formal_parameter_list597=formal_parameter_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list597.getTree());

			char_literal598=(Token)match(input,92,FOLLOW_92_in_interface_indexer_declaration7713); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal598_tree = (CommonTree)adaptor.create(char_literal598);
			adaptor.addChild(root_0, char_literal598_tree);
			}

			char_literal599=(Token)match(input,197,FOLLOW_197_in_interface_indexer_declaration7717); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal599_tree = (CommonTree)adaptor.create(char_literal599);
			adaptor.addChild(root_0, char_literal599_tree);
			}

			pushFollow(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration7721);
			interface_accessor_declarations600=interface_accessor_declarations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations600.getTree());

			char_literal601=(Token)match(input,201,FOLLOW_201_in_interface_indexer_declaration7725); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal601_tree = (CommonTree)adaptor.create(char_literal601);
			adaptor.addChild(root_0, char_literal601_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 213, interface_indexer_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_indexer_declaration"


	public static class interface_accessor_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_accessor_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:854:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
	public final csParser.interface_accessor_declarations_return interface_accessor_declarations() throws RecognitionException {
		csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
		retval.start = input.LT(1);
		int interface_accessor_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes602 =null;
		ParserRuleReturnScope interface_get_accessor_declaration603 =null;
		ParserRuleReturnScope attributes604 =null;
		ParserRuleReturnScope interface_set_accessor_declaration605 =null;
		ParserRuleReturnScope interface_set_accessor_declaration606 =null;
		ParserRuleReturnScope attributes607 =null;
		ParserRuleReturnScope interface_get_accessor_declaration608 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:854:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:855:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:855:2: ( attributes )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==91) ) {
				alt218=1;
			}
			switch (alt218) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:855:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_interface_accessor_declarations7733);
					attributes602=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes602.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==133) ) {
				alt223=1;
			}
			else if ( (LA223_0==172) ) {
				alt223=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 223, 0, input);
				throw nvae;
			}

			switch (alt223) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
					{
					pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations7742);
					interface_get_accessor_declaration603=interface_get_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration603.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:41: ( attributes )?
					int alt219=2;
					int LA219_0 = input.LA(1);
					if ( (LA219_0==91) ) {
						alt219=1;
					}
					switch (alt219) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:41: attributes
							{
							pushFollow(FOLLOW_attributes_in_interface_accessor_declarations7746);
							attributes604=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes604.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:55: ( interface_set_accessor_declaration )?
					int alt220=2;
					int LA220_0 = input.LA(1);
					if ( (LA220_0==172) ) {
						alt220=1;
					}
					switch (alt220) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:856:55: interface_set_accessor_declaration
							{
							pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations7751);
							interface_set_accessor_declaration605=interface_set_accessor_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration605.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:857:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
					{
					pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations7758);
					interface_set_accessor_declaration606=interface_set_accessor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration606.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:857:42: ( attributes )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==91) ) {
						alt221=1;
					}
					switch (alt221) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:857:42: attributes
							{
							pushFollow(FOLLOW_attributes_in_interface_accessor_declarations7762);
							attributes607=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes607.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:857:56: ( interface_get_accessor_declaration )?
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==133) ) {
						alt222=1;
					}
					switch (alt222) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:857:56: interface_get_accessor_declaration
							{
							pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations7767);
							interface_get_accessor_declaration608=interface_get_accessor_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration608.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 214, interface_accessor_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_accessor_declarations"


	public static class interface_get_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_get_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:858:1: interface_get_accessor_declaration : 'get' ';' ;
	public final csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration() throws RecognitionException {
		csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
		retval.start = input.LT(1);
		int interface_get_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal609=null;
		Token char_literal610=null;

		CommonTree string_literal609_tree=null;
		CommonTree char_literal610_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:858:35: ( 'get' ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:859:2: 'get' ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal609=(Token)match(input,133,FOLLOW_133_in_interface_get_accessor_declaration7777); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal609_tree = (CommonTree)adaptor.create(string_literal609);
			adaptor.addChild(root_0, string_literal609_tree);
			}

			char_literal610=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_get_accessor_declaration7781); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal610_tree = (CommonTree)adaptor.create(char_literal610);
			adaptor.addChild(root_0, char_literal610_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 215, interface_get_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_get_accessor_declaration"


	public static class interface_set_accessor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interface_set_accessor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:860:1: interface_set_accessor_declaration : 'set' ';' ;
	public final csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration() throws RecognitionException {
		csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
		retval.start = input.LT(1);
		int interface_set_accessor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal611=null;
		Token char_literal612=null;

		CommonTree string_literal611_tree=null;
		CommonTree char_literal612_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:860:35: ( 'set' ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:861:2: 'set' ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal611=(Token)match(input,172,FOLLOW_172_in_interface_set_accessor_declaration7791); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal611_tree = (CommonTree)adaptor.create(string_literal611);
			adaptor.addChild(root_0, string_literal611_tree);
			}

			char_literal612=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_set_accessor_declaration7795); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal612_tree = (CommonTree)adaptor.create(char_literal612);
			adaptor.addChild(root_0, char_literal612_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 216, interface_set_accessor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interface_set_accessor_declaration"


	public static class method_modifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "method_modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:862:1: method_modifiers : ( modifier )+ ;
	public final csParser.method_modifiers_return method_modifiers() throws RecognitionException {
		csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
		retval.start = input.LT(1);
		int method_modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope modifier613 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:862:17: ( ( modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:863:2: ( modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:863:2: ( modifier )+
			int cnt224=0;
			loop224:
			while (true) {
				int alt224=2;
				int LA224_0 = input.LA(1);
				if ( (LA224_0==96||LA224_0==125||LA224_0==140||LA224_0==150||LA224_0==156||LA224_0==161||(LA224_0 >= 163 && LA224_0 <= 165)||LA224_0==170||LA224_0==176||LA224_0==188||LA224_0==191||LA224_0==193) ) {
					alt224=1;
				}

				switch (alt224) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:863:2: modifier
					{
					pushFollow(FOLLOW_modifier_in_method_modifiers7805);
					modifier613=modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier613.getTree());

					}
					break;

				default :
					if ( cnt224 >= 1 ) break loop224;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(224, input);
					throw eee;
				}
				cnt224++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 217, method_modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "method_modifiers"


	public static class struct_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:866:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
	public final csParser.struct_declaration_return struct_declaration() throws RecognitionException {
		csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
		retval.start = input.LT(1);
		int struct_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal614=null;
		Token char_literal619=null;
		ParserRuleReturnScope type_or_generic615 =null;
		ParserRuleReturnScope struct_interfaces616 =null;
		ParserRuleReturnScope type_parameter_constraints_clauses617 =null;
		ParserRuleReturnScope struct_body618 =null;

		CommonTree string_literal614_tree=null;
		CommonTree char_literal619_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:866:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal614=(Token)match(input,178,FOLLOW_178_in_struct_declaration7817); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal614_tree = (CommonTree)adaptor.create(string_literal614);
			adaptor.addChild(root_0, string_literal614_tree);
			}

			pushFollow(FOLLOW_type_or_generic_in_struct_declaration7821);
			type_or_generic615=type_or_generic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic615.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:31: ( struct_interfaces )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==79) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:31: struct_interfaces
					{
					pushFollow(FOLLOW_struct_interfaces_in_struct_declaration7825);
					struct_interfaces616=struct_interfaces();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_interfaces616.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:52: ( type_parameter_constraints_clauses )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==194) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:52: type_parameter_constraints_clauses
					{
					pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration7830);
					type_parameter_constraints_clauses617=type_parameter_constraints_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses617.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_struct_body_in_struct_declaration7835);
			struct_body618=struct_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_body618.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:104: ( ';' )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==SEMI) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:867:104: ';'
					{
					char_literal619=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_declaration7839); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal619_tree = (CommonTree)adaptor.create(char_literal619);
					adaptor.addChild(root_0, char_literal619_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 218, struct_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_declaration"


	public static class struct_modifiers_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_modifiers"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:868:1: struct_modifiers : ( struct_modifier )+ ;
	public final csParser.struct_modifiers_return struct_modifiers() throws RecognitionException {
		csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
		retval.start = input.LT(1);
		int struct_modifiers_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope struct_modifier620 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:868:17: ( ( struct_modifier )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:869:2: ( struct_modifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:869:2: ( struct_modifier )+
			int cnt228=0;
			loop228:
			while (true) {
				int alt228=2;
				int LA228_0 = input.LA(1);
				if ( (LA228_0==140||LA228_0==150||LA228_0==161||(LA228_0 >= 163 && LA228_0 <= 164)||LA228_0==188) ) {
					alt228=1;
				}

				switch (alt228) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:869:2: struct_modifier
					{
					pushFollow(FOLLOW_struct_modifier_in_struct_modifiers7848);
					struct_modifier620=struct_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_modifier620.getTree());

					}
					break;

				default :
					if ( cnt228 >= 1 ) break loop228;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(228, input);
					throw eee;
				}
				cnt228++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 219, struct_modifiers_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_modifiers"


	public static class struct_modifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_modifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:870:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
	public final csParser.struct_modifier_return struct_modifier() throws RecognitionException {
		csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
		retval.start = input.LT(1);
		int struct_modifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set621=null;

		CommonTree set621_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:870:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set621=input.LT(1);
			if ( input.LA(1)==140||input.LA(1)==150||input.LA(1)==161||(input.LA(1) >= 163 && input.LA(1) <= 164)||input.LA(1)==188 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set621));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 220, struct_modifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_modifier"


	public static class struct_interfaces_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_interfaces"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:872:1: struct_interfaces : ':' interface_type_list ;
	public final csParser.struct_interfaces_return struct_interfaces() throws RecognitionException {
		csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
		retval.start = input.LT(1);
		int struct_interfaces_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal622=null;
		ParserRuleReturnScope interface_type_list623 =null;

		CommonTree char_literal622_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:872:18: ( ':' interface_type_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:873:2: ':' interface_type_list
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal622=(Token)match(input,79,FOLLOW_79_in_struct_interfaces7885); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal622_tree = (CommonTree)adaptor.create(char_literal622);
			adaptor.addChild(root_0, char_literal622_tree);
			}

			pushFollow(FOLLOW_interface_type_list_in_struct_interfaces7889);
			interface_type_list623=interface_type_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list623.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 221, struct_interfaces_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_interfaces"


	public static class struct_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:874:1: struct_body : '{' ( struct_member_declarations )? '}' ;
	public final csParser.struct_body_return struct_body() throws RecognitionException {
		csParser.struct_body_return retval = new csParser.struct_body_return();
		retval.start = input.LT(1);
		int struct_body_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal624=null;
		Token char_literal626=null;
		ParserRuleReturnScope struct_member_declarations625 =null;

		CommonTree char_literal624_tree=null;
		CommonTree char_literal626_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:874:12: ( '{' ( struct_member_declarations )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:875:2: '{' ( struct_member_declarations )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal624=(Token)match(input,197,FOLLOW_197_in_struct_body7896); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal624_tree = (CommonTree)adaptor.create(char_literal624);
			adaptor.addChild(root_0, char_literal624_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:875:8: ( struct_member_declarations )?
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==ENUM||LA229_0==IDENTIFIER||LA229_0==91||(LA229_0 >= 95 && LA229_0 <= 98)||(LA229_0 >= 100 && LA229_0 <= 101)||LA229_0==103||(LA229_0 >= 105 && LA229_0 <= 106)||LA229_0==109||(LA229_0 >= 111 && LA229_0 <= 112)||LA229_0==114||(LA229_0 >= 116 && LA229_0 <= 117)||(LA229_0 >= 119 && LA229_0 <= 120)||(LA229_0 >= 122 && LA229_0 <= 126)||LA229_0==129||LA229_0==132||(LA229_0 >= 135 && LA229_0 <= 136)||(LA229_0 >= 138 && LA229_0 <= 141)||(LA229_0 >= 143 && LA229_0 <= 144)||(LA229_0 >= 146 && LA229_0 <= 148)||(LA229_0 >= 150 && LA229_0 <= 152)||LA229_0==154||(LA229_0 >= 156 && LA229_0 <= 157)||(LA229_0 >= 159 && LA229_0 <= 165)||LA229_0==167||(LA229_0 >= 169 && LA229_0 <= 173)||(LA229_0 >= 176 && LA229_0 <= 178)||LA229_0==183||(LA229_0 >= 185 && LA229_0 <= 186)||(LA229_0 >= 188 && LA229_0 <= 194)||LA229_0==196) ) {
				alt229=1;
			}
			switch (alt229) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:875:8: struct_member_declarations
					{
					pushFollow(FOLLOW_struct_member_declarations_in_struct_body7900);
					struct_member_declarations625=struct_member_declarations();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declarations625.getTree());

					}
					break;

			}

			char_literal626=(Token)match(input,201,FOLLOW_201_in_struct_body7905); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal626_tree = (CommonTree)adaptor.create(char_literal626);
			adaptor.addChild(root_0, char_literal626_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 222, struct_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_body"


	public static class struct_member_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_member_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:876:1: struct_member_declarations : ( struct_member_declaration )+ ;
	public final csParser.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
		csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
		retval.start = input.LT(1);
		int struct_member_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope struct_member_declaration627 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:876:27: ( ( struct_member_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:877:2: ( struct_member_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:877:2: ( struct_member_declaration )+
			int cnt230=0;
			loop230:
			while (true) {
				int alt230=2;
				int LA230_0 = input.LA(1);
				if ( (LA230_0==ENUM||LA230_0==IDENTIFIER||LA230_0==91||(LA230_0 >= 95 && LA230_0 <= 98)||(LA230_0 >= 100 && LA230_0 <= 101)||LA230_0==103||(LA230_0 >= 105 && LA230_0 <= 106)||LA230_0==109||(LA230_0 >= 111 && LA230_0 <= 112)||LA230_0==114||(LA230_0 >= 116 && LA230_0 <= 117)||(LA230_0 >= 119 && LA230_0 <= 120)||(LA230_0 >= 122 && LA230_0 <= 126)||LA230_0==129||LA230_0==132||(LA230_0 >= 135 && LA230_0 <= 136)||(LA230_0 >= 138 && LA230_0 <= 141)||(LA230_0 >= 143 && LA230_0 <= 144)||(LA230_0 >= 146 && LA230_0 <= 148)||(LA230_0 >= 150 && LA230_0 <= 152)||LA230_0==154||(LA230_0 >= 156 && LA230_0 <= 157)||(LA230_0 >= 159 && LA230_0 <= 165)||LA230_0==167||(LA230_0 >= 169 && LA230_0 <= 173)||(LA230_0 >= 176 && LA230_0 <= 178)||LA230_0==183||(LA230_0 >= 185 && LA230_0 <= 186)||(LA230_0 >= 188 && LA230_0 <= 194)||LA230_0==196) ) {
					alt230=1;
				}

				switch (alt230) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:877:2: struct_member_declaration
					{
					pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations7912);
					struct_member_declaration627=struct_member_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declaration627.getTree());

					}
					break;

				default :
					if ( cnt230 >= 1 ) break loop230;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(230, input);
					throw eee;
				}
				cnt230++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 223, struct_member_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_member_declarations"


	public static class struct_member_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "struct_member_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:878:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
	public final csParser.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
		csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
		retval.start = input.LT(1);
		int struct_member_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal629=null;
		Token char_literal632=null;
		Token string_literal634=null;
		Token string_literal641=null;
		Token char_literal647=null;
		ParserRuleReturnScope m =null;
		ParserRuleReturnScope attributes628 =null;
		ParserRuleReturnScope type630 =null;
		ParserRuleReturnScope constant_declarators631 =null;
		ParserRuleReturnScope event_declaration633 =null;
		ParserRuleReturnScope method_declaration635 =null;
		ParserRuleReturnScope interface_declaration636 =null;
		ParserRuleReturnScope class_declaration637 =null;
		ParserRuleReturnScope struct_declaration638 =null;
		ParserRuleReturnScope interface_declaration639 =null;
		ParserRuleReturnScope class_declaration640 =null;
		ParserRuleReturnScope method_declaration642 =null;
		ParserRuleReturnScope type643 =null;
		ParserRuleReturnScope method_declaration644 =null;
		ParserRuleReturnScope property_declaration645 =null;
		ParserRuleReturnScope type_name646 =null;
		ParserRuleReturnScope indexer_declaration648 =null;
		ParserRuleReturnScope indexer_declaration649 =null;
		ParserRuleReturnScope field_declaration650 =null;
		ParserRuleReturnScope operator_declaration651 =null;
		ParserRuleReturnScope struct_declaration652 =null;
		ParserRuleReturnScope enum_declaration653 =null;
		ParserRuleReturnScope delegate_declaration654 =null;
		ParserRuleReturnScope conversion_operator_declaration655 =null;
		ParserRuleReturnScope constructor_declaration656 =null;

		CommonTree string_literal629_tree=null;
		CommonTree char_literal632_tree=null;
		CommonTree string_literal634_tree=null;
		CommonTree string_literal641_tree=null;
		CommonTree char_literal647_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:878:26: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:879:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:879:2: ( attributes )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==91) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:879:2: attributes
					{
					pushFollow(FOLLOW_attributes_in_struct_member_declaration7921);
					attributes628=attributes();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes628.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:879:17: (m= modifiers )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==96||LA232_0==125||LA232_0==140||LA232_0==150||LA232_0==156||LA232_0==161||(LA232_0 >= 163 && LA232_0 <= 165)||LA232_0==170||LA232_0==176||LA232_0==188||LA232_0==191||LA232_0==193) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:879:17: m= modifiers
					{
					pushFollow(FOLLOW_modifiers_in_struct_member_declaration7928);
					m=modifiers();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());

					}
					break;

			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:880:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			int alt235=12;
			switch ( input.LA(1) ) {
			case 112:
				{
				alt235=1;
				}
				break;
			case 123:
				{
				alt235=2;
				}
				break;
			case 159:
				{
				alt235=3;
				}
				break;
			case 139:
				{
				alt235=4;
				}
				break;
			case 111:
				{
				alt235=5;
				}
				break;
			case 192:
				{
				int LA235_6 = input.LA(2);
				if ( (LA235_6==Character_literal||LA235_6==FALSE||(LA235_6 >= Hex_number && LA235_6 <= IDENTIFIER)||(LA235_6 >= NULL && LA235_6 <= NUMBER)||LA235_6==Real_literal||LA235_6==STRINGLITERAL||LA235_6==TRUE||LA235_6==Verbatim_string_literal||LA235_6==95||(LA235_6 >= 97 && LA235_6 <= 98)||(LA235_6 >= 100 && LA235_6 <= 101)||LA235_6==103||(LA235_6 >= 105 && LA235_6 <= 106)||LA235_6==109||LA235_6==114||LA235_6==117||(LA235_6 >= 119 && LA235_6 <= 120)||LA235_6==122||LA235_6==126||LA235_6==129||LA235_6==132||LA235_6==135||LA235_6==138||LA235_6==141||(LA235_6 >= 143 && LA235_6 <= 144)||(LA235_6 >= 146 && LA235_6 <= 148)||(LA235_6 >= 151 && LA235_6 <= 152)||LA235_6==154||LA235_6==157||LA235_6==160||LA235_6==162||LA235_6==167||LA235_6==169||(LA235_6 >= 171 && LA235_6 <= 173)||LA235_6==177||LA235_6==183||(LA235_6 >= 185 && LA235_6 <= 186)||(LA235_6 >= 189 && LA235_6 <= 190)||LA235_6==194||LA235_6==196) ) {
					alt235=6;
				}
				else if ( (LA235_6==69) ) {
					alt235=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 235, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt235=7;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA235_8 = input.LA(2);
				if ( (LA235_8==Character_literal||LA235_8==DOT||LA235_8==FALSE||(LA235_8 >= Hex_number && LA235_8 <= IDENTIFIER)||(LA235_8 >= NULL && LA235_8 <= NUMBER)||LA235_8==Real_literal||LA235_8==STRINGLITERAL||LA235_8==TRUE||LA235_8==Verbatim_string_literal||LA235_8==69||(LA235_8 >= 80 && LA235_8 <= 81)||LA235_8==89||LA235_8==91||LA235_8==95||(LA235_8 >= 97 && LA235_8 <= 98)||(LA235_8 >= 100 && LA235_8 <= 101)||LA235_8==103||(LA235_8 >= 105 && LA235_8 <= 106)||LA235_8==109||LA235_8==114||LA235_8==117||(LA235_8 >= 119 && LA235_8 <= 120)||LA235_8==122||LA235_8==126||LA235_8==129||LA235_8==132||LA235_8==135||LA235_8==138||LA235_8==141||(LA235_8 >= 143 && LA235_8 <= 144)||(LA235_8 >= 146 && LA235_8 <= 148)||(LA235_8 >= 151 && LA235_8 <= 154)||LA235_8==157||LA235_8==160||LA235_8==162||LA235_8==167||LA235_8==169||(LA235_8 >= 171 && LA235_8 <= 173)||LA235_8==177||LA235_8==180||LA235_8==183||(LA235_8 >= 185 && LA235_8 <= 186)||(LA235_8 >= 189 && LA235_8 <= 190)||LA235_8==194||LA235_8==196) ) {
					alt235=7;
				}
				else if ( (LA235_8==68) ) {
					alt235=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 235, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 178:
				{
				alt235=8;
				}
				break;
			case ENUM:
				{
				alt235=9;
				}
				break;
			case 116:
				{
				alt235=10;
				}
				break;
			case 124:
			case 136:
				{
				alt235=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 235, 0, input);
				throw nvae;
			}
			switch (alt235) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:880:4: 'const' type constant_declarators ';'
					{
					string_literal629=(Token)match(input,112,FOLLOW_112_in_struct_member_declaration7934); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal629_tree = (CommonTree)adaptor.create(string_literal629);
					adaptor.addChild(root_0, string_literal629_tree);
					}

					pushFollow(FOLLOW_type_in_struct_member_declaration7938);
					type630=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type630.getTree());

					pushFollow(FOLLOW_constant_declarators_in_struct_member_declaration7942);
					constant_declarators631=constant_declarators();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators631.getTree());

					char_literal632=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_member_declaration7946); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal632_tree = (CommonTree)adaptor.create(char_literal632);
					adaptor.addChild(root_0, char_literal632_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:881:4: event_declaration
					{
					pushFollow(FOLLOW_event_declaration_in_struct_member_declaration7951);
					event_declaration633=event_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_declaration633.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:882:4: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
					{
					string_literal634=(Token)match(input,159,FOLLOW_159_in_struct_member_declaration7958); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal634_tree = (CommonTree)adaptor.create(string_literal634);
					adaptor.addChild(root_0, string_literal634_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:882:14: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
					int alt233=4;
					switch ( input.LA(1) ) {
					case Character_literal:
					case FALSE:
					case Hex_number:
					case IDENTIFIER:
					case NULL:
					case NUMBER:
					case Real_literal:
					case STRINGLITERAL:
					case TRUE:
					case Verbatim_string_literal:
					case 95:
					case 97:
					case 98:
					case 100:
					case 101:
					case 103:
					case 105:
					case 106:
					case 109:
					case 114:
					case 117:
					case 119:
					case 120:
					case 122:
					case 126:
					case 129:
					case 132:
					case 135:
					case 138:
					case 141:
					case 143:
					case 144:
					case 146:
					case 147:
					case 148:
					case 151:
					case 152:
					case 154:
					case 157:
					case 160:
					case 162:
					case 167:
					case 169:
					case 171:
					case 172:
					case 173:
					case 177:
					case 183:
					case 185:
					case 186:
					case 189:
					case 190:
					case 194:
					case 196:
						{
						alt233=1;
						}
						break;
					case 139:
						{
						alt233=2;
						}
						break;
					case 111:
						{
						alt233=3;
						}
						break;
					case 178:
						{
						alt233=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 233, 0, input);
						throw nvae;
					}
					switch (alt233) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:882:15: method_declaration
							{
							pushFollow(FOLLOW_method_declaration_in_struct_member_declaration7961);
							method_declaration635=method_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration635.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:883:9: interface_declaration
							{
							pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration7972);
							interface_declaration636=interface_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration636.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:884:9: class_declaration
							{
							pushFollow(FOLLOW_class_declaration_in_struct_member_declaration7983);
							class_declaration637=class_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration637.getTree());

							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:885:9: struct_declaration
							{
							pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration7994);
							struct_declaration638=struct_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration638.getTree());

							}
							break;

					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:887:4: interface_declaration
					{
					pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration8001);
					interface_declaration639=interface_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration639.getTree());

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:888:4: class_declaration
					{
					pushFollow(FOLLOW_class_declaration_in_struct_member_declaration8007);
					class_declaration640=class_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, class_declaration640.getTree());

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:889:4: 'void' method_declaration
					{
					string_literal641=(Token)match(input,192,FOLLOW_192_in_struct_member_declaration8014); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal641_tree = (CommonTree)adaptor.create(string_literal641);
					adaptor.addChild(root_0, string_literal641_tree);
					}

					pushFollow(FOLLOW_method_declaration_in_struct_member_declaration8018);
					method_declaration642=method_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration642.getTree());

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:890:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
					{
					pushFollow(FOLLOW_type_in_struct_member_declaration8023);
					type643=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type643.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:890:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
					int alt234=6;
					switch ( input.LA(1) ) {
					case 103:
					case 106:
					case 109:
					case 114:
					case 119:
					case 129:
					case 138:
					case 146:
					case 151:
					case 169:
					case 173:
					case 177:
					case 185:
					case 186:
					case 189:
						{
						int LA234_1 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENTIFIER:
					case 95:
					case 97:
					case 98:
					case 100:
					case 101:
					case 105:
					case 117:
					case 120:
					case 122:
					case 126:
					case 132:
					case 135:
					case 141:
					case 143:
					case 144:
					case 147:
					case 148:
					case 152:
					case 154:
					case 157:
					case 160:
					case 162:
					case 167:
					case 171:
					case 172:
					case 183:
					case 190:
					case 194:
					case 196:
						{
						int LA234_2 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}
						else if ( (synpred30_cs()) ) {
							alt234=3;
						}
						else if ( (true) ) {
							alt234=5;
						}

						}
						break;
					case Real_literal:
						{
						int LA234_3 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NUMBER:
						{
						int LA234_4 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Hex_number:
						{
						int LA234_5 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Character_literal:
						{
						int LA234_6 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case STRINGLITERAL:
						{
						int LA234_7 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 7, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case Verbatim_string_literal:
						{
						int LA234_8 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 8, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TRUE:
						{
						int LA234_9 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 9, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case FALSE:
						{
						int LA234_10 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NULL:
						{
						int LA234_11 = input.LA(2);
						if ( (synpred28_cs()) ) {
							alt234=1;
						}
						else if ( (synpred29_cs()) ) {
							alt234=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case 180:
						{
						alt234=4;
						}
						break;
					case 153:
						{
						alt234=6;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 234, 0, input);
						throw nvae;
					}
					switch (alt234) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:890:11: ( member_name '(' )=> method_declaration
							{
							pushFollow(FOLLOW_method_declaration_in_struct_member_declaration8037);
							method_declaration644=method_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration644.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:891:8: ( member_name '{' )=> property_declaration
							{
							pushFollow(FOLLOW_property_declaration_in_struct_member_declaration8056);
							property_declaration645=property_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration645.getTree());

							}
							break;
						case 3 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:892:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
							{
							pushFollow(FOLLOW_type_name_in_struct_member_declaration8079);
							type_name646=type_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name646.getTree());

							char_literal647=(Token)match(input,DOT,FOLLOW_DOT_in_struct_member_declaration8081); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal647_tree = (CommonTree)adaptor.create(char_literal647);
							adaptor.addChild(root_0, char_literal647_tree);
							}

							pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration8083);
							indexer_declaration648=indexer_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration648.getTree());

							}
							break;
						case 4 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:893:8: indexer_declaration
							{
							pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration8092);
							indexer_declaration649=indexer_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declaration649.getTree());

							}
							break;
						case 5 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:894:11: field_declaration
							{
							pushFollow(FOLLOW_field_declaration_in_struct_member_declaration8105);
							field_declaration650=field_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration650.getTree());

							}
							break;
						case 6 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:895:11: operator_declaration
							{
							pushFollow(FOLLOW_operator_declaration_in_struct_member_declaration8123);
							operator_declaration651=operator_declaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declaration651.getTree());

							}
							break;

					}

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:899:4: struct_declaration
					{
					pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration8141);
					struct_declaration652=struct_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration652.getTree());

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:900:4: enum_declaration
					{
					pushFollow(FOLLOW_enum_declaration_in_struct_member_declaration8147);
					enum_declaration653=enum_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration653.getTree());

					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:901:4: delegate_declaration
					{
					pushFollow(FOLLOW_delegate_declaration_in_struct_member_declaration8154);
					delegate_declaration654=delegate_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration654.getTree());

					}
					break;
				case 11 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:902:4: conversion_operator_declaration
					{
					pushFollow(FOLLOW_conversion_operator_declaration_in_struct_member_declaration8160);
					conversion_operator_declaration655=conversion_operator_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declaration655.getTree());

					}
					break;
				case 12 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:903:4: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_struct_member_declaration8165);
					constructor_declaration656=constructor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration656.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 224, struct_member_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "struct_member_declaration"


	public static class indexer_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexer_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:909:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
	public final csParser.indexer_declaration_return indexer_declaration() throws RecognitionException {
		csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
		retval.start = input.LT(1);
		int indexer_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal658=null;
		Token char_literal660=null;
		ParserRuleReturnScope indexer_declarator657 =null;
		ParserRuleReturnScope accessor_declarations659 =null;

		CommonTree char_literal658_tree=null;
		CommonTree char_literal660_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:909:20: ( indexer_declarator '{' accessor_declarations '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:910:2: indexer_declarator '{' accessor_declarations '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration8182);
			indexer_declarator657=indexer_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declarator657.getTree());

			char_literal658=(Token)match(input,197,FOLLOW_197_in_indexer_declaration8186); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal658_tree = (CommonTree)adaptor.create(char_literal658);
			adaptor.addChild(root_0, char_literal658_tree);
			}

			pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration8190);
			accessor_declarations659=accessor_declarations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations659.getTree());

			char_literal660=(Token)match(input,201,FOLLOW_201_in_indexer_declaration8194); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal660_tree = (CommonTree)adaptor.create(char_literal660);
			adaptor.addChild(root_0, char_literal660_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 225, indexer_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "indexer_declaration"


	public static class indexer_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexer_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:911:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
	public final csParser.indexer_declarator_return indexer_declarator() throws RecognitionException {
		csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
		retval.start = input.LT(1);
		int indexer_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal661=null;
		Token char_literal662=null;
		Token char_literal664=null;
		ParserRuleReturnScope formal_parameter_list663 =null;

		CommonTree string_literal661_tree=null;
		CommonTree char_literal662_tree=null;
		CommonTree char_literal664_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:911:19: ( 'this' '[' formal_parameter_list ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:913:2: 'this' '[' formal_parameter_list ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal661=(Token)match(input,180,FOLLOW_180_in_indexer_declarator8204); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal661_tree = (CommonTree)adaptor.create(string_literal661);
			adaptor.addChild(root_0, string_literal661_tree);
			}

			char_literal662=(Token)match(input,91,FOLLOW_91_in_indexer_declarator8208); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal662_tree = (CommonTree)adaptor.create(char_literal662);
			adaptor.addChild(root_0, char_literal662_tree);
			}

			pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator8212);
			formal_parameter_list663=formal_parameter_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list663.getTree());

			char_literal664=(Token)match(input,92,FOLLOW_92_in_indexer_declarator8216); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal664_tree = (CommonTree)adaptor.create(char_literal664);
			adaptor.addChild(root_0, char_literal664_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 226, indexer_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "indexer_declarator"


	public static class operator_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "operator_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:916:1: operator_declaration : operator_declarator operator_body ;
	public final csParser.operator_declaration_return operator_declaration() throws RecognitionException {
		csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
		retval.start = input.LT(1);
		int operator_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope operator_declarator665 =null;
		ParserRuleReturnScope operator_body666 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:916:21: ( operator_declarator operator_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:917:2: operator_declarator operator_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_operator_declarator_in_operator_declaration8227);
			operator_declarator665=operator_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declarator665.getTree());

			pushFollow(FOLLOW_operator_body_in_operator_declaration8231);
			operator_body666=operator_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body666.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 227, operator_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator_declaration"


	public static class operator_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "operator_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:918:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
	public final csParser.operator_declarator_return operator_declarator() throws RecognitionException {
		csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
		retval.start = input.LT(1);
		int operator_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal667=null;
		Token set668=null;
		Token char_literal669=null;
		ParserRuleReturnScope type670 =null;
		ParserRuleReturnScope identifier671 =null;
		ParserRuleReturnScope binary_operator_declarator672 =null;
		ParserRuleReturnScope unary_operator_declarator673 =null;
		ParserRuleReturnScope overloadable_unary_operator674 =null;
		ParserRuleReturnScope unary_operator_declarator675 =null;
		ParserRuleReturnScope overloadable_binary_operator676 =null;
		ParserRuleReturnScope binary_operator_declarator677 =null;

		CommonTree string_literal667_tree=null;
		CommonTree set668_tree=null;
		CommonTree char_literal669_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:918:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:919:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal667=(Token)match(input,153,FOLLOW_153_in_operator_declarator8239); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal667_tree = (CommonTree)adaptor.create(string_literal667);
			adaptor.addChild(root_0, string_literal667_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:920:3: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			int alt237=3;
			switch ( input.LA(1) ) {
			case MINUS:
			case 71:
				{
				alt237=1;
				}
				break;
			case FALSE:
			case TRUE:
			case 61:
			case 72:
			case 75:
			case 202:
				{
				alt237=2;
				}
				break;
			case GT:
			case 62:
			case 63:
			case 66:
			case 69:
			case 77:
			case 81:
			case 82:
			case 84:
			case 86:
			case 88:
			case 93:
			case 198:
				{
				alt237=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}
			switch (alt237) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:920:4: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
					{
					set668=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==71 ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set668));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					char_literal669=(Token)match(input,68,FOLLOW_68_in_operator_declarator8257); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal669_tree = (CommonTree)adaptor.create(char_literal669);
					adaptor.addChild(root_0, char_literal669_tree);
					}

					pushFollow(FOLLOW_type_in_operator_declarator8261);
					type670=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type670.getTree());

					pushFollow(FOLLOW_identifier_in_operator_declarator8265);
					identifier671=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier671.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:920:42: ( binary_operator_declarator | unary_operator_declarator )
					int alt236=2;
					int LA236_0 = input.LA(1);
					if ( (LA236_0==74) ) {
						alt236=1;
					}
					else if ( (LA236_0==RPAREN) ) {
						alt236=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 236, 0, input);
						throw nvae;
					}

					switch (alt236) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:920:43: binary_operator_declarator
							{
							pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8268);
							binary_operator_declarator672=binary_operator_declarator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator672.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:920:72: unary_operator_declarator
							{
							pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8272);
							unary_operator_declarator673=unary_operator_declarator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator673.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:921:5: overloadable_unary_operator unary_operator_declarator
					{
					pushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator8279);
					overloadable_unary_operator674=overloadable_unary_operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_unary_operator674.getTree());

					pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8283);
					unary_operator_declarator675=unary_operator_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator675.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:922:5: overloadable_binary_operator binary_operator_declarator
					{
					pushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator8289);
					overloadable_binary_operator676=overloadable_binary_operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_binary_operator676.getTree());

					pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8293);
					binary_operator_declarator677=binary_operator_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator677.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 228, operator_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator_declarator"


	public static class unary_operator_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unary_operator_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:923:1: unary_operator_declarator : ')' ;
	public final csParser.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
		csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
		retval.start = input.LT(1);
		int unary_operator_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal678=null;

		CommonTree char_literal678_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:923:26: ( ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:924:5: ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal678=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator8305); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal678_tree = (CommonTree)adaptor.create(char_literal678);
			adaptor.addChild(root_0, char_literal678_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 229, unary_operator_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unary_operator_declarator"


	public static class overloadable_unary_operator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "overloadable_unary_operator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:925:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
	public final csParser.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
		csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
		retval.start = input.LT(1);
		int overloadable_unary_operator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set679=null;

		CommonTree set679_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:925:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set679=input.LT(1);
			if ( input.LA(1)==FALSE||input.LA(1)==TRUE||input.LA(1)==61||input.LA(1)==72||input.LA(1)==75||input.LA(1)==202 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set679));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 230, overloadable_unary_operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadable_unary_operator"


	public static class binary_operator_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "binary_operator_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:927:1: binary_operator_declarator : ',' type identifier ')' ;
	public final csParser.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
		csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
		retval.start = input.LT(1);
		int binary_operator_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal680=null;
		Token char_literal683=null;
		ParserRuleReturnScope type681 =null;
		ParserRuleReturnScope identifier682 =null;

		CommonTree char_literal680_tree=null;
		CommonTree char_literal683_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:927:27: ( ',' type identifier ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:928:2: ',' type identifier ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal680=(Token)match(input,74,FOLLOW_74_in_binary_operator_declarator8348); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal680_tree = (CommonTree)adaptor.create(char_literal680);
			adaptor.addChild(root_0, char_literal680_tree);
			}

			pushFollow(FOLLOW_type_in_binary_operator_declarator8352);
			type681=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type681.getTree());

			pushFollow(FOLLOW_identifier_in_binary_operator_declarator8356);
			identifier682=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier682.getTree());

			char_literal683=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator8360); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal683_tree = (CommonTree)adaptor.create(char_literal683);
			adaptor.addChild(root_0, char_literal683_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 231, binary_operator_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "binary_operator_declarator"


	public static class overloadable_binary_operator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "overloadable_binary_operator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:930:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
	public final csParser.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
		csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
		retval.start = input.LT(1);
		int overloadable_binary_operator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal684=null;
		Token char_literal685=null;
		Token char_literal686=null;
		Token char_literal687=null;
		Token char_literal688=null;
		Token char_literal689=null;
		Token string_literal690=null;
		Token char_literal691=null;
		Token char_literal692=null;
		Token string_literal693=null;
		Token string_literal694=null;
		Token char_literal695=null;
		Token char_literal696=null;
		Token string_literal697=null;
		Token string_literal698=null;

		CommonTree char_literal684_tree=null;
		CommonTree char_literal685_tree=null;
		CommonTree char_literal686_tree=null;
		CommonTree char_literal687_tree=null;
		CommonTree char_literal688_tree=null;
		CommonTree char_literal689_tree=null;
		CommonTree string_literal690_tree=null;
		CommonTree char_literal691_tree=null;
		CommonTree char_literal692_tree=null;
		CommonTree string_literal693_tree=null;
		CommonTree string_literal694_tree=null;
		CommonTree char_literal695_tree=null;
		CommonTree char_literal696_tree=null;
		CommonTree string_literal697_tree=null;
		CommonTree string_literal698_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:930:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
			int alt238=14;
			switch ( input.LA(1) ) {
			case 69:
				{
				alt238=1;
				}
				break;
			case 77:
				{
				alt238=2;
				}
				break;
			case 63:
				{
				alt238=3;
				}
				break;
			case 66:
				{
				alt238=4;
				}
				break;
			case 198:
				{
				alt238=5;
				}
				break;
			case 93:
				{
				alt238=6;
				}
				break;
			case 82:
				{
				alt238=7;
				}
				break;
			case GT:
				{
				int LA238_8 = input.LA(2);
				if ( (LA238_8==GT) ) {
					alt238=8;
				}
				else if ( (LA238_8==74) ) {
					alt238=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 238, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 86:
				{
				alt238=9;
				}
				break;
			case 62:
				{
				alt238=10;
				}
				break;
			case 81:
				{
				alt238=12;
				}
				break;
			case 88:
				{
				alt238=13;
				}
				break;
			case 84:
				{
				alt238=14;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 238, 0, input);
				throw nvae;
			}
			switch (alt238) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:19: '*'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal684=(Token)match(input,69,FOLLOW_69_in_overloadable_binary_operator8371); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal684_tree = (CommonTree)adaptor.create(char_literal684);
					adaptor.addChild(root_0, char_literal684_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:25: '/'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal685=(Token)match(input,77,FOLLOW_77_in_overloadable_binary_operator8375); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal685_tree = (CommonTree)adaptor.create(char_literal685);
					adaptor.addChild(root_0, char_literal685_tree);
					}

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:31: '%'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal686=(Token)match(input,63,FOLLOW_63_in_overloadable_binary_operator8379); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal686_tree = (CommonTree)adaptor.create(char_literal686);
					adaptor.addChild(root_0, char_literal686_tree);
					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:37: '&'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal687=(Token)match(input,66,FOLLOW_66_in_overloadable_binary_operator8383); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal687_tree = (CommonTree)adaptor.create(char_literal687);
					adaptor.addChild(root_0, char_literal687_tree);
					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:43: '|'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal688=(Token)match(input,198,FOLLOW_198_in_overloadable_binary_operator8387); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal688_tree = (CommonTree)adaptor.create(char_literal688);
					adaptor.addChild(root_0, char_literal688_tree);
					}

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:49: '^'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal689=(Token)match(input,93,FOLLOW_93_in_overloadable_binary_operator8391); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal689_tree = (CommonTree)adaptor.create(char_literal689);
					adaptor.addChild(root_0, char_literal689_tree);
					}

					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:55: '<<'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal690=(Token)match(input,82,FOLLOW_82_in_overloadable_binary_operator8395); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal690_tree = (CommonTree)adaptor.create(string_literal690);
					adaptor.addChild(root_0, string_literal690_tree);
					}

					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:62: '>' '>'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal691=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8399); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal691_tree = (CommonTree)adaptor.create(char_literal691);
					adaptor.addChild(root_0, char_literal691_tree);
					}

					char_literal692=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8401); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal692_tree = (CommonTree)adaptor.create(char_literal692);
					adaptor.addChild(root_0, char_literal692_tree);
					}

					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:72: '=='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal693=(Token)match(input,86,FOLLOW_86_in_overloadable_binary_operator8405); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal693_tree = (CommonTree)adaptor.create(string_literal693);
					adaptor.addChild(root_0, string_literal693_tree);
					}

					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:79: '!='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal694=(Token)match(input,62,FOLLOW_62_in_overloadable_binary_operator8409); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal694_tree = (CommonTree)adaptor.create(string_literal694);
					adaptor.addChild(root_0, string_literal694_tree);
					}

					}
					break;
				case 11 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:86: '>'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal695=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal695_tree = (CommonTree)adaptor.create(char_literal695);
					adaptor.addChild(root_0, char_literal695_tree);
					}

					}
					break;
				case 12 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:92: '<'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal696=(Token)match(input,81,FOLLOW_81_in_overloadable_binary_operator8417); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal696_tree = (CommonTree)adaptor.create(char_literal696);
					adaptor.addChild(root_0, char_literal696_tree);
					}

					}
					break;
				case 13 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:98: '>='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal697=(Token)match(input,88,FOLLOW_88_in_overloadable_binary_operator8421); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal697_tree = (CommonTree)adaptor.create(string_literal697);
					adaptor.addChild(root_0, string_literal697_tree);
					}

					}
					break;
				case 14 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:931:105: '<='
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal698=(Token)match(input,84,FOLLOW_84_in_overloadable_binary_operator8425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal698_tree = (CommonTree)adaptor.create(string_literal698);
					adaptor.addChild(root_0, string_literal698_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 232, overloadable_binary_operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadable_binary_operator"


	public static class conversion_operator_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "conversion_operator_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:933:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
	public final csParser.conversion_operator_declaration_return conversion_operator_declaration() throws RecognitionException {
		csParser.conversion_operator_declaration_return retval = new csParser.conversion_operator_declaration_return();
		retval.start = input.LT(1);
		int conversion_operator_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope conversion_operator_declarator699 =null;
		ParserRuleReturnScope operator_body700 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:933:32: ( conversion_operator_declarator operator_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:934:2: conversion_operator_declarator operator_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration8435);
			conversion_operator_declarator699=conversion_operator_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declarator699.getTree());

			pushFollow(FOLLOW_operator_body_in_conversion_operator_declaration8439);
			operator_body700=operator_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body700.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 233, conversion_operator_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "conversion_operator_declaration"


	public static class conversion_operator_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "conversion_operator_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:935:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
	public final csParser.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
		csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
		retval.start = input.LT(1);
		int conversion_operator_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set701=null;
		Token string_literal702=null;
		Token char_literal704=null;
		Token char_literal707=null;
		ParserRuleReturnScope type703 =null;
		ParserRuleReturnScope type705 =null;
		ParserRuleReturnScope identifier706 =null;

		CommonTree set701_tree=null;
		CommonTree string_literal702_tree=null;
		CommonTree char_literal704_tree=null;
		CommonTree char_literal707_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:935:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:936:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			set701=input.LT(1);
			if ( input.LA(1)==124||input.LA(1)==136 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set701));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			string_literal702=(Token)match(input,153,FOLLOW_153_in_conversion_operator_declarator8456); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal702_tree = (CommonTree)adaptor.create(string_literal702);
			adaptor.addChild(root_0, string_literal702_tree);
			}

			pushFollow(FOLLOW_type_in_conversion_operator_declarator8460);
			type703=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type703.getTree());

			char_literal704=(Token)match(input,68,FOLLOW_68_in_conversion_operator_declarator8464); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal704_tree = (CommonTree)adaptor.create(char_literal704);
			adaptor.addChild(root_0, char_literal704_tree);
			}

			pushFollow(FOLLOW_type_in_conversion_operator_declarator8468);
			type705=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type705.getTree());

			pushFollow(FOLLOW_identifier_in_conversion_operator_declarator8472);
			identifier706=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier706.getTree());

			char_literal707=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator8476); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal707_tree = (CommonTree)adaptor.create(char_literal707);
			adaptor.addChild(root_0, char_literal707_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 234, conversion_operator_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "conversion_operator_declarator"


	public static class operator_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "operator_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:937:1: operator_body : block ;
	public final csParser.operator_body_return operator_body() throws RecognitionException {
		csParser.operator_body_return retval = new csParser.operator_body_return();
		retval.start = input.LT(1);
		int operator_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope block708 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:937:14: ( block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:938:2: block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_operator_body8484);
			block708=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block708.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 235, operator_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator_body"


	public static class constructor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constructor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:941:1: constructor_declaration : constructor_declarator constructor_body ;
	public final csParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
		csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
		retval.start = input.LT(1);
		int constructor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope constructor_declarator709 =null;
		ParserRuleReturnScope constructor_body710 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:941:24: ( constructor_declarator constructor_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:942:2: constructor_declarator constructor_body
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration8494);
			constructor_declarator709=constructor_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declarator709.getTree());

			pushFollow(FOLLOW_constructor_body_in_constructor_declaration8498);
			constructor_body710=constructor_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_body710.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 236, constructor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class constructor_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constructor_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:943:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
	public final csParser.constructor_declarator_return constructor_declarator() throws RecognitionException {
		csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
		retval.start = input.LT(1);
		int constructor_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal712=null;
		Token char_literal714=null;
		ParserRuleReturnScope identifier711 =null;
		ParserRuleReturnScope formal_parameter_list713 =null;
		ParserRuleReturnScope constructor_initializer715 =null;

		CommonTree char_literal712_tree=null;
		CommonTree char_literal714_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:943:23: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:944:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_constructor_declarator8506);
			identifier711=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier711.getTree());

			char_literal712=(Token)match(input,68,FOLLOW_68_in_constructor_declarator8510); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal712_tree = (CommonTree)adaptor.create(char_literal712);
			adaptor.addChild(root_0, char_literal712_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:944:21: ( formal_parameter_list )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==IDENTIFIER||LA239_0==91||LA239_0==95||(LA239_0 >= 97 && LA239_0 <= 98)||(LA239_0 >= 100 && LA239_0 <= 101)||LA239_0==103||(LA239_0 >= 105 && LA239_0 <= 106)||LA239_0==109||LA239_0==114||LA239_0==117||(LA239_0 >= 119 && LA239_0 <= 120)||LA239_0==122||LA239_0==126||LA239_0==129||LA239_0==132||LA239_0==135||LA239_0==138||LA239_0==141||(LA239_0 >= 143 && LA239_0 <= 144)||(LA239_0 >= 146 && LA239_0 <= 148)||(LA239_0 >= 151 && LA239_0 <= 152)||(LA239_0 >= 154 && LA239_0 <= 155)||(LA239_0 >= 157 && LA239_0 <= 158)||LA239_0==160||LA239_0==162||(LA239_0 >= 166 && LA239_0 <= 167)||LA239_0==169||(LA239_0 >= 171 && LA239_0 <= 173)||LA239_0==177||LA239_0==180||LA239_0==183||(LA239_0 >= 185 && LA239_0 <= 186)||(LA239_0 >= 189 && LA239_0 <= 190)||LA239_0==192||LA239_0==194||LA239_0==196) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:944:21: formal_parameter_list
					{
					pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator8514);
					formal_parameter_list713=formal_parameter_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list713.getTree());

					}
					break;

			}

			char_literal714=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declarator8519); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal714_tree = (CommonTree)adaptor.create(char_literal714);
			adaptor.addChild(root_0, char_literal714_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:944:52: ( constructor_initializer )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==79) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:944:52: constructor_initializer
					{
					pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator8523);
					constructor_initializer715=constructor_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_initializer715.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 237, constructor_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constructor_declarator"


	public static class constructor_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constructor_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:945:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
	public final csParser.constructor_initializer_return constructor_initializer() throws RecognitionException {
		csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
		retval.start = input.LT(1);
		int constructor_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal716=null;
		Token set717=null;
		Token char_literal718=null;
		Token char_literal720=null;
		ParserRuleReturnScope argument_list719 =null;

		CommonTree char_literal716_tree=null;
		CommonTree set717_tree=null;
		CommonTree char_literal718_tree=null;
		CommonTree char_literal720_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:945:24: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:946:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal716=(Token)match(input,79,FOLLOW_79_in_constructor_initializer8532); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal716_tree = (CommonTree)adaptor.create(char_literal716);
			adaptor.addChild(root_0, char_literal716_tree);
			}

			set717=input.LT(1);
			if ( input.LA(1)==102||input.LA(1)==180 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set717));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			char_literal718=(Token)match(input,68,FOLLOW_68_in_constructor_initializer8546); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal718_tree = (CommonTree)adaptor.create(char_literal718);
			adaptor.addChild(root_0, char_literal718_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:946:34: ( argument_list )?
			int alt241=2;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==Character_literal||LA241_0==FALSE||(LA241_0 >= Hex_number && LA241_0 <= IDENTIFIER)||(LA241_0 >= MINUS && LA241_0 <= NUMBER)||LA241_0==Real_literal||LA241_0==STRINGLITERAL||LA241_0==TRUE||LA241_0==Verbatim_string_literal||LA241_0==61||LA241_0==66||(LA241_0 >= 68 && LA241_0 <= 69)||(LA241_0 >= 71 && LA241_0 <= 72)||LA241_0==75||LA241_0==79||LA241_0==95||(LA241_0 >= 97 && LA241_0 <= 98)||(LA241_0 >= 100 && LA241_0 <= 103)||(LA241_0 >= 105 && LA241_0 <= 106)||(LA241_0 >= 109 && LA241_0 <= 110)||(LA241_0 >= 114 && LA241_0 <= 117)||(LA241_0 >= 119 && LA241_0 <= 120)||LA241_0==122||LA241_0==126||LA241_0==129||LA241_0==132||LA241_0==135||LA241_0==138||LA241_0==141||(LA241_0 >= 143 && LA241_0 <= 144)||(LA241_0 >= 146 && LA241_0 <= 148)||(LA241_0 >= 150 && LA241_0 <= 152)||(LA241_0 >= 154 && LA241_0 <= 155)||LA241_0==157||LA241_0==160||LA241_0==162||(LA241_0 >= 166 && LA241_0 <= 167)||LA241_0==169||(LA241_0 >= 171 && LA241_0 <= 174)||LA241_0==177||LA241_0==180||(LA241_0 >= 183 && LA241_0 <= 187)||(LA241_0 >= 189 && LA241_0 <= 190)||LA241_0==194||LA241_0==196||LA241_0==202) ) {
				alt241=1;
			}
			switch (alt241) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:946:34: argument_list
					{
					pushFollow(FOLLOW_argument_list_in_constructor_initializer8550);
					argument_list719=argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list719.getTree());

					}
					break;

			}

			char_literal720=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer8555); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal720_tree = (CommonTree)adaptor.create(char_literal720);
			adaptor.addChild(root_0, char_literal720_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 238, constructor_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constructor_initializer"


	public static class constructor_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constructor_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:947:1: constructor_body : block ;
	public final csParser.constructor_body_return constructor_body() throws RecognitionException {
		csParser.constructor_body_return retval = new csParser.constructor_body_return();
		retval.start = input.LT(1);
		int constructor_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope block721 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:947:17: ( block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:948:2: block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_constructor_body8563);
			block721=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block721.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 239, constructor_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constructor_body"


	public static class destructor_declaration_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "destructor_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:957:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
	public final csParser.destructor_declaration_return destructor_declaration() throws RecognitionException {
		csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
		retval.start = input.LT(1);
		int destructor_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal722=null;
		Token char_literal724=null;
		Token char_literal725=null;
		ParserRuleReturnScope identifier723 =null;
		ParserRuleReturnScope destructor_body726 =null;

		CommonTree char_literal722_tree=null;
		CommonTree char_literal724_tree=null;
		CommonTree char_literal725_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:957:23: ( '~' identifier '(' ')' destructor_body )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:958:2: '~' identifier '(' ')' destructor_body
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal722=(Token)match(input,202,FOLLOW_202_in_destructor_declaration8579); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal722_tree = (CommonTree)adaptor.create(char_literal722);
			adaptor.addChild(root_0, char_literal722_tree);
			}

			pushFollow(FOLLOW_identifier_in_destructor_declaration8582);
			identifier723=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier723.getTree());

			char_literal724=(Token)match(input,68,FOLLOW_68_in_destructor_declaration8586); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal724_tree = (CommonTree)adaptor.create(char_literal724);
			adaptor.addChild(root_0, char_literal724_tree);
			}

			char_literal725=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration8590); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal725_tree = (CommonTree)adaptor.create(char_literal725);
			adaptor.addChild(root_0, char_literal725_tree);
			}

			pushFollow(FOLLOW_destructor_body_in_destructor_declaration8595);
			destructor_body726=destructor_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, destructor_body726.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 240, destructor_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "destructor_declaration"


	public static class destructor_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "destructor_body"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:959:1: destructor_body : block ;
	public final csParser.destructor_body_return destructor_body() throws RecognitionException {
		csParser.destructor_body_return retval = new csParser.destructor_body_return();
		retval.start = input.LT(1);
		int destructor_body_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope block727 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:959:16: ( block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:960:2: block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_destructor_body8603);
			block727=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block727.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 241, destructor_body_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "destructor_body"


	public static class invocation_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "invocation_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:963:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
	public final csParser.invocation_expression_return invocation_expression() throws RecognitionException {
		csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
		retval.start = input.LT(1);
		int invocation_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope invocation_start728 =null;
		ParserRuleReturnScope arguments729 =null;
		ParserRuleReturnScope invocation_part730 =null;
		ParserRuleReturnScope invocation_part731 =null;
		ParserRuleReturnScope arguments732 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:963:22: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_invocation_start_in_invocation_expression8613);
			invocation_start728=invocation_start();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_start728.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
			loop242:
			while (true) {
				int alt242=3;
				int LA242_0 = input.LA(1);
				if ( (LA242_0==68) ) {
					int LA242_1 = input.LA(2);
					if ( (synpred31_cs()) ) {
						alt242=1;
					}

				}
				else if ( (LA242_0==DOT||LA242_0==PTR||LA242_0==91) ) {
					alt242=2;
				}

				switch (alt242) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
					{
					pushFollow(FOLLOW_arguments_in_invocation_expression8635);
					arguments729=arguments();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments729.getTree());

					pushFollow(FOLLOW_invocation_part_in_invocation_expression8639);
					invocation_part730=invocation_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part730.getTree());

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:965:9: invocation_part
					{
					pushFollow(FOLLOW_invocation_part_in_invocation_expression8650);
					invocation_part731=invocation_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part731.getTree());

					}
					break;

				default :
					break loop242;
				}
			}

			pushFollow(FOLLOW_arguments_in_invocation_expression8656);
			arguments732=arguments();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments732.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 242, invocation_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "invocation_expression"


	public static class invocation_start_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "invocation_start"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:966:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
	public final csParser.invocation_start_return invocation_start() throws RecognitionException {
		csParser.invocation_start_return retval = new csParser.invocation_start_return();
		retval.start = input.LT(1);
		int invocation_start_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal736=null;
		Token string_literal737=null;
		Token string_literal739=null;
		ParserRuleReturnScope predefined_type733 =null;
		ParserRuleReturnScope identifier734 =null;
		ParserRuleReturnScope generic_argument_list735 =null;
		ParserRuleReturnScope identifier738 =null;
		ParserRuleReturnScope identifier740 =null;
		ParserRuleReturnScope typeof_expression741 =null;

		CommonTree string_literal736_tree=null;
		CommonTree string_literal737_tree=null;
		CommonTree string_literal739_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:966:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
			int alt244=6;
			switch ( input.LA(1) ) {
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt244=1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA244_2 = input.LA(2);
				if ( (LA244_2==81) && (synpred32_cs())) {
					alt244=2;
				}
				else if ( (LA244_2==DOT||LA244_2==PTR||LA244_2==68||LA244_2==80||LA244_2==91) ) {
					alt244=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 244, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 180:
				{
				alt244=3;
				}
				break;
			case 102:
				{
				alt244=4;
				}
				break;
			case 184:
				{
				alt244=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 244, 0, input);
				throw nvae;
			}
			switch (alt244) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:967:2: predefined_type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_predefined_type_in_invocation_start8664);
					predefined_type733=predefined_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type733.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:968:4: ( identifier '<' )=> identifier generic_argument_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_invocation_start8681);
					identifier734=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier734.getTree());

					pushFollow(FOLLOW_generic_argument_list_in_invocation_start8685);
					generic_argument_list735=generic_argument_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list735.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:969:4: 'this'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal736=(Token)match(input,180,FOLLOW_180_in_invocation_start8690); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal736_tree = (CommonTree)adaptor.create(string_literal736);
					adaptor.addChild(root_0, string_literal736_tree);
					}

					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:970:4: 'base'
					{
					root_0 = (CommonTree)adaptor.nil();


					string_literal737=(Token)match(input,102,FOLLOW_102_in_invocation_start8696); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal737_tree = (CommonTree)adaptor.create(string_literal737);
					adaptor.addChild(root_0, string_literal737_tree);
					}

					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:971:4: identifier ( '::' identifier )?
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_invocation_start8701);
					identifier738=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier738.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:971:17: ( '::' identifier )?
					int alt243=2;
					int LA243_0 = input.LA(1);
					if ( (LA243_0==80) ) {
						alt243=1;
					}
					switch (alt243) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:971:18: '::' identifier
							{
							string_literal739=(Token)match(input,80,FOLLOW_80_in_invocation_start8706); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal739_tree = (CommonTree)adaptor.create(string_literal739);
							adaptor.addChild(root_0, string_literal739_tree);
							}

							pushFollow(FOLLOW_identifier_in_invocation_start8710);
							identifier740=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier740.getTree());

							}
							break;

					}

					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:972:4: typeof_expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_typeof_expression_in_invocation_start8717);
					typeof_expression741=typeof_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression741.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 243, invocation_start_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "invocation_start"


	public static class invocation_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "invocation_part"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:974:1: invocation_part : ( access_identifier | brackets );
	public final csParser.invocation_part_return invocation_part() throws RecognitionException {
		csParser.invocation_part_return retval = new csParser.invocation_part_return();
		retval.start = input.LT(1);
		int invocation_part_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope access_identifier742 =null;
		ParserRuleReturnScope brackets743 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:974:16: ( access_identifier | brackets )
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==DOT||LA245_0==PTR) ) {
				alt245=1;
			}
			else if ( (LA245_0==91) ) {
				alt245=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}

			switch (alt245) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:975:3: access_identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_access_identifier_in_invocation_part8740);
					access_identifier742=access_identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier742.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:976:4: brackets
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brackets_in_invocation_part8745);
					brackets743=brackets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets743.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 244, invocation_part_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "invocation_part"


	public static class statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:981:1: statement returns [statement t] : ( ( declaration_statement )=>a= declaration_statement | ( identifier ':' )=>b= labeled_statement |c= embedded_statement );
	public final csParser.statement_return statement() throws RecognitionException {
		csParser.statement_return retval = new csParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:981:33: ( ( declaration_statement )=>a= declaration_statement | ( identifier ':' )=>b= labeled_statement |c= embedded_statement )
			int alt246=3;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==190) ) {
				int LA246_1 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (synpred34_cs()) ) {
					alt246=2;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}
			else if ( (LA246_0==120) ) {
				int LA246_2 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (synpred34_cs()) ) {
					alt246=2;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}
			else if ( (LA246_0==103||LA246_0==106||LA246_0==109||LA246_0==114||LA246_0==119||LA246_0==129||LA246_0==138||LA246_0==146||LA246_0==151||LA246_0==169||LA246_0==173||LA246_0==177||(LA246_0 >= 185 && LA246_0 <= 186)||LA246_0==189) ) {
				int LA246_3 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}
			else if ( (LA246_0==196) ) {
				int LA246_4 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (synpred34_cs()) ) {
					alt246=2;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}
			else if ( (LA246_0==192) && (synpred33_cs())) {
				alt246=1;
			}
			else if ( (LA246_0==112) && (synpred33_cs())) {
				alt246=1;
			}
			else if ( (LA246_0==Character_literal||LA246_0==FALSE||LA246_0==Hex_number||LA246_0==IF||(LA246_0 >= MINUS && LA246_0 <= NUMBER)||LA246_0==Real_literal||(LA246_0 >= SEMI && LA246_0 <= STRINGLITERAL)||LA246_0==TRUE||(LA246_0 >= USING && LA246_0 <= Verbatim_string_literal)||LA246_0==61||LA246_0==66||(LA246_0 >= 68 && LA246_0 <= 69)||(LA246_0 >= 71 && LA246_0 <= 72)||LA246_0==75||LA246_0==102||LA246_0==104||LA246_0==110||LA246_0==113||(LA246_0 >= 115 && LA246_0 <= 116)||LA246_0==118||LA246_0==128||(LA246_0 >= 130 && LA246_0 <= 131)||LA246_0==134||LA246_0==145||LA246_0==150||LA246_0==168||LA246_0==174||(LA246_0 >= 179 && LA246_0 <= 182)||LA246_0==184||(LA246_0 >= 187 && LA246_0 <= 188)||LA246_0==195||LA246_0==197||LA246_0==202) ) {
				alt246=3;
			}
			else if ( (LA246_0==132) ) {
				int LA246_25 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (synpred34_cs()) ) {
					alt246=2;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}
			else if ( (LA246_0==IDENTIFIER||LA246_0==95||(LA246_0 >= 97 && LA246_0 <= 98)||(LA246_0 >= 100 && LA246_0 <= 101)||LA246_0==105||LA246_0==117||LA246_0==122||LA246_0==126||LA246_0==135||LA246_0==141||(LA246_0 >= 143 && LA246_0 <= 144)||(LA246_0 >= 147 && LA246_0 <= 148)||LA246_0==152||LA246_0==154||LA246_0==157||LA246_0==160||LA246_0==162||LA246_0==167||(LA246_0 >= 171 && LA246_0 <= 172)||LA246_0==183||LA246_0==194) ) {
				int LA246_53 = input.LA(2);
				if ( (synpred33_cs()) ) {
					alt246=1;
				}
				else if ( (synpred34_cs()) ) {
					alt246=2;
				}
				else if ( (true) ) {
					alt246=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 246, 0, input);
				throw nvae;
			}

			switch (alt246) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:982:9: ( declaration_statement )=>a= declaration_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_declaration_statement_in_statement8777);
					a=declaration_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.declaration_statement_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:983:11: ( identifier ':' )=>b= labeled_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_labeled_statement_in_statement8803);
					b=labeled_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t = (b!=null?((csParser.labeled_statement_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:984:11: c= embedded_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_embedded_statement_in_statement8819);
					c=embedded_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t = (c!=null?((csParser.embedded_statement_return)c).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 245, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class embedded_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "embedded_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:986:1: embedded_statement returns [statement t] : (a= block |b= selection_statement |c= iteration_statement |d= jump_statement |e= try_statement |f= checked_statement |g= unchecked_statement |h= lock_statement |i= using_statement |j= yield_statement |k= unsafe_statement |l= fixed_statement |m= expression_statement );
	public final csParser.embedded_statement_return embedded_statement() throws RecognitionException {
		csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
		retval.start = input.LT(1);
		int embedded_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope e =null;
		ParserRuleReturnScope f =null;
		ParserRuleReturnScope g =null;
		ParserRuleReturnScope h =null;
		ParserRuleReturnScope i =null;
		ParserRuleReturnScope j =null;
		ParserRuleReturnScope k =null;
		ParserRuleReturnScope l =null;
		ParserRuleReturnScope m =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:986:42: (a= block |b= selection_statement |c= iteration_statement |d= jump_statement |e= try_statement |f= checked_statement |g= unchecked_statement |h= lock_statement |i= using_statement |j= yield_statement |k= unsafe_statement |l= fixed_statement |m= expression_statement )
			int alt247=13;
			switch ( input.LA(1) ) {
			case SEMI:
			case 197:
				{
				alt247=1;
				}
				break;
			case IF:
			case 179:
				{
				alt247=2;
				}
				break;
			case 118:
			case 130:
			case 131:
			case 195:
				{
				alt247=3;
				}
				break;
			case 104:
			case 113:
			case 134:
			case 168:
			case 181:
				{
				alt247=4;
				}
				break;
			case 182:
				{
				alt247=5;
				}
				break;
			case 110:
				{
				int LA247_6 = input.LA(2);
				if ( (LA247_6==68) ) {
					alt247=13;
				}
				else if ( (LA247_6==SEMI||LA247_6==197) ) {
					alt247=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 187:
				{
				int LA247_7 = input.LA(2);
				if ( (LA247_7==68) ) {
					alt247=13;
				}
				else if ( (LA247_7==SEMI||LA247_7==197) ) {
					alt247=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 145:
				{
				alt247=8;
				}
				break;
			case USING:
				{
				alt247=9;
				}
				break;
			case 196:
				{
				int LA247_10 = input.LA(2);
				if ( (LA247_10==104||LA247_10==168) ) {
					alt247=10;
				}
				else if ( (LA247_10==DOT||LA247_10==GT||LA247_10==MINUS||LA247_10==PTR||LA247_10==SEMI||(LA247_10 >= 62 && LA247_10 <= 78)||(LA247_10 >= 80 && LA247_10 <= 91)||(LA247_10 >= 93 && LA247_10 <= 94)||LA247_10==99||LA247_10==142||(LA247_10 >= 198 && LA247_10 <= 200)) ) {
					alt247=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 188:
				{
				alt247=11;
				}
				break;
			case 128:
				{
				alt247=12;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 202:
				{
				alt247=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				throw nvae;
			}
			switch (alt247) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:987:9: a= block
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_block_in_embedded_statement8852);
					a=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.block_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:988:11: b= selection_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_selection_statement_in_embedded_statement8868);
					b=selection_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.selection_statement_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:989:11: c= iteration_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_iteration_statement_in_embedded_statement8891);
					c=iteration_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.iteration_statement_return)c).t:null);}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:990:11: d= jump_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_jump_statement_in_embedded_statement8914);
					d=jump_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					if ( state.backtracking==0 ) {retval.t =(d!=null?((csParser.jump_statement_return)d).t:null);}
					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:991:11: e= try_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_try_statement_in_embedded_statement8946);
					e=try_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

					if ( state.backtracking==0 ) {retval.t =(e!=null?((csParser.try_statement_return)e).t:null);}
					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:992:11: f= checked_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_checked_statement_in_embedded_statement8963);
					f=checked_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, f.getTree());

					if ( state.backtracking==0 ) {retval.t =(f!=null?((csParser.checked_statement_return)f).t:null);}
					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:993:11: g= unchecked_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unchecked_statement_in_embedded_statement8980);
					g=unchecked_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, g.getTree());

					if ( state.backtracking==0 ) {retval.t =(g!=null?((csParser.unchecked_statement_return)g).t:null);}
					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:994:11: h= lock_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lock_statement_in_embedded_statement8997);
					h=lock_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, h.getTree());

					if ( state.backtracking==0 ) {retval.t =(h!=null?((csParser.lock_statement_return)h).t:null);}
					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:995:11: i= using_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_using_statement_in_embedded_statement9013);
					i=using_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());

					if ( state.backtracking==0 ) {retval.t =(i!=null?((csParser.using_statement_return)i).t:null);}
					}
					break;
				case 10 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:996:11: j= yield_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_yield_statement_in_embedded_statement9030);
					j=yield_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());

					if ( state.backtracking==0 ) {retval.t =(j!=null?((csParser.yield_statement_return)j).t:null);}
					}
					break;
				case 11 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:997:11: k= unsafe_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unsafe_statement_in_embedded_statement9048);
					k=unsafe_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());

					if ( state.backtracking==0 ) {retval.t =(k!=null?((csParser.unsafe_statement_return)k).t:null);}
					}
					break;
				case 12 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:998:11: l= fixed_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fixed_statement_in_embedded_statement9065);
					l=fixed_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, l.getTree());

					if ( state.backtracking==0 ) {retval.t =(l!=null?((csParser.fixed_statement_return)l).t:null);}
					}
					break;
				case 13 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:999:11: m= expression_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_statement_in_embedded_statement9082);
					m=expression_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());

					if ( state.backtracking==0 ) {retval.t =(m!=null?((csParser.expression_statement_return)m).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 246, embedded_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "embedded_statement"


	public static class fixed_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1002:1: fixed_statement returns [UnknownNode t] : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
	public final csParser.fixed_statement_return fixed_statement() throws RecognitionException {
		csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
		retval.start = input.LT(1);
		int fixed_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal744=null;
		Token char_literal745=null;
		Token char_literal748=null;
		ParserRuleReturnScope pointer_type746 =null;
		ParserRuleReturnScope fixed_pointer_declarators747 =null;
		ParserRuleReturnScope embedded_statement749 =null;

		CommonTree string_literal744_tree=null;
		CommonTree char_literal745_tree=null;
		CommonTree char_literal748_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1003:37: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1004:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal744=(Token)match(input,128,FOLLOW_128_in_fixed_statement9120); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal744_tree = (CommonTree)adaptor.create(string_literal744);
			adaptor.addChild(root_0, string_literal744_tree);
			}

			char_literal745=(Token)match(input,68,FOLLOW_68_in_fixed_statement9124); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal745_tree = (CommonTree)adaptor.create(char_literal745);
			adaptor.addChild(root_0, char_literal745_tree);
			}

			pushFollow(FOLLOW_pointer_type_in_fixed_statement9128);
			pointer_type746=pointer_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_type746.getTree());

			pushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement9130);
			fixed_pointer_declarators747=fixed_pointer_declarators();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarators747.getTree());

			char_literal748=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement9134); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal748_tree = (CommonTree)adaptor.create(char_literal748);
			adaptor.addChild(root_0, char_literal748_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_fixed_statement9138);
			embedded_statement749=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement749.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 247, fixed_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_statement"


	public static class fixed_pointer_declarators_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_pointer_declarators"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1005:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
	public final csParser.fixed_pointer_declarators_return fixed_pointer_declarators() throws RecognitionException {
		csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
		retval.start = input.LT(1);
		int fixed_pointer_declarators_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal751=null;
		ParserRuleReturnScope fixed_pointer_declarator750 =null;
		ParserRuleReturnScope fixed_pointer_declarator752 =null;

		CommonTree char_literal751_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1005:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1006:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9146);
			fixed_pointer_declarator750=fixed_pointer_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator750.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1006:29: ( ',' fixed_pointer_declarator )*
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==74) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1006:30: ',' fixed_pointer_declarator
					{
					char_literal751=(Token)match(input,74,FOLLOW_74_in_fixed_pointer_declarators9151); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal751_tree = (CommonTree)adaptor.create(char_literal751);
					adaptor.addChild(root_0, char_literal751_tree);
					}

					pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9155);
					fixed_pointer_declarator752=fixed_pointer_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator752.getTree());

					}
					break;

				default :
					break loop248;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 248, fixed_pointer_declarators_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_pointer_declarators"


	public static class fixed_pointer_declarator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_pointer_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1007:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
	public final csParser.fixed_pointer_declarator_return fixed_pointer_declarator() throws RecognitionException {
		csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
		retval.start = input.LT(1);
		int fixed_pointer_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal754=null;
		ParserRuleReturnScope identifier753 =null;
		ParserRuleReturnScope fixed_pointer_initializer755 =null;

		CommonTree char_literal754_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1007:25: ( identifier '=' fixed_pointer_initializer )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1008:2: identifier '=' fixed_pointer_initializer
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_fixed_pointer_declarator9165);
			identifier753=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier753.getTree());

			char_literal754=(Token)match(input,85,FOLLOW_85_in_fixed_pointer_declarator9169); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal754_tree = (CommonTree)adaptor.create(char_literal754);
			adaptor.addChild(root_0, char_literal754_tree);
			}

			pushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9173);
			fixed_pointer_initializer755=fixed_pointer_initializer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_initializer755.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 249, fixed_pointer_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_pointer_declarator"


	public static class fixed_pointer_initializer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fixed_pointer_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1009:1: fixed_pointer_initializer : expression ;
	public final csParser.fixed_pointer_initializer_return fixed_pointer_initializer() throws RecognitionException {
		csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
		retval.start = input.LT(1);
		int fixed_pointer_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expression756 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1009:26: ( expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1011:2: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_fixed_pointer_initializer9183);
			expression756=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression756.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 250, fixed_pointer_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fixed_pointer_initializer"


	public static class unsafe_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unsafe_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1012:1: unsafe_statement returns [UnknownNode t] : 'unsafe' block ;
	public final csParser.unsafe_statement_return unsafe_statement() throws RecognitionException {
		csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
		retval.start = input.LT(1);
		int unsafe_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal757=null;
		ParserRuleReturnScope block758 =null;

		CommonTree string_literal757_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1013:37: ( 'unsafe' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1014:2: 'unsafe' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal757=(Token)match(input,188,FOLLOW_188_in_unsafe_statement9201); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal757_tree = (CommonTree)adaptor.create(string_literal757);
			adaptor.addChild(root_0, string_literal757_tree);
			}

			pushFollow(FOLLOW_block_in_unsafe_statement9205);
			block758=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block758.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 251, unsafe_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unsafe_statement"


	public static class labeled_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "labeled_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1015:1: labeled_statement returns [UnknownNode t] : identifier ':' statement ;
	public final csParser.labeled_statement_return labeled_statement() throws RecognitionException {
		csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
		retval.start = input.LT(1);
		int labeled_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal760=null;
		ParserRuleReturnScope identifier759 =null;
		ParserRuleReturnScope statement761 =null;

		CommonTree char_literal760_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1016:37: ( identifier ':' statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1017:9: identifier ':' statement
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_labeled_statement9229);
			identifier759=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier759.getTree());

			char_literal760=(Token)match(input,79,FOLLOW_79_in_labeled_statement9233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal760_tree = (CommonTree)adaptor.create(char_literal760);
			adaptor.addChild(root_0, char_literal760_tree);
			}

			pushFollow(FOLLOW_statement_in_labeled_statement9237);
			statement761=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement761.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 252, labeled_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class declaration_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "declaration_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1018:1: declaration_statement returns [statement t] : (b= local_variable_declaration |c= local_constant_declaration ) ';' ;
	public final csParser.declaration_statement_return declaration_statement() throws RecognitionException {
		csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
		retval.start = input.LT(1);
		int declaration_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal762=null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree char_literal762_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1018:44: ( (b= local_variable_declaration |c= local_constant_declaration ) ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1019:9: (b= local_variable_declaration |c= local_constant_declaration ) ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1019:9: (b= local_variable_declaration |c= local_constant_declaration )
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==IDENTIFIER||LA249_0==95||(LA249_0 >= 97 && LA249_0 <= 98)||(LA249_0 >= 100 && LA249_0 <= 101)||LA249_0==103||(LA249_0 >= 105 && LA249_0 <= 106)||LA249_0==109||LA249_0==114||LA249_0==117||(LA249_0 >= 119 && LA249_0 <= 120)||LA249_0==122||LA249_0==126||LA249_0==129||LA249_0==132||LA249_0==135||LA249_0==138||LA249_0==141||(LA249_0 >= 143 && LA249_0 <= 144)||(LA249_0 >= 146 && LA249_0 <= 148)||(LA249_0 >= 151 && LA249_0 <= 152)||LA249_0==154||LA249_0==157||LA249_0==160||LA249_0==162||LA249_0==167||LA249_0==169||(LA249_0 >= 171 && LA249_0 <= 173)||LA249_0==177||LA249_0==183||(LA249_0 >= 185 && LA249_0 <= 186)||(LA249_0 >= 189 && LA249_0 <= 190)||LA249_0==192||LA249_0==194||LA249_0==196) ) {
				alt249=1;
			}
			else if ( (LA249_0==112) ) {
				alt249=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 249, 0, input);
				throw nvae;
			}

			switch (alt249) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1019:10: b= local_variable_declaration
					{
					pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement9259);
					b=local_variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.local_variable_declaration_return)b).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1020:11: c= local_constant_declaration
					{
					pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement9275);
					c=local_constant_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.local_constant_declaration_return)c).t:null);}
					}
					break;

			}

			char_literal762=(Token)match(input,SEMI,FOLLOW_SEMI_in_declaration_statement9281); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal762_tree = (CommonTree)adaptor.create(char_literal762);
			adaptor.addChild(root_0, char_literal762_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 253, declaration_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declaration_statement"


	public static class local_variable_declaration_return extends ParserRuleReturnScope {
		public local_variable_declaration t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1022:1: local_variable_declaration returns [local_variable_declaration t] : a= local_variable_type b= local_variable_declarators ;
	public final csParser.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
		csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
		retval.start = input.LT(1);
		int local_variable_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1023:32: (a= local_variable_type b= local_variable_declarators )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1024:9: a= local_variable_type b= local_variable_declarators
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_local_variable_type_in_local_variable_declaration9309);
			a=local_variable_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration9315);
			b=local_variable_declarators();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t = new local_variable_declaration((a!=null?((csParser.local_variable_type_return)a).t:null),(b!=null?((csParser.local_variable_declarators_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 254, local_variable_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_declaration"


	public static class local_variable_type_return extends ParserRuleReturnScope {
		public type t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1026:1: local_variable_type returns [type t] : ( ( 'var' )=>a= 'var' | ( 'dynamic' )=>b= 'dynamic' |c= type );
	public final csParser.local_variable_type_return local_variable_type() throws RecognitionException {
		csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
		retval.start = input.LT(1);
		int local_variable_type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token a=null;
		Token b=null;
		ParserRuleReturnScope c =null;

		CommonTree a_tree=null;
		CommonTree b_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1026:37: ( ( 'var' )=>a= 'var' | ( 'dynamic' )=>b= 'dynamic' |c= type )
			int alt250=3;
			switch ( input.LA(1) ) {
			case 190:
				{
				int LA250_1 = input.LA(2);
				if ( (synpred35_cs()) ) {
					alt250=1;
				}
				else if ( (true) ) {
					alt250=3;
				}

				}
				break;
			case 120:
				{
				int LA250_2 = input.LA(2);
				if ( (synpred36_cs()) ) {
					alt250=2;
				}
				else if ( (true) ) {
					alt250=3;
				}

				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 192:
			case 194:
			case 196:
				{
				alt250=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}
			switch (alt250) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1027:9: ( 'var' )=>a= 'var'
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,190,FOLLOW_190_in_local_variable_type9353); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t =new type(a_tree);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1028:11: ( 'dynamic' )=>b= 'dynamic'
					{
					root_0 = (CommonTree)adaptor.nil();


					b=(Token)match(input,120,FOLLOW_120_in_local_variable_type9375); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					b_tree = (CommonTree)adaptor.create(b);
					adaptor.addChild(root_0, b_tree);
					}

					if ( state.backtracking==0 ) {retval.t =new type(b_tree);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1029:11: c= type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_type_in_local_variable_type9391);
					c=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.type_return)c).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 255, local_variable_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_type"


	public static class local_variable_declarators_return extends ParserRuleReturnScope {
		public local_variable_declarators t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_declarators"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1030:1: local_variable_declarators returns [local_variable_declarators t] : a= local_variable_declarator ( ',' a= local_variable_declarator )* ;
	public final csParser.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
		csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
		retval.start = input.LT(1);
		int local_variable_declarators_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal763=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal763_tree=null;

		local_variable_declarators res=new local_variable_declarators();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1032:39: (a= local_variable_declarator ( ',' a= local_variable_declarator )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1033:9: a= local_variable_declarator ( ',' a= local_variable_declarator )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators9427);
			a=local_variable_declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.local_variable_declarator_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1033:54: ( ',' a= local_variable_declarator )*
			loop251:
			while (true) {
				int alt251=2;
				int LA251_0 = input.LA(1);
				if ( (LA251_0==74) ) {
					alt251=1;
				}

				switch (alt251) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1033:55: ',' a= local_variable_declarator
					{
					char_literal763=(Token)match(input,74,FOLLOW_74_in_local_variable_declarators9432); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal763_tree = (CommonTree)adaptor.create(char_literal763);
					adaptor.addChild(root_0, char_literal763_tree);
					}

					pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators9436);
					a=local_variable_declarator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.local_variable_declarator_return)a).t:null));}
					}
					break;

				default :
					break loop251;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 256, local_variable_declarators_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_declarators"


	public static class local_variable_declarator_return extends ParserRuleReturnScope {
		public local_variable_declarator t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_declarator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1034:1: local_variable_declarator returns [local_variable_declarator t] : a= identifier ( '=' b= local_variable_initializer )? ;
	public final csParser.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
		csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
		retval.start = input.LT(1);
		int local_variable_declarator_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal764=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree char_literal764_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1035:32: (a= identifier ( '=' b= local_variable_initializer )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1036:9: a= identifier ( '=' b= local_variable_initializer )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_local_variable_declarator9468);
			a=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1036:22: ( '=' b= local_variable_initializer )?
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==85) ) {
				alt252=1;
			}
			switch (alt252) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1036:23: '=' b= local_variable_initializer
					{
					char_literal764=(Token)match(input,85,FOLLOW_85_in_local_variable_declarator9471); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal764_tree = (CommonTree)adaptor.create(char_literal764);
					adaptor.addChild(root_0, char_literal764_tree);
					}

					pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator9477);
					b=local_variable_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t =new local_variable_declarator((a!=null?((csParser.identifier_return)a).t:null),(b!=null?((csParser.local_variable_initializer_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 257, local_variable_declarator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_declarator"


	public static class local_variable_initializer_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1037:1: local_variable_initializer returns [expression t] : (a= expression |b= array_initializer |c= stackalloc_initializer );
	public final csParser.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
		csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
		retval.start = input.LT(1);
		int local_variable_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1037:50: (a= expression |b= array_initializer |c= stackalloc_initializer )
			int alt253=3;
			switch ( input.LA(1) ) {
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt253=1;
				}
				break;
			case 197:
				{
				alt253=2;
				}
				break;
			case 175:
				{
				alt253=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1038:9: a= expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_local_variable_initializer9504);
					a=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.expression_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1039:11: b= array_initializer
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_array_initializer_in_local_variable_initializer9520);
					b=array_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.array_initializer_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1040:11: c= stackalloc_initializer
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer9536);
					c=stackalloc_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.stackalloc_initializer_return)c).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 258, local_variable_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_initializer"


	public static class stackalloc_initializer_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "stackalloc_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1041:1: stackalloc_initializer returns [UnknownNode t] : 'stackalloc' unmanaged_type '[' expression ']' ;
	public final csParser.stackalloc_initializer_return stackalloc_initializer() throws RecognitionException {
		csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
		retval.start = input.LT(1);
		int stackalloc_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal765=null;
		Token char_literal767=null;
		Token char_literal769=null;
		ParserRuleReturnScope unmanaged_type766 =null;
		ParserRuleReturnScope expression768 =null;

		CommonTree string_literal765_tree=null;
		CommonTree char_literal767_tree=null;
		CommonTree char_literal769_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1042:37: ( 'stackalloc' unmanaged_type '[' expression ']' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1043:9: 'stackalloc' unmanaged_type '[' expression ']'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal765=(Token)match(input,175,FOLLOW_175_in_stackalloc_initializer9564); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal765_tree = (CommonTree)adaptor.create(string_literal765);
			adaptor.addChild(root_0, string_literal765_tree);
			}

			pushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer9568);
			unmanaged_type766=unmanaged_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type766.getTree());

			char_literal767=(Token)match(input,91,FOLLOW_91_in_stackalloc_initializer9572); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal767_tree = (CommonTree)adaptor.create(char_literal767);
			adaptor.addChild(root_0, char_literal767_tree);
			}

			pushFollow(FOLLOW_expression_in_stackalloc_initializer9576);
			expression768=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression768.getTree());

			char_literal769=(Token)match(input,92,FOLLOW_92_in_stackalloc_initializer9580); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal769_tree = (CommonTree)adaptor.create(char_literal769);
			adaptor.addChild(root_0, char_literal769_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 259, stackalloc_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stackalloc_initializer"


	public static class local_constant_declaration_return extends ParserRuleReturnScope {
		public local_constant_declaration t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_constant_declaration"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1044:1: local_constant_declaration returns [local_constant_declaration t] : 'const' a= type b= constant_declarators ;
	public final csParser.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
		csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
		retval.start = input.LT(1);
		int local_constant_declaration_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal770=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree string_literal770_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1045:32: ( 'const' a= type b= constant_declarators )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1046:9: 'const' a= type b= constant_declarators
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal770=(Token)match(input,112,FOLLOW_112_in_local_constant_declaration9606); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal770_tree = (CommonTree)adaptor.create(string_literal770);
			adaptor.addChild(root_0, string_literal770_tree);
			}

			pushFollow(FOLLOW_type_in_local_constant_declaration9612);
			a=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration9618);
			b=constant_declarators();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t =new local_constant_declaration((a!=null?((csParser.type_return)a).t:null),(b!=null?((csParser.constant_declarators_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 260, local_constant_declaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_constant_declaration"


	public static class expression_statement_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1047:1: expression_statement returns [expression t] : a= expression ';' ;
	public final csParser.expression_statement_return expression_statement() throws RecognitionException {
		csParser.expression_statement_return retval = new csParser.expression_statement_return();
		retval.start = input.LT(1);
		int expression_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal771=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal771_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1047:46: (a= expression ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1048:9: a= expression ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expression_statement9643);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal771=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_statement9647); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal771_tree = (CommonTree)adaptor.create(char_literal771);
			adaptor.addChild(root_0, char_literal771_tree);
			}

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 261, expression_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression_statement"


	public static class statement_expression_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement_expression"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1051:1: statement_expression returns [expression t] : a= expression ;
	public final csParser.statement_expression_return statement_expression() throws RecognitionException {
		csParser.statement_expression_return retval = new csParser.statement_expression_return();
		retval.start = input.LT(1);
		int statement_expression_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1051:45: (a= expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1052:2: a= expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_statement_expression9666);
			a=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 262, statement_expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement_expression"


	public static class selection_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selection_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1054:1: selection_statement returns [statement t] : (a= if_statement |b= switch_statement );
	public final csParser.selection_statement_return selection_statement() throws RecognitionException {
		csParser.selection_statement_return retval = new csParser.selection_statement_return();
		retval.start = input.LT(1);
		int selection_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1054:43: (a= if_statement |b= switch_statement )
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==IF) ) {
				alt254=1;
			}
			else if ( (LA254_0==179) ) {
				alt254=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 254, 0, input);
				throw nvae;
			}

			switch (alt254) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1055:2: a= if_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_if_statement_in_selection_statement9684);
					a=if_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.if_statement_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1056:4: b= switch_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_switch_statement_in_selection_statement9693);
					b=switch_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.switch_statement_return)b).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 263, selection_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "selection_statement"


	public static class if_statement_return extends ParserRuleReturnScope {
		public if_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "if_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1057:1: if_statement returns [if_statement t] : 'if' '(' a= boolean_expression ')' b= embedded_statement ( ( 'else' )=>c= else_statement )? ;
	public final csParser.if_statement_return if_statement() throws RecognitionException {
		csParser.if_statement_return retval = new csParser.if_statement_return();
		retval.start = input.LT(1);
		int if_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal772=null;
		Token char_literal773=null;
		Token char_literal774=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;

		CommonTree string_literal772_tree=null;
		CommonTree char_literal773_tree=null;
		CommonTree char_literal774_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1058:32: ( 'if' '(' a= boolean_expression ')' b= embedded_statement ( ( 'else' )=>c= else_statement )? )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1060:2: 'if' '(' a= boolean_expression ')' b= embedded_statement ( ( 'else' )=>c= else_statement )?
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal772=(Token)match(input,IF,FOLLOW_IF_in_if_statement9716); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal772_tree = (CommonTree)adaptor.create(string_literal772);
			adaptor.addChild(root_0, string_literal772_tree);
			}

			char_literal773=(Token)match(input,68,FOLLOW_68_in_if_statement9720); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal773_tree = (CommonTree)adaptor.create(char_literal773);
			adaptor.addChild(root_0, char_literal773_tree);
			}

			pushFollow(FOLLOW_boolean_expression_in_if_statement9726);
			a=boolean_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal774=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_if_statement9730); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal774_tree = (CommonTree)adaptor.create(char_literal774);
			adaptor.addChild(root_0, char_literal774_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_if_statement9736);
			b=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1060:65: ( ( 'else' )=>c= else_statement )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==121) ) {
				int LA255_1 = input.LA(2);
				if ( (synpred37_cs()) ) {
					alt255=1;
				}
			}
			switch (alt255) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1060:66: ( 'else' )=>c= else_statement
					{
					pushFollow(FOLLOW_else_statement_in_if_statement9747);
					c=else_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {retval.t = new if_statement((a!=null?((csParser.boolean_expression_return)a).t:null),(b!=null?((csParser.embedded_statement_return)b).t:null),(c!=null?((csParser.else_statement_return)c).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 264, if_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class else_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "else_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1062:1: else_statement returns [statement t] : 'else' a= embedded_statement ;
	public final csParser.else_statement_return else_statement() throws RecognitionException {
		csParser.else_statement_return retval = new csParser.else_statement_return();
		retval.start = input.LT(1);
		int else_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal775=null;
		ParserRuleReturnScope a =null;

		CommonTree string_literal775_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1062:38: ( 'else' a= embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1063:2: 'else' a= embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal775=(Token)match(input,121,FOLLOW_121_in_else_statement9765); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal775_tree = (CommonTree)adaptor.create(string_literal775);
			adaptor.addChild(root_0, string_literal775_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_else_statement9771);
			a=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.embedded_statement_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 265, else_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "else_statement"


	public static class switch_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1064:1: switch_statement returns [UnknownNode t] : 'switch' '(' expression ')' switch_block ;
	public final csParser.switch_statement_return switch_statement() throws RecognitionException {
		csParser.switch_statement_return retval = new csParser.switch_statement_return();
		retval.start = input.LT(1);
		int switch_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal776=null;
		Token char_literal777=null;
		Token char_literal779=null;
		ParserRuleReturnScope expression778 =null;
		ParserRuleReturnScope switch_block780 =null;

		CommonTree string_literal776_tree=null;
		CommonTree char_literal777_tree=null;
		CommonTree char_literal779_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1065:37: ( 'switch' '(' expression ')' switch_block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1066:2: 'switch' '(' expression ')' switch_block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal776=(Token)match(input,179,FOLLOW_179_in_switch_statement9792); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal776_tree = (CommonTree)adaptor.create(string_literal776);
			adaptor.addChild(root_0, string_literal776_tree);
			}

			char_literal777=(Token)match(input,68,FOLLOW_68_in_switch_statement9796); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal777_tree = (CommonTree)adaptor.create(char_literal777);
			adaptor.addChild(root_0, char_literal777_tree);
			}

			pushFollow(FOLLOW_expression_in_switch_statement9800);
			expression778=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression778.getTree());

			char_literal779=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement9804); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal779_tree = (CommonTree)adaptor.create(char_literal779);
			adaptor.addChild(root_0, char_literal779_tree);
			}

			pushFollow(FOLLOW_switch_block_in_switch_statement9808);
			switch_block780=switch_block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_block780.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 266, switch_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_statement"


	public static class switch_block_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_block"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1067:1: switch_block : '{' ( switch_sections )? '}' ;
	public final csParser.switch_block_return switch_block() throws RecognitionException {
		csParser.switch_block_return retval = new csParser.switch_block_return();
		retval.start = input.LT(1);
		int switch_block_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal781=null;
		Token char_literal783=null;
		ParserRuleReturnScope switch_sections782 =null;

		CommonTree char_literal781_tree=null;
		CommonTree char_literal783_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1067:13: ( '{' ( switch_sections )? '}' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1068:2: '{' ( switch_sections )? '}'
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal781=(Token)match(input,197,FOLLOW_197_in_switch_block9816); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal781_tree = (CommonTree)adaptor.create(char_literal781);
			adaptor.addChild(root_0, char_literal781_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1068:8: ( switch_sections )?
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==107||LA256_0==115) ) {
				alt256=1;
			}
			switch (alt256) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1068:8: switch_sections
					{
					pushFollow(FOLLOW_switch_sections_in_switch_block9820);
					switch_sections782=switch_sections();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_sections782.getTree());

					}
					break;

			}

			char_literal783=(Token)match(input,201,FOLLOW_201_in_switch_block9825); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal783_tree = (CommonTree)adaptor.create(char_literal783);
			adaptor.addChild(root_0, char_literal783_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 267, switch_block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_block"


	public static class switch_sections_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_sections"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1069:1: switch_sections : ( switch_section )+ ;
	public final csParser.switch_sections_return switch_sections() throws RecognitionException {
		csParser.switch_sections_return retval = new csParser.switch_sections_return();
		retval.start = input.LT(1);
		int switch_sections_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope switch_section784 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1069:16: ( ( switch_section )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1070:2: ( switch_section )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1070:2: ( switch_section )+
			int cnt257=0;
			loop257:
			while (true) {
				int alt257=2;
				int LA257_0 = input.LA(1);
				if ( (LA257_0==107||LA257_0==115) ) {
					alt257=1;
				}

				switch (alt257) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1070:2: switch_section
					{
					pushFollow(FOLLOW_switch_section_in_switch_sections9833);
					switch_section784=switch_section();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_section784.getTree());

					}
					break;

				default :
					if ( cnt257 >= 1 ) break loop257;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(257, input);
					throw eee;
				}
				cnt257++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 268, switch_sections_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_sections"


	public static class switch_section_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_section"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1071:1: switch_section : switch_labels statement_list ;
	public final csParser.switch_section_return switch_section() throws RecognitionException {
		csParser.switch_section_return retval = new csParser.switch_section_return();
		retval.start = input.LT(1);
		int switch_section_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope switch_labels785 =null;
		ParserRuleReturnScope statement_list786 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1071:15: ( switch_labels statement_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1072:2: switch_labels statement_list
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_switch_labels_in_switch_section9842);
			switch_labels785=switch_labels();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_labels785.getTree());

			pushFollow(FOLLOW_statement_list_in_switch_section9846);
			statement_list786=statement_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list786.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 269, switch_section_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_section"


	public static class switch_labels_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_labels"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1073:1: switch_labels : ( switch_label )+ ;
	public final csParser.switch_labels_return switch_labels() throws RecognitionException {
		csParser.switch_labels_return retval = new csParser.switch_labels_return();
		retval.start = input.LT(1);
		int switch_labels_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope switch_label787 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1073:14: ( ( switch_label )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1074:2: ( switch_label )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1074:2: ( switch_label )+
			int cnt258=0;
			loop258:
			while (true) {
				int alt258=2;
				int LA258_0 = input.LA(1);
				if ( (LA258_0==115) ) {
					int LA258_2 = input.LA(2);
					if ( (LA258_2==79) ) {
						alt258=1;
					}

				}
				else if ( (LA258_0==107) ) {
					alt258=1;
				}

				switch (alt258) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1074:2: switch_label
					{
					pushFollow(FOLLOW_switch_label_in_switch_labels9854);
					switch_label787=switch_label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_label787.getTree());

					}
					break;

				default :
					if ( cnt258 >= 1 ) break loop258;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(258, input);
					throw eee;
				}
				cnt258++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 270, switch_labels_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_labels"


	public static class switch_label_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switch_label"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1075:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
	public final csParser.switch_label_return switch_label() throws RecognitionException {
		csParser.switch_label_return retval = new csParser.switch_label_return();
		retval.start = input.LT(1);
		int switch_label_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal788=null;
		Token char_literal790=null;
		Token string_literal791=null;
		Token char_literal792=null;
		ParserRuleReturnScope constant_expression789 =null;

		CommonTree string_literal788_tree=null;
		CommonTree char_literal790_tree=null;
		CommonTree string_literal791_tree=null;
		CommonTree char_literal792_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1075:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==107) ) {
				alt259=1;
			}
			else if ( (LA259_0==115) ) {
				alt259=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 259, 0, input);
				throw nvae;
			}

			switch (alt259) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1076:2: ( 'case' constant_expression ':' )
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1076:2: ( 'case' constant_expression ':' )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1076:3: 'case' constant_expression ':'
					{
					string_literal788=(Token)match(input,107,FOLLOW_107_in_switch_label9864); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal788_tree = (CommonTree)adaptor.create(string_literal788);
					adaptor.addChild(root_0, string_literal788_tree);
					}

					pushFollow(FOLLOW_constant_expression_in_switch_label9868);
					constant_expression789=constant_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression789.getTree());

					char_literal790=(Token)match(input,79,FOLLOW_79_in_switch_label9872); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal790_tree = (CommonTree)adaptor.create(char_literal790);
					adaptor.addChild(root_0, char_literal790_tree);
					}

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1077:4: ( 'default' ':' )
					{
					root_0 = (CommonTree)adaptor.nil();


					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1077:4: ( 'default' ':' )
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1077:5: 'default' ':'
					{
					string_literal791=(Token)match(input,115,FOLLOW_115_in_switch_label9879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal791_tree = (CommonTree)adaptor.create(string_literal791);
					adaptor.addChild(root_0, string_literal791_tree);
					}

					char_literal792=(Token)match(input,79,FOLLOW_79_in_switch_label9883); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal792_tree = (CommonTree)adaptor.create(char_literal792);
					adaptor.addChild(root_0, char_literal792_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 271, switch_label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "switch_label"


	public static class iteration_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "iteration_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1078:1: iteration_statement returns [statement t] : (a= while_statement |b= do_statement |c= for_statement |d= foreach_statement );
	public final csParser.iteration_statement_return iteration_statement() throws RecognitionException {
		csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
		retval.start = input.LT(1);
		int iteration_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1078:44: (a= while_statement |b= do_statement |c= for_statement |d= foreach_statement )
			int alt260=4;
			switch ( input.LA(1) ) {
			case 195:
				{
				alt260=1;
				}
				break;
			case 118:
				{
				alt260=2;
				}
				break;
			case 130:
				{
				alt260=3;
				}
				break;
			case 131:
				{
				alt260=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 260, 0, input);
				throw nvae;
			}
			switch (alt260) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1079:2: a= while_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_while_statement_in_iteration_statement9900);
					a=while_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.while_statement_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1080:4: b= do_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_do_statement_in_iteration_statement9909);
					b=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.do_statement_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1081:4: c= for_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_for_statement_in_iteration_statement9918);
					c=for_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t =(c!=null?((csParser.for_statement_return)c).t:null);}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1082:4: d= foreach_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_foreach_statement_in_iteration_statement9927);
					d=foreach_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					if ( state.backtracking==0 ) {retval.t =(d!=null?((csParser.foreach_statement_return)d).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 272, iteration_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "iteration_statement"


	public static class while_statement_return extends ParserRuleReturnScope {
		public while_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "while_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1083:1: while_statement returns [while_statement t] : 'while' '(' a= boolean_expression ')' b= embedded_statement ;
	public final csParser.while_statement_return while_statement() throws RecognitionException {
		csParser.while_statement_return retval = new csParser.while_statement_return();
		retval.start = input.LT(1);
		int while_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal793=null;
		Token char_literal794=null;
		Token char_literal795=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree string_literal793_tree=null;
		CommonTree char_literal794_tree=null;
		CommonTree char_literal795_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1084:32: ( 'while' '(' a= boolean_expression ')' b= embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1085:2: 'while' '(' a= boolean_expression ')' b= embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal793=(Token)match(input,195,FOLLOW_195_in_while_statement9948); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal793_tree = (CommonTree)adaptor.create(string_literal793);
			adaptor.addChild(root_0, string_literal793_tree);
			}

			char_literal794=(Token)match(input,68,FOLLOW_68_in_while_statement9952); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal794_tree = (CommonTree)adaptor.create(char_literal794);
			adaptor.addChild(root_0, char_literal794_tree);
			}

			pushFollow(FOLLOW_boolean_expression_in_while_statement9958);
			a=boolean_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			char_literal795=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_while_statement9962); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal795_tree = (CommonTree)adaptor.create(char_literal795);
			adaptor.addChild(root_0, char_literal795_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_while_statement9968);
			b=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			if ( state.backtracking==0 ) {retval.t = new while_statement((a!=null?((csParser.boolean_expression_return)a).t:null),(b!=null?((csParser.embedded_statement_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 273, while_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "while_statement"


	public static class do_statement_return extends ParserRuleReturnScope {
		public do_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "do_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1086:1: do_statement returns [do_statement t] : 'do' a= embedded_statement 'while' '(' b= boolean_expression ')' ';' ;
	public final csParser.do_statement_return do_statement() throws RecognitionException {
		csParser.do_statement_return retval = new csParser.do_statement_return();
		retval.start = input.LT(1);
		int do_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal796=null;
		Token string_literal797=null;
		Token char_literal798=null;
		Token char_literal799=null;
		Token char_literal800=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;

		CommonTree string_literal796_tree=null;
		CommonTree string_literal797_tree=null;
		CommonTree char_literal798_tree=null;
		CommonTree char_literal799_tree=null;
		CommonTree char_literal800_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1087:32: ( 'do' a= embedded_statement 'while' '(' b= boolean_expression ')' ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1088:2: 'do' a= embedded_statement 'while' '(' b= boolean_expression ')' ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal796=(Token)match(input,118,FOLLOW_118_in_do_statement9988); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal796_tree = (CommonTree)adaptor.create(string_literal796);
			adaptor.addChild(root_0, string_literal796_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_do_statement9994);
			a=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			string_literal797=(Token)match(input,195,FOLLOW_195_in_do_statement9998); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal797_tree = (CommonTree)adaptor.create(string_literal797);
			adaptor.addChild(root_0, string_literal797_tree);
			}

			char_literal798=(Token)match(input,68,FOLLOW_68_in_do_statement10002); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal798_tree = (CommonTree)adaptor.create(char_literal798);
			adaptor.addChild(root_0, char_literal798_tree);
			}

			pushFollow(FOLLOW_boolean_expression_in_do_statement10008);
			b=boolean_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			char_literal799=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_do_statement10012); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal799_tree = (CommonTree)adaptor.create(char_literal799);
			adaptor.addChild(root_0, char_literal799_tree);
			}

			char_literal800=(Token)match(input,SEMI,FOLLOW_SEMI_in_do_statement10016); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal800_tree = (CommonTree)adaptor.create(char_literal800);
			adaptor.addChild(root_0, char_literal800_tree);
			}

			if ( state.backtracking==0 ) {retval.t = new do_statement((a!=null?((csParser.embedded_statement_return)a).t:null),(b!=null?((csParser.boolean_expression_return)b).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 274, do_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "do_statement"


	public static class for_statement_return extends ParserRuleReturnScope {
		public for_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "for_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1089:1: for_statement returns [for_statement t] : 'for' '(' (a= for_initializer )? ';' (b= for_condition )? ';' (c= for_iterator )? ')' d= embedded_statement ;
	public final csParser.for_statement_return for_statement() throws RecognitionException {
		csParser.for_statement_return retval = new csParser.for_statement_return();
		retval.start = input.LT(1);
		int for_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal801=null;
		Token char_literal802=null;
		Token char_literal803=null;
		Token char_literal804=null;
		Token char_literal805=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;

		CommonTree string_literal801_tree=null;
		CommonTree char_literal802_tree=null;
		CommonTree char_literal803_tree=null;
		CommonTree char_literal804_tree=null;
		CommonTree char_literal805_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1090:32: ( 'for' '(' (a= for_initializer )? ';' (b= for_condition )? ';' (c= for_iterator )? ')' d= embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:2: 'for' '(' (a= for_initializer )? ';' (b= for_condition )? ';' (c= for_iterator )? ')' d= embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal801=(Token)match(input,130,FOLLOW_130_in_for_statement10036); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal801_tree = (CommonTree)adaptor.create(string_literal801);
			adaptor.addChild(root_0, string_literal801_tree);
			}

			char_literal802=(Token)match(input,68,FOLLOW_68_in_for_statement10040); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal802_tree = (CommonTree)adaptor.create(char_literal802);
			adaptor.addChild(root_0, char_literal802_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:17: (a= for_initializer )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==Character_literal||LA261_0==FALSE||(LA261_0 >= Hex_number && LA261_0 <= IDENTIFIER)||(LA261_0 >= MINUS && LA261_0 <= NUMBER)||LA261_0==Real_literal||LA261_0==STRINGLITERAL||LA261_0==TRUE||LA261_0==Verbatim_string_literal||LA261_0==61||LA261_0==66||(LA261_0 >= 68 && LA261_0 <= 69)||(LA261_0 >= 71 && LA261_0 <= 72)||LA261_0==75||LA261_0==95||(LA261_0 >= 97 && LA261_0 <= 98)||(LA261_0 >= 100 && LA261_0 <= 103)||(LA261_0 >= 105 && LA261_0 <= 106)||(LA261_0 >= 109 && LA261_0 <= 110)||(LA261_0 >= 114 && LA261_0 <= 117)||(LA261_0 >= 119 && LA261_0 <= 120)||LA261_0==122||LA261_0==126||LA261_0==129||LA261_0==132||LA261_0==135||LA261_0==138||LA261_0==141||(LA261_0 >= 143 && LA261_0 <= 144)||(LA261_0 >= 146 && LA261_0 <= 148)||(LA261_0 >= 150 && LA261_0 <= 152)||LA261_0==154||LA261_0==157||LA261_0==160||LA261_0==162||LA261_0==167||LA261_0==169||(LA261_0 >= 171 && LA261_0 <= 174)||LA261_0==177||LA261_0==180||(LA261_0 >= 183 && LA261_0 <= 187)||(LA261_0 >= 189 && LA261_0 <= 190)||LA261_0==192||LA261_0==194||LA261_0==196||LA261_0==202) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:17: a= for_initializer
					{
					pushFollow(FOLLOW_for_initializer_in_for_statement10046);
					a=for_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			char_literal803=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement10051); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal803_tree = (CommonTree)adaptor.create(char_literal803);
			adaptor.addChild(root_0, char_literal803_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:44: (b= for_condition )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==Character_literal||LA262_0==FALSE||(LA262_0 >= Hex_number && LA262_0 <= IDENTIFIER)||(LA262_0 >= MINUS && LA262_0 <= NUMBER)||LA262_0==Real_literal||LA262_0==STRINGLITERAL||LA262_0==TRUE||LA262_0==Verbatim_string_literal||LA262_0==61||LA262_0==66||(LA262_0 >= 68 && LA262_0 <= 69)||(LA262_0 >= 71 && LA262_0 <= 72)||LA262_0==75||LA262_0==95||(LA262_0 >= 97 && LA262_0 <= 98)||(LA262_0 >= 100 && LA262_0 <= 103)||(LA262_0 >= 105 && LA262_0 <= 106)||(LA262_0 >= 109 && LA262_0 <= 110)||(LA262_0 >= 114 && LA262_0 <= 117)||(LA262_0 >= 119 && LA262_0 <= 120)||LA262_0==122||LA262_0==126||LA262_0==129||LA262_0==132||LA262_0==135||LA262_0==138||LA262_0==141||(LA262_0 >= 143 && LA262_0 <= 144)||(LA262_0 >= 146 && LA262_0 <= 148)||(LA262_0 >= 150 && LA262_0 <= 152)||LA262_0==154||LA262_0==157||LA262_0==160||LA262_0==162||LA262_0==167||LA262_0==169||(LA262_0 >= 171 && LA262_0 <= 174)||LA262_0==177||LA262_0==180||(LA262_0 >= 183 && LA262_0 <= 187)||(LA262_0 >= 189 && LA262_0 <= 190)||LA262_0==194||LA262_0==196||LA262_0==202) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:44: b= for_condition
					{
					pushFollow(FOLLOW_for_condition_in_for_statement10057);
					b=for_condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					}
					break;

			}

			char_literal804=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement10062); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal804_tree = (CommonTree)adaptor.create(char_literal804);
			adaptor.addChild(root_0, char_literal804_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:69: (c= for_iterator )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==Character_literal||LA263_0==FALSE||(LA263_0 >= Hex_number && LA263_0 <= IDENTIFIER)||(LA263_0 >= MINUS && LA263_0 <= NUMBER)||LA263_0==Real_literal||LA263_0==STRINGLITERAL||LA263_0==TRUE||LA263_0==Verbatim_string_literal||LA263_0==61||LA263_0==66||(LA263_0 >= 68 && LA263_0 <= 69)||(LA263_0 >= 71 && LA263_0 <= 72)||LA263_0==75||LA263_0==95||(LA263_0 >= 97 && LA263_0 <= 98)||(LA263_0 >= 100 && LA263_0 <= 103)||(LA263_0 >= 105 && LA263_0 <= 106)||(LA263_0 >= 109 && LA263_0 <= 110)||(LA263_0 >= 114 && LA263_0 <= 117)||(LA263_0 >= 119 && LA263_0 <= 120)||LA263_0==122||LA263_0==126||LA263_0==129||LA263_0==132||LA263_0==135||LA263_0==138||LA263_0==141||(LA263_0 >= 143 && LA263_0 <= 144)||(LA263_0 >= 146 && LA263_0 <= 148)||(LA263_0 >= 150 && LA263_0 <= 152)||LA263_0==154||LA263_0==157||LA263_0==160||LA263_0==162||LA263_0==167||LA263_0==169||(LA263_0 >= 171 && LA263_0 <= 174)||LA263_0==177||LA263_0==180||(LA263_0 >= 183 && LA263_0 <= 187)||(LA263_0 >= 189 && LA263_0 <= 190)||LA263_0==194||LA263_0==196||LA263_0==202) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1091:69: c= for_iterator
					{
					pushFollow(FOLLOW_for_iterator_in_for_statement10068);
					c=for_iterator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					}
					break;

			}

			char_literal805=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_for_statement10073); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal805_tree = (CommonTree)adaptor.create(char_literal805);
			adaptor.addChild(root_0, char_literal805_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_for_statement10079);
			d=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

			if ( state.backtracking==0 ) {retval.t = new for_statement((a!=null?((csParser.for_initializer_return)a).t:null),(b!=null?((csParser.for_condition_return)b).t:null),(c!=null?((csParser.for_iterator_return)c).t:null),(d!=null?((csParser.embedded_statement_return)d).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 275, for_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "for_statement"


	public static class for_initializer_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "for_initializer"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1093:1: for_initializer returns [CsharpNode t] : ( ( local_variable_declaration )=>a= local_variable_declaration |b= statement_expression_list );
	public final csParser.for_initializer_return for_initializer() throws RecognitionException {
		csParser.for_initializer_return retval = new csParser.for_initializer_return();
		retval.start = input.LT(1);
		int for_initializer_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1093:40: ( ( local_variable_declaration )=>a= local_variable_declaration |b= statement_expression_list )
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==190) ) {
				int LA264_1 = input.LA(2);
				if ( (synpred38_cs()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

			}
			else if ( (LA264_0==120) ) {
				int LA264_2 = input.LA(2);
				if ( (synpred38_cs()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

			}
			else if ( (LA264_0==103||LA264_0==106||LA264_0==109||LA264_0==114||LA264_0==119||LA264_0==129||LA264_0==138||LA264_0==146||LA264_0==151||LA264_0==169||LA264_0==173||LA264_0==177||(LA264_0 >= 185 && LA264_0 <= 186)||LA264_0==189) ) {
				int LA264_3 = input.LA(2);
				if ( (synpred38_cs()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

			}
			else if ( (LA264_0==132) ) {
				int LA264_4 = input.LA(2);
				if ( (synpred38_cs()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

			}
			else if ( (LA264_0==192) && (synpred38_cs())) {
				alt264=1;
			}
			else if ( (LA264_0==Character_literal||LA264_0==FALSE||LA264_0==Hex_number||(LA264_0 >= MINUS && LA264_0 <= NUMBER)||LA264_0==Real_literal||LA264_0==STRINGLITERAL||LA264_0==TRUE||LA264_0==Verbatim_string_literal||LA264_0==61||LA264_0==66||(LA264_0 >= 68 && LA264_0 <= 69)||(LA264_0 >= 71 && LA264_0 <= 72)||LA264_0==75||LA264_0==102||LA264_0==110||(LA264_0 >= 115 && LA264_0 <= 116)||LA264_0==150||LA264_0==174||LA264_0==180||LA264_0==184||LA264_0==187||LA264_0==202) ) {
				alt264=2;
			}
			else if ( (LA264_0==IDENTIFIER||LA264_0==95||(LA264_0 >= 97 && LA264_0 <= 98)||(LA264_0 >= 100 && LA264_0 <= 101)||LA264_0==105||LA264_0==117||LA264_0==122||LA264_0==126||LA264_0==135||LA264_0==141||(LA264_0 >= 143 && LA264_0 <= 144)||(LA264_0 >= 147 && LA264_0 <= 148)||LA264_0==152||LA264_0==154||LA264_0==157||LA264_0==160||LA264_0==162||LA264_0==167||(LA264_0 >= 171 && LA264_0 <= 172)||LA264_0==183||LA264_0==194||LA264_0==196) ) {
				int LA264_33 = input.LA(2);
				if ( (synpred38_cs()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 264, 0, input);
				throw nvae;
			}

			switch (alt264) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1094:2: ( local_variable_declaration )=>a= local_variable_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_local_variable_declaration_in_for_initializer10104);
					a=local_variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t =(a!=null?((csParser.local_variable_declaration_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1095:4: b= statement_expression_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_statement_expression_list_in_for_initializer10113);
					b=statement_expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t =(b!=null?((csParser.statement_expression_list_return)b).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 276, for_initializer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "for_initializer"


	public static class for_condition_return extends ParserRuleReturnScope {
		public expression t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "for_condition"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1097:1: for_condition returns [expression t] : a= boolean_expression ;
	public final csParser.for_condition_return for_condition() throws RecognitionException {
		csParser.for_condition_return retval = new csParser.for_condition_return();
		retval.start = input.LT(1);
		int for_condition_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1097:38: (a= boolean_expression )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1098:2: a= boolean_expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_boolean_expression_in_for_condition10131);
			a=boolean_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.boolean_expression_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 277, for_condition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "for_condition"


	public static class for_iterator_return extends ParserRuleReturnScope {
		public CsharpNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "for_iterator"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1099:1: for_iterator returns [CsharpNode t] : a= statement_expression_list ;
	public final csParser.for_iterator_return for_iterator() throws RecognitionException {
		csParser.for_iterator_return retval = new csParser.for_iterator_return();
		retval.start = input.LT(1);
		int for_iterator_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1099:37: (a= statement_expression_list )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1100:2: a= statement_expression_list
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_statement_expression_list_in_for_iterator10147);
			a=statement_expression_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.statement_expression_list_return)a).t:null);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 278, for_iterator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "for_iterator"


	public static class statement_expression_list_return extends ParserRuleReturnScope {
		public statement_expression_list t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement_expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1101:1: statement_expression_list returns [statement_expression_list t] : a= statement_expression ( ',' a= statement_expression )* ;
	public final csParser.statement_expression_list_return statement_expression_list() throws RecognitionException {
		csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
		retval.start = input.LT(1);
		int statement_expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal806=null;
		ParserRuleReturnScope a =null;

		CommonTree char_literal806_tree=null;

		statement_expression_list res=new statement_expression_list();
		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1103:39: (a= statement_expression ( ',' a= statement_expression )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1104:2: a= statement_expression ( ',' a= statement_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_statement_expression_in_statement_expression_list10176);
			a=statement_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			if ( state.backtracking==0 ) {res.add((a!=null?((csParser.statement_expression_return)a).t:null));}
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1104:41: ( ',' a= statement_expression )*
			loop265:
			while (true) {
				int alt265=2;
				int LA265_0 = input.LA(1);
				if ( (LA265_0==74) ) {
					alt265=1;
				}

				switch (alt265) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1104:42: ',' a= statement_expression
					{
					char_literal806=(Token)match(input,74,FOLLOW_74_in_statement_expression_list10180); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal806_tree = (CommonTree)adaptor.create(char_literal806);
					adaptor.addChild(root_0, char_literal806_tree);
					}

					pushFollow(FOLLOW_statement_expression_in_statement_expression_list10184);
					a=statement_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {res.add((a!=null?((csParser.statement_expression_return)a).t:null));}
					}
					break;

				default :
					break loop265;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =res;retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 279, statement_expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement_expression_list"


	public static class foreach_statement_return extends ParserRuleReturnScope {
		public foreach_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "foreach_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1105:1: foreach_statement returns [foreach_statement t] : 'foreach' '(' a= local_variable_type b= identifier 'in' c= expression ')' d= embedded_statement ;
	public final csParser.foreach_statement_return foreach_statement() throws RecognitionException {
		csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
		retval.start = input.LT(1);
		int foreach_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal807=null;
		Token char_literal808=null;
		Token string_literal809=null;
		Token char_literal810=null;
		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;

		CommonTree string_literal807_tree=null;
		CommonTree char_literal808_tree=null;
		CommonTree string_literal809_tree=null;
		CommonTree char_literal810_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1106:32: ( 'foreach' '(' a= local_variable_type b= identifier 'in' c= expression ')' d= embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1107:2: 'foreach' '(' a= local_variable_type b= identifier 'in' c= expression ')' d= embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal807=(Token)match(input,131,FOLLOW_131_in_foreach_statement10207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal807_tree = (CommonTree)adaptor.create(string_literal807);
			adaptor.addChild(root_0, string_literal807_tree);
			}

			char_literal808=(Token)match(input,68,FOLLOW_68_in_foreach_statement10211); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal808_tree = (CommonTree)adaptor.create(char_literal808);
			adaptor.addChild(root_0, char_literal808_tree);
			}

			pushFollow(FOLLOW_local_variable_type_in_foreach_statement10217);
			a=local_variable_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

			pushFollow(FOLLOW_identifier_in_foreach_statement10223);
			b=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

			string_literal809=(Token)match(input,137,FOLLOW_137_in_foreach_statement10227); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal809_tree = (CommonTree)adaptor.create(string_literal809);
			adaptor.addChild(root_0, string_literal809_tree);
			}

			pushFollow(FOLLOW_expression_in_foreach_statement10233);
			c=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

			char_literal810=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement10237); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal810_tree = (CommonTree)adaptor.create(char_literal810);
			adaptor.addChild(root_0, char_literal810_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_foreach_statement10243);
			d=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

			if ( state.backtracking==0 ) {retval.t = new foreach_statement((a!=null?((csParser.local_variable_type_return)a).t:null), (b!=null?((csParser.identifier_return)b).t:null), (c!=null?((csParser.expression_return)c).t:null), (d!=null?((csParser.embedded_statement_return)d).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 280, foreach_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "foreach_statement"


	public static class jump_statement_return extends ParserRuleReturnScope {
		public statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "jump_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1109:1: jump_statement returns [statement t] : (a= break_statement |b= continue_statement |c= goto_statement |d= return_statement |e= throw_statement );
	public final csParser.jump_statement_return jump_statement() throws RecognitionException {
		csParser.jump_statement_return retval = new csParser.jump_statement_return();
		retval.start = input.LT(1);
		int jump_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope e =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1109:38: (a= break_statement |b= continue_statement |c= goto_statement |d= return_statement |e= throw_statement )
			int alt266=5;
			switch ( input.LA(1) ) {
			case 104:
				{
				alt266=1;
				}
				break;
			case 113:
				{
				alt266=2;
				}
				break;
			case 134:
				{
				alt266=3;
				}
				break;
			case 168:
				{
				alt266=4;
				}
				break;
			case 181:
				{
				alt266=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 266, 0, input);
				throw nvae;
			}
			switch (alt266) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1110:2: a= break_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_break_statement_in_jump_statement10261);
					a=break_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					if ( state.backtracking==0 ) {retval.t = (a!=null?((csParser.break_statement_return)a).t:null);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1111:4: b= continue_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_continue_statement_in_jump_statement10270);
					b=continue_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());

					if ( state.backtracking==0 ) {retval.t = (b!=null?((csParser.continue_statement_return)b).t:null);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1112:4: c= goto_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_goto_statement_in_jump_statement10279);
					c=goto_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());

					if ( state.backtracking==0 ) {retval.t = (c!=null?((csParser.goto_statement_return)c).t:null);}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1113:4: d= return_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_return_statement_in_jump_statement10288);
					d=return_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());

					if ( state.backtracking==0 ) {retval.t = (d!=null?((csParser.return_statement_return)d).t:null);}
					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1114:4: e= throw_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_throw_statement_in_jump_statement10297);
					e=throw_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

					if ( state.backtracking==0 ) {retval.t = (e!=null?((csParser.throw_statement_return)e).t:null);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 281, jump_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "jump_statement"


	public static class break_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "break_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1115:1: break_statement returns [UnknownNode t] : 'break' ';' ;
	public final csParser.break_statement_return break_statement() throws RecognitionException {
		csParser.break_statement_return retval = new csParser.break_statement_return();
		retval.start = input.LT(1);
		int break_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal811=null;
		Token char_literal812=null;

		CommonTree string_literal811_tree=null;
		CommonTree char_literal812_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1116:37: ( 'break' ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1117:2: 'break' ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal811=(Token)match(input,104,FOLLOW_104_in_break_statement10317); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal811_tree = (CommonTree)adaptor.create(string_literal811);
			adaptor.addChild(root_0, string_literal811_tree);
			}

			char_literal812=(Token)match(input,SEMI,FOLLOW_SEMI_in_break_statement10321); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal812_tree = (CommonTree)adaptor.create(char_literal812);
			adaptor.addChild(root_0, char_literal812_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 282, break_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "break_statement"


	public static class continue_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "continue_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1118:1: continue_statement returns [UnknownNode t] : 'continue' ';' ;
	public final csParser.continue_statement_return continue_statement() throws RecognitionException {
		csParser.continue_statement_return retval = new csParser.continue_statement_return();
		retval.start = input.LT(1);
		int continue_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal813=null;
		Token char_literal814=null;

		CommonTree string_literal813_tree=null;
		CommonTree char_literal814_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1119:37: ( 'continue' ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1120:2: 'continue' ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal813=(Token)match(input,113,FOLLOW_113_in_continue_statement10340); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal813_tree = (CommonTree)adaptor.create(string_literal813);
			adaptor.addChild(root_0, string_literal813_tree);
			}

			char_literal814=(Token)match(input,SEMI,FOLLOW_SEMI_in_continue_statement10344); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal814_tree = (CommonTree)adaptor.create(char_literal814);
			adaptor.addChild(root_0, char_literal814_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 283, continue_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class goto_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "goto_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1121:1: goto_statement returns [UnknownNode t] : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
	public final csParser.goto_statement_return goto_statement() throws RecognitionException {
		csParser.goto_statement_return retval = new csParser.goto_statement_return();
		retval.start = input.LT(1);
		int goto_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal815=null;
		Token string_literal817=null;
		Token string_literal819=null;
		Token char_literal820=null;
		ParserRuleReturnScope identifier816 =null;
		ParserRuleReturnScope constant_expression818 =null;

		CommonTree string_literal815_tree=null;
		CommonTree string_literal817_tree=null;
		CommonTree string_literal819_tree=null;
		CommonTree char_literal820_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1122:37: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1123:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal815=(Token)match(input,134,FOLLOW_134_in_goto_statement10363); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal815_tree = (CommonTree)adaptor.create(string_literal815);
			adaptor.addChild(root_0, string_literal815_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1123:11: ( identifier | 'case' constant_expression | 'default' )
			int alt267=3;
			switch ( input.LA(1) ) {
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt267=1;
				}
				break;
			case 107:
				{
				alt267=2;
				}
				break;
			case 115:
				{
				alt267=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}
			switch (alt267) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1123:13: identifier
					{
					pushFollow(FOLLOW_identifier_in_goto_statement10369);
					identifier816=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier816.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1124:7: 'case' constant_expression
					{
					string_literal817=(Token)match(input,107,FOLLOW_107_in_goto_statement10377); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal817_tree = (CommonTree)adaptor.create(string_literal817);
					adaptor.addChild(root_0, string_literal817_tree);
					}

					pushFollow(FOLLOW_constant_expression_in_goto_statement10381);
					constant_expression818=constant_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression818.getTree());

					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1125:7: 'default'
					{
					string_literal819=(Token)match(input,115,FOLLOW_115_in_goto_statement10389); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal819_tree = (CommonTree)adaptor.create(string_literal819);
					adaptor.addChild(root_0, string_literal819_tree);
					}

					}
					break;

			}

			char_literal820=(Token)match(input,SEMI,FOLLOW_SEMI_in_goto_statement10394); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal820_tree = (CommonTree)adaptor.create(char_literal820);
			adaptor.addChild(root_0, char_literal820_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 284, goto_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class return_statement_return extends ParserRuleReturnScope {
		public return_statement t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "return_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1126:1: return_statement returns [return_statement t] : 'return' (a= expression )? ';' ;
	public final csParser.return_statement_return return_statement() throws RecognitionException {
		csParser.return_statement_return retval = new csParser.return_statement_return();
		retval.start = input.LT(1);
		int return_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal821=null;
		Token char_literal822=null;
		ParserRuleReturnScope a =null;

		CommonTree string_literal821_tree=null;
		CommonTree char_literal822_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1127:32: ( 'return' (a= expression )? ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1128:2: 'return' (a= expression )? ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal821=(Token)match(input,168,FOLLOW_168_in_return_statement10413); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal821_tree = (CommonTree)adaptor.create(string_literal821);
			adaptor.addChild(root_0, string_literal821_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1128:14: (a= expression )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==Character_literal||LA268_0==FALSE||(LA268_0 >= Hex_number && LA268_0 <= IDENTIFIER)||(LA268_0 >= MINUS && LA268_0 <= NUMBER)||LA268_0==Real_literal||LA268_0==STRINGLITERAL||LA268_0==TRUE||LA268_0==Verbatim_string_literal||LA268_0==61||LA268_0==66||(LA268_0 >= 68 && LA268_0 <= 69)||(LA268_0 >= 71 && LA268_0 <= 72)||LA268_0==75||LA268_0==95||(LA268_0 >= 97 && LA268_0 <= 98)||(LA268_0 >= 100 && LA268_0 <= 103)||(LA268_0 >= 105 && LA268_0 <= 106)||(LA268_0 >= 109 && LA268_0 <= 110)||(LA268_0 >= 114 && LA268_0 <= 117)||(LA268_0 >= 119 && LA268_0 <= 120)||LA268_0==122||LA268_0==126||LA268_0==129||LA268_0==132||LA268_0==135||LA268_0==138||LA268_0==141||(LA268_0 >= 143 && LA268_0 <= 144)||(LA268_0 >= 146 && LA268_0 <= 148)||(LA268_0 >= 150 && LA268_0 <= 152)||LA268_0==154||LA268_0==157||LA268_0==160||LA268_0==162||LA268_0==167||LA268_0==169||(LA268_0 >= 171 && LA268_0 <= 174)||LA268_0==177||LA268_0==180||(LA268_0 >= 183 && LA268_0 <= 187)||(LA268_0 >= 189 && LA268_0 <= 190)||LA268_0==194||LA268_0==196||LA268_0==202) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1128:14: a= expression
					{
					pushFollow(FOLLOW_expression_in_return_statement10419);
					a=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

					}
					break;

			}

			char_literal822=(Token)match(input,SEMI,FOLLOW_SEMI_in_return_statement10424); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal822_tree = (CommonTree)adaptor.create(char_literal822);
			adaptor.addChild(root_0, char_literal822_tree);
			}

			if ( state.backtracking==0 ) {retval.t =new return_statement((a!=null?((csParser.expression_return)a).t:null));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t.setMessage(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 285, return_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class throw_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "throw_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1129:1: throw_statement returns [UnknownNode t] : 'throw' ( expression )? ';' ;
	public final csParser.throw_statement_return throw_statement() throws RecognitionException {
		csParser.throw_statement_return retval = new csParser.throw_statement_return();
		retval.start = input.LT(1);
		int throw_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal823=null;
		Token char_literal825=null;
		ParserRuleReturnScope expression824 =null;

		CommonTree string_literal823_tree=null;
		CommonTree char_literal825_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1130:37: ( 'throw' ( expression )? ';' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1131:2: 'throw' ( expression )? ';'
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal823=(Token)match(input,181,FOLLOW_181_in_throw_statement10445); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal823_tree = (CommonTree)adaptor.create(string_literal823);
			adaptor.addChild(root_0, string_literal823_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1131:12: ( expression )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==Character_literal||LA269_0==FALSE||(LA269_0 >= Hex_number && LA269_0 <= IDENTIFIER)||(LA269_0 >= MINUS && LA269_0 <= NUMBER)||LA269_0==Real_literal||LA269_0==STRINGLITERAL||LA269_0==TRUE||LA269_0==Verbatim_string_literal||LA269_0==61||LA269_0==66||(LA269_0 >= 68 && LA269_0 <= 69)||(LA269_0 >= 71 && LA269_0 <= 72)||LA269_0==75||LA269_0==95||(LA269_0 >= 97 && LA269_0 <= 98)||(LA269_0 >= 100 && LA269_0 <= 103)||(LA269_0 >= 105 && LA269_0 <= 106)||(LA269_0 >= 109 && LA269_0 <= 110)||(LA269_0 >= 114 && LA269_0 <= 117)||(LA269_0 >= 119 && LA269_0 <= 120)||LA269_0==122||LA269_0==126||LA269_0==129||LA269_0==132||LA269_0==135||LA269_0==138||LA269_0==141||(LA269_0 >= 143 && LA269_0 <= 144)||(LA269_0 >= 146 && LA269_0 <= 148)||(LA269_0 >= 150 && LA269_0 <= 152)||LA269_0==154||LA269_0==157||LA269_0==160||LA269_0==162||LA269_0==167||LA269_0==169||(LA269_0 >= 171 && LA269_0 <= 174)||LA269_0==177||LA269_0==180||(LA269_0 >= 183 && LA269_0 <= 187)||(LA269_0 >= 189 && LA269_0 <= 190)||LA269_0==194||LA269_0==196||LA269_0==202) ) {
				alt269=1;
			}
			switch (alt269) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1131:12: expression
					{
					pushFollow(FOLLOW_expression_in_throw_statement10449);
					expression824=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression824.getTree());

					}
					break;

			}

			char_literal825=(Token)match(input,SEMI,FOLLOW_SEMI_in_throw_statement10454); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal825_tree = (CommonTree)adaptor.create(char_literal825);
			adaptor.addChild(root_0, char_literal825_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 286, throw_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "throw_statement"


	public static class try_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "try_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1132:1: try_statement returns [UnknownNode t] : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
	public final csParser.try_statement_return try_statement() throws RecognitionException {
		csParser.try_statement_return retval = new csParser.try_statement_return();
		retval.start = input.LT(1);
		int try_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal826=null;
		ParserRuleReturnScope block827 =null;
		ParserRuleReturnScope catch_clauses828 =null;
		ParserRuleReturnScope finally_clause829 =null;
		ParserRuleReturnScope finally_clause830 =null;

		CommonTree string_literal826_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1133:37: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1134:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal826=(Token)match(input,182,FOLLOW_182_in_try_statement10477); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal826_tree = (CommonTree)adaptor.create(string_literal826);
			adaptor.addChild(root_0, string_literal826_tree);
			}

			pushFollow(FOLLOW_block_in_try_statement10481);
			block827=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block827.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1134:23: ( catch_clauses ( finally_clause )? | finally_clause )
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==108) ) {
				alt271=1;
			}
			else if ( (LA271_0==127) ) {
				alt271=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				throw nvae;
			}

			switch (alt271) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1134:25: catch_clauses ( finally_clause )?
					{
					pushFollow(FOLLOW_catch_clauses_in_try_statement10487);
					catch_clauses828=catch_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, catch_clauses828.getTree());

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1134:41: ( finally_clause )?
					int alt270=2;
					int LA270_0 = input.LA(1);
					if ( (LA270_0==127) ) {
						alt270=1;
					}
					switch (alt270) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1134:41: finally_clause
							{
							pushFollow(FOLLOW_finally_clause_in_try_statement10491);
							finally_clause829=finally_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause829.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1135:10: finally_clause
					{
					pushFollow(FOLLOW_finally_clause_in_try_statement10503);
					finally_clause830=finally_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause830.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 287, try_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "try_statement"


	public static class catch_clauses_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "catch_clauses"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1137:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
	public final csParser.catch_clauses_return catch_clauses() throws RecognitionException {
		csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
		retval.start = input.LT(1);
		int catch_clauses_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal831=null;
		ParserRuleReturnScope specific_catch_clauses832 =null;
		ParserRuleReturnScope general_catch_clause833 =null;

		CommonTree string_literal831_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1137:14: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1138:2: 'catch' ( specific_catch_clauses | general_catch_clause )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal831=(Token)match(input,108,FOLLOW_108_in_catch_clauses10512); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal831_tree = (CommonTree)adaptor.create(string_literal831);
			adaptor.addChild(root_0, string_literal831_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1138:12: ( specific_catch_clauses | general_catch_clause )
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==68) ) {
				alt272=1;
			}
			else if ( (LA272_0==SEMI||LA272_0==197) ) {
				alt272=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 272, 0, input);
				throw nvae;
			}

			switch (alt272) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1138:13: specific_catch_clauses
					{
					pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses10517);
					specific_catch_clauses832=specific_catch_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clauses832.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1138:38: general_catch_clause
					{
					pushFollow(FOLLOW_general_catch_clause_in_catch_clauses10521);
					general_catch_clause833=general_catch_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause833.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 288, catch_clauses_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "catch_clauses"


	public static class specific_catch_clauses_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "specific_catch_clauses"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1139:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
	public final csParser.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
		csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
		retval.start = input.LT(1);
		int specific_catch_clauses_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal835=null;
		ParserRuleReturnScope specific_catch_clause834 =null;
		ParserRuleReturnScope specific_catch_clause836 =null;
		ParserRuleReturnScope general_catch_clause837 =null;

		CommonTree string_literal835_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1139:23: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:2: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses10530);
			specific_catch_clause834=specific_catch_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause834.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:26: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			loop274:
			while (true) {
				int alt274=2;
				int LA274_0 = input.LA(1);
				if ( (LA274_0==108) ) {
					alt274=1;
				}

				switch (alt274) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:27: 'catch' ( specific_catch_clause | general_catch_clause )
					{
					string_literal835=(Token)match(input,108,FOLLOW_108_in_specific_catch_clauses10535); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal835_tree = (CommonTree)adaptor.create(string_literal835);
					adaptor.addChild(root_0, string_literal835_tree);
					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:37: ( specific_catch_clause | general_catch_clause )
					int alt273=2;
					int LA273_0 = input.LA(1);
					if ( (LA273_0==68) ) {
						alt273=1;
					}
					else if ( (LA273_0==SEMI||LA273_0==197) ) {
						alt273=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 273, 0, input);
						throw nvae;
					}

					switch (alt273) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:38: specific_catch_clause
							{
							pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses10540);
							specific_catch_clause836=specific_catch_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause836.getTree());

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1140:62: general_catch_clause
							{
							pushFollow(FOLLOW_general_catch_clause_in_specific_catch_clauses10544);
							general_catch_clause837=general_catch_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause837.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop274;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 289, specific_catch_clauses_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "specific_catch_clauses"


	public static class specific_catch_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "specific_catch_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1141:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
	public final csParser.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
		csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
		retval.start = input.LT(1);
		int specific_catch_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal838=null;
		Token char_literal841=null;
		ParserRuleReturnScope class_type839 =null;
		ParserRuleReturnScope identifier840 =null;
		ParserRuleReturnScope block842 =null;

		CommonTree char_literal838_tree=null;
		CommonTree char_literal841_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1141:22: ( '(' class_type ( identifier )? ')' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1142:2: '(' class_type ( identifier )? ')' block
			{
			root_0 = (CommonTree)adaptor.nil();


			char_literal838=(Token)match(input,68,FOLLOW_68_in_specific_catch_clause10554); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal838_tree = (CommonTree)adaptor.create(char_literal838);
			adaptor.addChild(root_0, char_literal838_tree);
			}

			pushFollow(FOLLOW_class_type_in_specific_catch_clause10558);
			class_type839=class_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, class_type839.getTree());

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1142:21: ( identifier )?
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==IDENTIFIER||LA275_0==95||(LA275_0 >= 97 && LA275_0 <= 98)||(LA275_0 >= 100 && LA275_0 <= 101)||LA275_0==105||LA275_0==117||LA275_0==120||LA275_0==122||LA275_0==126||LA275_0==132||LA275_0==135||LA275_0==141||(LA275_0 >= 143 && LA275_0 <= 144)||(LA275_0 >= 147 && LA275_0 <= 148)||LA275_0==152||LA275_0==154||LA275_0==157||LA275_0==160||LA275_0==162||LA275_0==167||(LA275_0 >= 171 && LA275_0 <= 172)||LA275_0==183||LA275_0==190||LA275_0==194||LA275_0==196) ) {
				alt275=1;
			}
			switch (alt275) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1142:21: identifier
					{
					pushFollow(FOLLOW_identifier_in_specific_catch_clause10562);
					identifier840=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier840.getTree());

					}
					break;

			}

			char_literal841=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_specific_catch_clause10567); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal841_tree = (CommonTree)adaptor.create(char_literal841);
			adaptor.addChild(root_0, char_literal841_tree);
			}

			pushFollow(FOLLOW_block_in_specific_catch_clause10571);
			block842=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block842.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 290, specific_catch_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "specific_catch_clause"


	public static class general_catch_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "general_catch_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1143:1: general_catch_clause : block ;
	public final csParser.general_catch_clause_return general_catch_clause() throws RecognitionException {
		csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
		retval.start = input.LT(1);
		int general_catch_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope block843 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1143:21: ( block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1144:2: block
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_block_in_general_catch_clause10579);
			block843=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block843.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 291, general_catch_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "general_catch_clause"


	public static class finally_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "finally_clause"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1145:1: finally_clause : 'finally' block ;
	public final csParser.finally_clause_return finally_clause() throws RecognitionException {
		csParser.finally_clause_return retval = new csParser.finally_clause_return();
		retval.start = input.LT(1);
		int finally_clause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal844=null;
		ParserRuleReturnScope block845 =null;

		CommonTree string_literal844_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1145:15: ( 'finally' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1146:2: 'finally' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal844=(Token)match(input,127,FOLLOW_127_in_finally_clause10587); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal844_tree = (CommonTree)adaptor.create(string_literal844);
			adaptor.addChild(root_0, string_literal844_tree);
			}

			pushFollow(FOLLOW_block_in_finally_clause10591);
			block845=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block845.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 292, finally_clause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "finally_clause"


	public static class checked_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "checked_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1147:1: checked_statement returns [UnknownNode t] : 'checked' block ;
	public final csParser.checked_statement_return checked_statement() throws RecognitionException {
		csParser.checked_statement_return retval = new csParser.checked_statement_return();
		retval.start = input.LT(1);
		int checked_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal846=null;
		ParserRuleReturnScope block847 =null;

		CommonTree string_literal846_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1148:37: ( 'checked' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1149:2: 'checked' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal846=(Token)match(input,110,FOLLOW_110_in_checked_statement10610); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal846_tree = (CommonTree)adaptor.create(string_literal846);
			adaptor.addChild(root_0, string_literal846_tree);
			}

			pushFollow(FOLLOW_block_in_checked_statement10614);
			block847=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block847.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 293, checked_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "checked_statement"


	public static class unchecked_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unchecked_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1150:1: unchecked_statement returns [UnknownNode t] : 'unchecked' block ;
	public final csParser.unchecked_statement_return unchecked_statement() throws RecognitionException {
		csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
		retval.start = input.LT(1);
		int unchecked_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal848=null;
		ParserRuleReturnScope block849 =null;

		CommonTree string_literal848_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1151:37: ( 'unchecked' block )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1152:2: 'unchecked' block
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal848=(Token)match(input,187,FOLLOW_187_in_unchecked_statement10633); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal848_tree = (CommonTree)adaptor.create(string_literal848);
			adaptor.addChild(root_0, string_literal848_tree);
			}

			pushFollow(FOLLOW_block_in_unchecked_statement10637);
			block849=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block849.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 294, unchecked_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unchecked_statement"


	public static class lock_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lock_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1153:1: lock_statement returns [UnknownNode t] : 'lock' '(' expression ')' embedded_statement ;
	public final csParser.lock_statement_return lock_statement() throws RecognitionException {
		csParser.lock_statement_return retval = new csParser.lock_statement_return();
		retval.start = input.LT(1);
		int lock_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal850=null;
		Token char_literal851=null;
		Token char_literal853=null;
		ParserRuleReturnScope expression852 =null;
		ParserRuleReturnScope embedded_statement854 =null;

		CommonTree string_literal850_tree=null;
		CommonTree char_literal851_tree=null;
		CommonTree char_literal853_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1154:37: ( 'lock' '(' expression ')' embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1155:2: 'lock' '(' expression ')' embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal850=(Token)match(input,145,FOLLOW_145_in_lock_statement10656); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal850_tree = (CommonTree)adaptor.create(string_literal850);
			adaptor.addChild(root_0, string_literal850_tree);
			}

			char_literal851=(Token)match(input,68,FOLLOW_68_in_lock_statement10660); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal851_tree = (CommonTree)adaptor.create(char_literal851);
			adaptor.addChild(root_0, char_literal851_tree);
			}

			pushFollow(FOLLOW_expression_in_lock_statement10663);
			expression852=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression852.getTree());

			char_literal853=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement10667); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal853_tree = (CommonTree)adaptor.create(char_literal853);
			adaptor.addChild(root_0, char_literal853_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_lock_statement10671);
			embedded_statement854=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement854.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 295, lock_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "lock_statement"


	public static class using_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "using_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1156:1: using_statement returns [UnknownNode t] : 'using' '(' resource_acquisition ')' embedded_statement ;
	public final csParser.using_statement_return using_statement() throws RecognitionException {
		csParser.using_statement_return retval = new csParser.using_statement_return();
		retval.start = input.LT(1);
		int using_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal855=null;
		Token char_literal856=null;
		Token char_literal858=null;
		ParserRuleReturnScope resource_acquisition857 =null;
		ParserRuleReturnScope embedded_statement859 =null;

		CommonTree string_literal855_tree=null;
		CommonTree char_literal856_tree=null;
		CommonTree char_literal858_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1157:37: ( 'using' '(' resource_acquisition ')' embedded_statement )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1158:2: 'using' '(' resource_acquisition ')' embedded_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal855=(Token)match(input,USING,FOLLOW_USING_in_using_statement10690); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal855_tree = (CommonTree)adaptor.create(string_literal855);
			adaptor.addChild(root_0, string_literal855_tree);
			}

			char_literal856=(Token)match(input,68,FOLLOW_68_in_using_statement10694); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal856_tree = (CommonTree)adaptor.create(char_literal856);
			adaptor.addChild(root_0, char_literal856_tree);
			}

			pushFollow(FOLLOW_resource_acquisition_in_using_statement10699);
			resource_acquisition857=resource_acquisition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, resource_acquisition857.getTree());

			char_literal858=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_using_statement10703); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal858_tree = (CommonTree)adaptor.create(char_literal858);
			adaptor.addChild(root_0, char_literal858_tree);
			}

			pushFollow(FOLLOW_embedded_statement_in_using_statement10708);
			embedded_statement859=embedded_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement859.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 296, using_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "using_statement"


	public static class resource_acquisition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resource_acquisition"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1159:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
	public final csParser.resource_acquisition_return resource_acquisition() throws RecognitionException {
		csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
		retval.start = input.LT(1);
		int resource_acquisition_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope local_variable_declaration860 =null;
		ParserRuleReturnScope expression861 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1159:21: ( ( local_variable_declaration )=> local_variable_declaration | expression )
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==190) ) {
				int LA276_1 = input.LA(2);
				if ( (synpred39_cs()) ) {
					alt276=1;
				}
				else if ( (true) ) {
					alt276=2;
				}

			}
			else if ( (LA276_0==120) ) {
				int LA276_2 = input.LA(2);
				if ( (synpred39_cs()) ) {
					alt276=1;
				}
				else if ( (true) ) {
					alt276=2;
				}

			}
			else if ( (LA276_0==103||LA276_0==106||LA276_0==109||LA276_0==114||LA276_0==119||LA276_0==129||LA276_0==138||LA276_0==146||LA276_0==151||LA276_0==169||LA276_0==173||LA276_0==177||(LA276_0 >= 185 && LA276_0 <= 186)||LA276_0==189) ) {
				int LA276_3 = input.LA(2);
				if ( (synpred39_cs()) ) {
					alt276=1;
				}
				else if ( (true) ) {
					alt276=2;
				}

			}
			else if ( (LA276_0==132) ) {
				int LA276_4 = input.LA(2);
				if ( (synpred39_cs()) ) {
					alt276=1;
				}
				else if ( (true) ) {
					alt276=2;
				}

			}
			else if ( (LA276_0==192) && (synpred39_cs())) {
				alt276=1;
			}
			else if ( (LA276_0==Character_literal||LA276_0==FALSE||LA276_0==Hex_number||(LA276_0 >= MINUS && LA276_0 <= NUMBER)||LA276_0==Real_literal||LA276_0==STRINGLITERAL||LA276_0==TRUE||LA276_0==Verbatim_string_literal||LA276_0==61||LA276_0==66||(LA276_0 >= 68 && LA276_0 <= 69)||(LA276_0 >= 71 && LA276_0 <= 72)||LA276_0==75||LA276_0==102||LA276_0==110||(LA276_0 >= 115 && LA276_0 <= 116)||LA276_0==150||LA276_0==174||LA276_0==180||LA276_0==184||LA276_0==187||LA276_0==202) ) {
				alt276=2;
			}
			else if ( (LA276_0==IDENTIFIER||LA276_0==95||(LA276_0 >= 97 && LA276_0 <= 98)||(LA276_0 >= 100 && LA276_0 <= 101)||LA276_0==105||LA276_0==117||LA276_0==122||LA276_0==126||LA276_0==135||LA276_0==141||(LA276_0 >= 143 && LA276_0 <= 144)||(LA276_0 >= 147 && LA276_0 <= 148)||LA276_0==152||LA276_0==154||LA276_0==157||LA276_0==160||LA276_0==162||LA276_0==167||(LA276_0 >= 171 && LA276_0 <= 172)||LA276_0==183||LA276_0==194||LA276_0==196) ) {
				int LA276_33 = input.LA(2);
				if ( (synpred39_cs()) ) {
					alt276=1;
				}
				else if ( (true) ) {
					alt276=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 276, 0, input);
				throw nvae;
			}

			switch (alt276) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1160:2: ( local_variable_declaration )=> local_variable_declaration
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition10722);
					local_variable_declaration860=local_variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration860.getTree());

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1161:4: expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_resource_acquisition10727);
					expression861=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression861.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 297, resource_acquisition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "resource_acquisition"


	public static class yield_statement_return extends ParserRuleReturnScope {
		public UnknownNode t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "yield_statement"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1162:1: yield_statement returns [UnknownNode t] : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
	public final csParser.yield_statement_return yield_statement() throws RecognitionException {
		csParser.yield_statement_return retval = new csParser.yield_statement_return();
		retval.start = input.LT(1);
		int yield_statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal862=null;
		Token string_literal863=null;
		Token char_literal865=null;
		Token string_literal866=null;
		Token char_literal867=null;
		ParserRuleReturnScope expression864 =null;

		CommonTree string_literal862_tree=null;
		CommonTree string_literal863_tree=null;
		CommonTree char_literal865_tree=null;
		CommonTree string_literal866_tree=null;
		CommonTree char_literal867_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1163:37: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1164:2: 'yield' ( 'return' expression ';' | 'break' ';' )
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal862=(Token)match(input,196,FOLLOW_196_in_yield_statement10745); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal862_tree = (CommonTree)adaptor.create(string_literal862);
			adaptor.addChild(root_0, string_literal862_tree);
			}

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1164:12: ( 'return' expression ';' | 'break' ';' )
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==168) ) {
				alt277=1;
			}
			else if ( (LA277_0==104) ) {
				alt277=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}

			switch (alt277) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1164:13: 'return' expression ';'
					{
					string_literal863=(Token)match(input,168,FOLLOW_168_in_yield_statement10750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal863_tree = (CommonTree)adaptor.create(string_literal863);
					adaptor.addChild(root_0, string_literal863_tree);
					}

					pushFollow(FOLLOW_expression_in_yield_statement10754);
					expression864=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression864.getTree());

					char_literal865=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement10758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal865_tree = (CommonTree)adaptor.create(char_literal865);
					adaptor.addChild(root_0, char_literal865_tree);
					}

					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1165:14: 'break' ';'
					{
					string_literal866=(Token)match(input,104,FOLLOW_104_in_yield_statement10773); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal866_tree = (CommonTree)adaptor.create(string_literal866);
					adaptor.addChild(root_0, string_literal866_tree);
					}

					char_literal867=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement10777); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal867_tree = (CommonTree)adaptor.create(char_literal867);
					adaptor.addChild(root_0, char_literal867_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new UnknownNode(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 298, yield_statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "yield_statement"


	public static class predefined_type_return extends ParserRuleReturnScope {
		public predefined_type t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "predefined_type"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1171:1: predefined_type returns [predefined_type t] : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
	public final csParser.predefined_type_return predefined_type() throws RecognitionException {
		csParser.predefined_type_return retval = new csParser.predefined_type_return();
		retval.start = input.LT(1);
		int predefined_type_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set868=null;

		CommonTree set868_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1172:41: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set868=input.LT(1);
			if ( input.LA(1)==103||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==119||input.LA(1)==129||input.LA(1)==138||input.LA(1)==146||input.LA(1)==151||input.LA(1)==169||input.LA(1)==173||input.LA(1)==177||(input.LA(1) >= 185 && input.LA(1) <= 186)||input.LA(1)==189 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set868));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new predefined_type(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 299, predefined_type_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "predefined_type"


	public static class identifier_return extends ParserRuleReturnScope {
		public identifier t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "identifier"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1176:1: identifier returns [identifier t] : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' ) ;
	public final csParser.identifier_return identifier() throws RecognitionException {
		csParser.identifier_return retval = new csParser.identifier_return();
		retval.start = input.LT(1);
		int identifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set869=null;

		CommonTree set869_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1177:37: ( ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' ) )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set869=input.LT(1);
			if ( input.LA(1)==IDENTIFIER||input.LA(1)==95||(input.LA(1) >= 97 && input.LA(1) <= 98)||(input.LA(1) >= 100 && input.LA(1) <= 101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1) >= 143 && input.LA(1) <= 144)||(input.LA(1) >= 147 && input.LA(1) <= 148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1) >= 171 && input.LA(1) <= 172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set869));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {retval.t =new identifier(retval.tree);}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 300, identifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identifier"


	public static class keyword_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyword"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1182:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
	public final csParser.keyword_return keyword() throws RecognitionException {
		csParser.keyword_return retval = new csParser.keyword_return();
		retval.start = input.LT(1);
		int keyword_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set870=null;

		CommonTree set870_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1182:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set870=input.LT(1);
			if ( input.LA(1)==ENUM||input.LA(1)==FALSE||input.LA(1)==IF||input.LA(1)==NULL||input.LA(1)==TRUE||input.LA(1)==USING||input.LA(1)==96||input.LA(1)==99||(input.LA(1) >= 102 && input.LA(1) <= 104)||(input.LA(1) >= 106 && input.LA(1) <= 116)||(input.LA(1) >= 118 && input.LA(1) <= 119)||input.LA(1)==121||(input.LA(1) >= 123 && input.LA(1) <= 125)||(input.LA(1) >= 127 && input.LA(1) <= 131)||input.LA(1)==134||(input.LA(1) >= 136 && input.LA(1) <= 140)||input.LA(1)==142||(input.LA(1) >= 145 && input.LA(1) <= 146)||(input.LA(1) >= 149 && input.LA(1) <= 151)||input.LA(1)==153||(input.LA(1) >= 155 && input.LA(1) <= 156)||input.LA(1)==158||input.LA(1)==161||(input.LA(1) >= 163 && input.LA(1) <= 166)||(input.LA(1) >= 168 && input.LA(1) <= 170)||(input.LA(1) >= 173 && input.LA(1) <= 182)||(input.LA(1) >= 184 && input.LA(1) <= 189)||(input.LA(1) >= 191 && input.LA(1) <= 193) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set870));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 301, keyword_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "keyword"


	public static class also_keyword_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "also_keyword"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1185:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
	public final csParser.also_keyword_return also_keyword() throws RecognitionException {
		csParser.also_keyword_return retval = new csParser.also_keyword_return();
		retval.start = input.LT(1);
		int also_keyword_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set871=null;

		CommonTree set871_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1185:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set871=input.LT(1);
			if ( input.LA(1)==95||(input.LA(1) >= 97 && input.LA(1) <= 98)||(input.LA(1) >= 100 && input.LA(1) <= 101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||(input.LA(1) >= 122 && input.LA(1) <= 123)||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1) >= 143 && input.LA(1) <= 144)||(input.LA(1) >= 147 && input.LA(1) <= 148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1) >= 171 && input.LA(1) <= 172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set871));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 302, also_keyword_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "also_keyword"


	public static class literal_return extends ParserRuleReturnScope {
		public literal t;
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "literal"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1191:1: literal returns [literal t] : (a= Real_literal |a= NUMBER |a= Hex_number |a= Character_literal |a= STRINGLITERAL |a= Verbatim_string_literal |a= TRUE |a= FALSE |a= NULL );
	public final csParser.literal_return literal() throws RecognitionException {
		csParser.literal_return retval = new csParser.literal_return();
		retval.start = input.LT(1);
		int literal_StartIndex = input.index();

		CommonTree root_0 = null;

		Token a=null;

		CommonTree a_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1191:28: (a= Real_literal |a= NUMBER |a= Hex_number |a= Character_literal |a= STRINGLITERAL |a= Verbatim_string_literal |a= TRUE |a= FALSE |a= NULL )
			int alt278=9;
			switch ( input.LA(1) ) {
			case Real_literal:
				{
				alt278=1;
				}
				break;
			case NUMBER:
				{
				alt278=2;
				}
				break;
			case Hex_number:
				{
				alt278=3;
				}
				break;
			case Character_literal:
				{
				alt278=4;
				}
				break;
			case STRINGLITERAL:
				{
				alt278=5;
				}
				break;
			case Verbatim_string_literal:
				{
				alt278=6;
				}
				break;
			case TRUE:
				{
				alt278=7;
				}
				break;
			case FALSE:
				{
				alt278=8;
				}
				break;
			case NULL:
				{
				alt278=9;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 278, 0, input);
				throw nvae;
			}
			switch (alt278) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1192:2: a= Real_literal
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,Real_literal,FOLLOW_Real_literal_in_literal11481); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Real_literal);}
					}
					break;
				case 2 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1193:4: a= NUMBER
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_literal11490); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.NUMBER);}
					}
					break;
				case 3 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1194:4: a= Hex_number
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,Hex_number,FOLLOW_Hex_number_in_literal11500); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Hex_number);}
					}
					break;
				case 4 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1195:4: a= Character_literal
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,Character_literal,FOLLOW_Character_literal_in_literal11510); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Character_literal);}
					}
					break;
				case 5 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1196:4: a= STRINGLITERAL
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,STRINGLITERAL,FOLLOW_STRINGLITERAL_in_literal11520); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.STRINGLITERAL);}
					}
					break;
				case 6 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1197:4: a= Verbatim_string_literal
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,Verbatim_string_literal,FOLLOW_Verbatim_string_literal_in_literal11530); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Verbatim_string_literal);}
					}
					break;
				case 7 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1198:4: a= TRUE
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,TRUE,FOLLOW_TRUE_in_literal11540); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Bool);}
					}
					break;
				case 8 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1199:4: a= FALSE
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,FALSE,FOLLOW_FALSE_in_literal11550); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.Bool);}
					}
					break;
				case 9 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1200:4: a= NULL
					{
					root_0 = (CommonTree)adaptor.nil();


					a=(Token)match(input,NULL,FOLLOW_NULL_in_literal11560); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					a_tree = (CommonTree)adaptor.create(a);
					adaptor.addChild(root_0, a_tree);
					}

					if ( state.backtracking==0 ) {retval.t = new literal(a_tree,literaltype.NULL);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 303, literal_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "literal"


	public static class assignment_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "assignment_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1399:1: assignment_list : ( assignment ';' )+ ;
	public final csParser.assignment_list_return assignment_list() throws RecognitionException {
		csParser.assignment_list_return retval = new csParser.assignment_list_return();
		retval.start = input.LT(1);
		int assignment_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal873=null;
		ParserRuleReturnScope assignment872 =null;

		CommonTree char_literal873_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1399:16: ( ( assignment ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1400:2: ( assignment ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1400:2: ( assignment ';' )+
			int cnt279=0;
			loop279:
			while (true) {
				int alt279=2;
				int LA279_0 = input.LA(1);
				if ( (LA279_0==Character_literal||LA279_0==FALSE||(LA279_0 >= Hex_number && LA279_0 <= IDENTIFIER)||(LA279_0 >= MINUS && LA279_0 <= NUMBER)||LA279_0==Real_literal||LA279_0==STRINGLITERAL||LA279_0==TRUE||LA279_0==Verbatim_string_literal||LA279_0==61||LA279_0==66||(LA279_0 >= 68 && LA279_0 <= 69)||(LA279_0 >= 71 && LA279_0 <= 72)||LA279_0==75||LA279_0==95||(LA279_0 >= 97 && LA279_0 <= 98)||(LA279_0 >= 100 && LA279_0 <= 103)||(LA279_0 >= 105 && LA279_0 <= 106)||(LA279_0 >= 109 && LA279_0 <= 110)||(LA279_0 >= 114 && LA279_0 <= 117)||(LA279_0 >= 119 && LA279_0 <= 120)||LA279_0==122||LA279_0==126||LA279_0==129||LA279_0==132||LA279_0==135||LA279_0==138||LA279_0==141||(LA279_0 >= 143 && LA279_0 <= 144)||(LA279_0 >= 146 && LA279_0 <= 148)||(LA279_0 >= 150 && LA279_0 <= 152)||LA279_0==154||LA279_0==157||LA279_0==160||LA279_0==162||LA279_0==167||LA279_0==169||(LA279_0 >= 171 && LA279_0 <= 174)||LA279_0==177||LA279_0==180||(LA279_0 >= 183 && LA279_0 <= 187)||(LA279_0 >= 189 && LA279_0 <= 190)||LA279_0==194||LA279_0==196||LA279_0==202) ) {
					alt279=1;
				}

				switch (alt279) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1400:3: assignment ';'
					{
					pushFollow(FOLLOW_assignment_in_assignment_list13542);
					assignment872=assignment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment872.getTree());

					char_literal873=(Token)match(input,SEMI,FOLLOW_SEMI_in_assignment_list13544); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal873_tree = (CommonTree)adaptor.create(char_literal873);
					adaptor.addChild(root_0, char_literal873_tree);
					}

					}
					break;

				default :
					if ( cnt279 >= 1 ) break loop279;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(279, input);
					throw eee;
				}
				cnt279++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 304, assignment_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assignment_list"


	public static class field_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "field_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1401:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
	public final csParser.field_declarations_return field_declarations() throws RecognitionException {
		csParser.field_declarations_return retval = new csParser.field_declarations_return();
		retval.start = input.LT(1);
		int field_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes874 =null;
		ParserRuleReturnScope modifiers875 =null;
		ParserRuleReturnScope type876 =null;
		ParserRuleReturnScope field_declaration877 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1401:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			int cnt282=0;
			loop282:
			while (true) {
				int alt282=2;
				int LA282_0 = input.LA(1);
				if ( (LA282_0==IDENTIFIER||LA282_0==91||(LA282_0 >= 95 && LA282_0 <= 98)||(LA282_0 >= 100 && LA282_0 <= 101)||LA282_0==103||(LA282_0 >= 105 && LA282_0 <= 106)||LA282_0==109||LA282_0==114||LA282_0==117||(LA282_0 >= 119 && LA282_0 <= 120)||LA282_0==122||(LA282_0 >= 125 && LA282_0 <= 126)||LA282_0==129||LA282_0==132||LA282_0==135||LA282_0==138||(LA282_0 >= 140 && LA282_0 <= 141)||(LA282_0 >= 143 && LA282_0 <= 144)||(LA282_0 >= 146 && LA282_0 <= 148)||(LA282_0 >= 150 && LA282_0 <= 152)||LA282_0==154||(LA282_0 >= 156 && LA282_0 <= 157)||(LA282_0 >= 160 && LA282_0 <= 165)||LA282_0==167||(LA282_0 >= 169 && LA282_0 <= 173)||(LA282_0 >= 176 && LA282_0 <= 177)||LA282_0==183||(LA282_0 >= 185 && LA282_0 <= 186)||(LA282_0 >= 188 && LA282_0 <= 194)||LA282_0==196) ) {
					alt282=1;
				}

				switch (alt282) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:3: ( attributes )? ( modifiers )? type field_declaration
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:3: ( attributes )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==91) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:3: attributes
							{
							pushFollow(FOLLOW_attributes_in_field_declarations13555);
							attributes874=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes874.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:17: ( modifiers )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==96||LA281_0==125||LA281_0==140||LA281_0==150||LA281_0==156||LA281_0==161||(LA281_0 >= 163 && LA281_0 <= 165)||LA281_0==170||LA281_0==176||LA281_0==188||LA281_0==191||LA281_0==193) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1402:17: modifiers
							{
							pushFollow(FOLLOW_modifiers_in_field_declarations13560);
							modifiers875=modifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers875.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_type_in_field_declarations13565);
					type876=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type876.getTree());

					pushFollow(FOLLOW_field_declaration_in_field_declarations13569);
					field_declaration877=field_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration877.getTree());

					}
					break;

				default :
					if ( cnt282 >= 1 ) break loop282;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(282, input);
					throw eee;
				}
				cnt282++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 305, field_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "field_declarations"


	public static class property_declaration_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "property_declaration_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1403:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
	public final csParser.property_declaration_list_return property_declaration_list() throws RecognitionException {
		csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
		retval.start = input.LT(1);
		int property_declaration_list_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes878 =null;
		ParserRuleReturnScope modifiers879 =null;
		ParserRuleReturnScope type880 =null;
		ParserRuleReturnScope property_declaration881 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1403:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			int cnt285=0;
			loop285:
			while (true) {
				int alt285=2;
				int LA285_0 = input.LA(1);
				if ( (LA285_0==IDENTIFIER||LA285_0==91||(LA285_0 >= 95 && LA285_0 <= 98)||(LA285_0 >= 100 && LA285_0 <= 101)||LA285_0==103||(LA285_0 >= 105 && LA285_0 <= 106)||LA285_0==109||LA285_0==114||LA285_0==117||(LA285_0 >= 119 && LA285_0 <= 120)||LA285_0==122||(LA285_0 >= 125 && LA285_0 <= 126)||LA285_0==129||LA285_0==132||LA285_0==135||LA285_0==138||(LA285_0 >= 140 && LA285_0 <= 141)||(LA285_0 >= 143 && LA285_0 <= 144)||(LA285_0 >= 146 && LA285_0 <= 148)||(LA285_0 >= 150 && LA285_0 <= 152)||LA285_0==154||(LA285_0 >= 156 && LA285_0 <= 157)||(LA285_0 >= 160 && LA285_0 <= 165)||LA285_0==167||(LA285_0 >= 169 && LA285_0 <= 173)||(LA285_0 >= 176 && LA285_0 <= 177)||LA285_0==183||(LA285_0 >= 185 && LA285_0 <= 186)||(LA285_0 >= 188 && LA285_0 <= 194)||LA285_0==196) ) {
					alt285=1;
				}

				switch (alt285) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:3: ( attributes )? ( modifiers )? type property_declaration
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:3: ( attributes )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==91) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:3: attributes
							{
							pushFollow(FOLLOW_attributes_in_property_declaration_list13580);
							attributes878=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes878.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:17: ( modifiers )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( (LA284_0==96||LA284_0==125||LA284_0==140||LA284_0==150||LA284_0==156||LA284_0==161||(LA284_0 >= 163 && LA284_0 <= 165)||LA284_0==170||LA284_0==176||LA284_0==188||LA284_0==191||LA284_0==193) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1404:17: modifiers
							{
							pushFollow(FOLLOW_modifiers_in_property_declaration_list13585);
							modifiers879=modifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers879.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_type_in_property_declaration_list13590);
					type880=type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type880.getTree());

					pushFollow(FOLLOW_property_declaration_in_property_declaration_list13594);
					property_declaration881=property_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration881.getTree());

					}
					break;

				default :
					if ( cnt285 >= 1 ) break loop285;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(285, input);
					throw eee;
				}
				cnt285++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 306, property_declaration_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "property_declaration_list"


	public static class constant_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1405:1: constant_declarations : ( constant_declaration )+ ;
	public final csParser.constant_declarations_return constant_declarations() throws RecognitionException {
		csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
		retval.start = input.LT(1);
		int constant_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope constant_declaration882 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1405:22: ( ( constant_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1406:2: ( constant_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1406:2: ( constant_declaration )+
			int cnt286=0;
			loop286:
			while (true) {
				int alt286=2;
				int LA286_0 = input.LA(1);
				if ( (LA286_0==112) ) {
					alt286=1;
				}

				switch (alt286) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1406:2: constant_declaration
					{
					pushFollow(FOLLOW_constant_declaration_in_constant_declarations13604);
					constant_declaration882=constant_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declaration882.getTree());

					}
					break;

				default :
					if ( cnt286 >= 1 ) break loop286;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(286, input);
					throw eee;
				}
				cnt286++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 307, constant_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constant_declarations"


	public static class literals_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "literals"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1407:1: literals : ( literal )+ ;
	public final csParser.literals_return literals() throws RecognitionException {
		csParser.literals_return retval = new csParser.literals_return();
		retval.start = input.LT(1);
		int literals_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope literal883 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1407:9: ( ( literal )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1408:2: ( literal )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1408:2: ( literal )+
			int cnt287=0;
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( (LA287_0==Character_literal||LA287_0==FALSE||LA287_0==Hex_number||(LA287_0 >= NULL && LA287_0 <= NUMBER)||LA287_0==Real_literal||LA287_0==STRINGLITERAL||LA287_0==TRUE||LA287_0==Verbatim_string_literal) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1408:2: literal
					{
					pushFollow(FOLLOW_literal_in_literals13612);
					literal883=literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, literal883.getTree());

					}
					break;

				default :
					if ( cnt287 >= 1 ) break loop287;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(287, input);
					throw eee;
				}
				cnt287++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 308, literals_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "literals"


	public static class delegate_declaration_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delegate_declaration_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1409:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
	public final csParser.delegate_declaration_list_return delegate_declaration_list() throws RecognitionException {
		csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
		retval.start = input.LT(1);
		int delegate_declaration_list_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope attributes884 =null;
		ParserRuleReturnScope modifiers885 =null;
		ParserRuleReturnScope delegate_declaration886 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1409:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			int cnt290=0;
			loop290:
			while (true) {
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==91||LA290_0==96||LA290_0==116||LA290_0==125||LA290_0==140||LA290_0==150||LA290_0==156||LA290_0==161||(LA290_0 >= 163 && LA290_0 <= 165)||LA290_0==170||LA290_0==176||LA290_0==188||LA290_0==191||LA290_0==193) ) {
					alt290=1;
				}

				switch (alt290) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:3: ( attributes )? ( modifiers )? delegate_declaration
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:3: ( attributes )?
					int alt288=2;
					int LA288_0 = input.LA(1);
					if ( (LA288_0==91) ) {
						alt288=1;
					}
					switch (alt288) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:3: attributes
							{
							pushFollow(FOLLOW_attributes_in_delegate_declaration_list13622);
							attributes884=attributes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes884.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:17: ( modifiers )?
					int alt289=2;
					int LA289_0 = input.LA(1);
					if ( (LA289_0==96||LA289_0==125||LA289_0==140||LA289_0==150||LA289_0==156||LA289_0==161||(LA289_0 >= 163 && LA289_0 <= 165)||LA289_0==170||LA289_0==176||LA289_0==188||LA289_0==191||LA289_0==193) ) {
						alt289=1;
					}
					switch (alt289) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1410:17: modifiers
							{
							pushFollow(FOLLOW_modifiers_in_delegate_declaration_list13627);
							modifiers885=modifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers885.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_delegate_declaration_in_delegate_declaration_list13632);
					delegate_declaration886=delegate_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration886.getTree());

					}
					break;

				default :
					if ( cnt290 >= 1 ) break loop290;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(290, input);
					throw eee;
				}
				cnt290++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 309, delegate_declaration_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "delegate_declaration_list"


	public static class local_variable_declaration_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_declaration_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1411:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
	public final csParser.local_variable_declaration_list_return local_variable_declaration_list() throws RecognitionException {
		csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
		retval.start = input.LT(1);
		int local_variable_declaration_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal888=null;
		ParserRuleReturnScope local_variable_declaration887 =null;

		CommonTree char_literal888_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1411:32: ( ( local_variable_declaration ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1412:2: ( local_variable_declaration ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1412:2: ( local_variable_declaration ';' )+
			int cnt291=0;
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==IDENTIFIER||LA291_0==95||(LA291_0 >= 97 && LA291_0 <= 98)||(LA291_0 >= 100 && LA291_0 <= 101)||LA291_0==103||(LA291_0 >= 105 && LA291_0 <= 106)||LA291_0==109||LA291_0==114||LA291_0==117||(LA291_0 >= 119 && LA291_0 <= 120)||LA291_0==122||LA291_0==126||LA291_0==129||LA291_0==132||LA291_0==135||LA291_0==138||LA291_0==141||(LA291_0 >= 143 && LA291_0 <= 144)||(LA291_0 >= 146 && LA291_0 <= 148)||(LA291_0 >= 151 && LA291_0 <= 152)||LA291_0==154||LA291_0==157||LA291_0==160||LA291_0==162||LA291_0==167||LA291_0==169||(LA291_0 >= 171 && LA291_0 <= 173)||LA291_0==177||LA291_0==183||(LA291_0 >= 185 && LA291_0 <= 186)||(LA291_0 >= 189 && LA291_0 <= 190)||LA291_0==192||LA291_0==194||LA291_0==196) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1412:3: local_variable_declaration ';'
					{
					pushFollow(FOLLOW_local_variable_declaration_in_local_variable_declaration_list13643);
					local_variable_declaration887=local_variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration887.getTree());

					char_literal888=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_declaration_list13645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal888_tree = (CommonTree)adaptor.create(char_literal888);
					adaptor.addChild(root_0, char_literal888_tree);
					}

					}
					break;

				default :
					if ( cnt291 >= 1 ) break loop291;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(291, input);
					throw eee;
				}
				cnt291++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 310, local_variable_declaration_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_declaration_list"


	public static class local_variable_initializer_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "local_variable_initializer_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1413:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
	public final csParser.local_variable_initializer_list_return local_variable_initializer_list() throws RecognitionException {
		csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
		retval.start = input.LT(1);
		int local_variable_initializer_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal890=null;
		ParserRuleReturnScope local_variable_initializer889 =null;

		CommonTree char_literal890_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1413:32: ( ( local_variable_initializer ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1414:2: ( local_variable_initializer ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1414:2: ( local_variable_initializer ';' )+
			int cnt292=0;
			loop292:
			while (true) {
				int alt292=2;
				int LA292_0 = input.LA(1);
				if ( (LA292_0==Character_literal||LA292_0==FALSE||(LA292_0 >= Hex_number && LA292_0 <= IDENTIFIER)||(LA292_0 >= MINUS && LA292_0 <= NUMBER)||LA292_0==Real_literal||LA292_0==STRINGLITERAL||LA292_0==TRUE||LA292_0==Verbatim_string_literal||LA292_0==61||LA292_0==66||(LA292_0 >= 68 && LA292_0 <= 69)||(LA292_0 >= 71 && LA292_0 <= 72)||LA292_0==75||LA292_0==95||(LA292_0 >= 97 && LA292_0 <= 98)||(LA292_0 >= 100 && LA292_0 <= 103)||(LA292_0 >= 105 && LA292_0 <= 106)||(LA292_0 >= 109 && LA292_0 <= 110)||(LA292_0 >= 114 && LA292_0 <= 117)||(LA292_0 >= 119 && LA292_0 <= 120)||LA292_0==122||LA292_0==126||LA292_0==129||LA292_0==132||LA292_0==135||LA292_0==138||LA292_0==141||(LA292_0 >= 143 && LA292_0 <= 144)||(LA292_0 >= 146 && LA292_0 <= 148)||(LA292_0 >= 150 && LA292_0 <= 152)||LA292_0==154||LA292_0==157||LA292_0==160||LA292_0==162||LA292_0==167||LA292_0==169||(LA292_0 >= 171 && LA292_0 <= 175)||LA292_0==177||LA292_0==180||(LA292_0 >= 183 && LA292_0 <= 187)||(LA292_0 >= 189 && LA292_0 <= 190)||LA292_0==194||(LA292_0 >= 196 && LA292_0 <= 197)||LA292_0==202) ) {
					alt292=1;
				}

				switch (alt292) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1414:3: local_variable_initializer ';'
					{
					pushFollow(FOLLOW_local_variable_initializer_in_local_variable_initializer_list13656);
					local_variable_initializer889=local_variable_initializer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_initializer889.getTree());

					char_literal890=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_initializer_list13658); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal890_tree = (CommonTree)adaptor.create(char_literal890);
					adaptor.addChild(root_0, char_literal890_tree);
					}

					}
					break;

				default :
					if ( cnt292 >= 1 ) break loop292;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(292, input);
					throw eee;
				}
				cnt292++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 311, local_variable_initializer_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "local_variable_initializer_list"


	public static class expression_list_test_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression_list_test"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1415:1: expression_list_test : ( expression ';' )+ ;
	public final csParser.expression_list_test_return expression_list_test() throws RecognitionException {
		csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
		retval.start = input.LT(1);
		int expression_list_test_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal892=null;
		ParserRuleReturnScope expression891 =null;

		CommonTree char_literal892_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1415:21: ( ( expression ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1416:2: ( expression ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1416:2: ( expression ';' )+
			int cnt293=0;
			loop293:
			while (true) {
				int alt293=2;
				int LA293_0 = input.LA(1);
				if ( (LA293_0==Character_literal||LA293_0==FALSE||(LA293_0 >= Hex_number && LA293_0 <= IDENTIFIER)||(LA293_0 >= MINUS && LA293_0 <= NUMBER)||LA293_0==Real_literal||LA293_0==STRINGLITERAL||LA293_0==TRUE||LA293_0==Verbatim_string_literal||LA293_0==61||LA293_0==66||(LA293_0 >= 68 && LA293_0 <= 69)||(LA293_0 >= 71 && LA293_0 <= 72)||LA293_0==75||LA293_0==95||(LA293_0 >= 97 && LA293_0 <= 98)||(LA293_0 >= 100 && LA293_0 <= 103)||(LA293_0 >= 105 && LA293_0 <= 106)||(LA293_0 >= 109 && LA293_0 <= 110)||(LA293_0 >= 114 && LA293_0 <= 117)||(LA293_0 >= 119 && LA293_0 <= 120)||LA293_0==122||LA293_0==126||LA293_0==129||LA293_0==132||LA293_0==135||LA293_0==138||LA293_0==141||(LA293_0 >= 143 && LA293_0 <= 144)||(LA293_0 >= 146 && LA293_0 <= 148)||(LA293_0 >= 150 && LA293_0 <= 152)||LA293_0==154||LA293_0==157||LA293_0==160||LA293_0==162||LA293_0==167||LA293_0==169||(LA293_0 >= 171 && LA293_0 <= 174)||LA293_0==177||LA293_0==180||(LA293_0 >= 183 && LA293_0 <= 187)||(LA293_0 >= 189 && LA293_0 <= 190)||LA293_0==194||LA293_0==196||LA293_0==202) ) {
					alt293=1;
				}

				switch (alt293) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1416:3: expression ';'
					{
					pushFollow(FOLLOW_expression_in_expression_list_test13669);
					expression891=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression891.getTree());

					char_literal892=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_list_test13671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal892_tree = (CommonTree)adaptor.create(char_literal892);
					adaptor.addChild(root_0, char_literal892_tree);
					}

					}
					break;

				default :
					if ( cnt293 >= 1 ) break loop293;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(293, input);
					throw eee;
				}
				cnt293++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 312, expression_list_test_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression_list_test"


	public static class unary_expression_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unary_expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1417:1: unary_expression_list : ( unary_expression ';' )+ ;
	public final csParser.unary_expression_list_return unary_expression_list() throws RecognitionException {
		csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
		retval.start = input.LT(1);
		int unary_expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal894=null;
		ParserRuleReturnScope unary_expression893 =null;

		CommonTree char_literal894_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1417:22: ( ( unary_expression ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1418:2: ( unary_expression ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1418:2: ( unary_expression ';' )+
			int cnt294=0;
			loop294:
			while (true) {
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==Character_literal||LA294_0==FALSE||(LA294_0 >= Hex_number && LA294_0 <= IDENTIFIER)||(LA294_0 >= MINUS && LA294_0 <= NUMBER)||LA294_0==Real_literal||LA294_0==STRINGLITERAL||LA294_0==TRUE||LA294_0==Verbatim_string_literal||LA294_0==61||LA294_0==66||(LA294_0 >= 68 && LA294_0 <= 69)||(LA294_0 >= 71 && LA294_0 <= 72)||LA294_0==75||LA294_0==95||(LA294_0 >= 97 && LA294_0 <= 98)||(LA294_0 >= 100 && LA294_0 <= 103)||(LA294_0 >= 105 && LA294_0 <= 106)||(LA294_0 >= 109 && LA294_0 <= 110)||(LA294_0 >= 114 && LA294_0 <= 117)||(LA294_0 >= 119 && LA294_0 <= 120)||LA294_0==122||LA294_0==126||LA294_0==129||LA294_0==132||LA294_0==135||LA294_0==138||LA294_0==141||(LA294_0 >= 143 && LA294_0 <= 144)||(LA294_0 >= 146 && LA294_0 <= 148)||(LA294_0 >= 150 && LA294_0 <= 152)||LA294_0==154||LA294_0==157||LA294_0==160||LA294_0==162||LA294_0==167||LA294_0==169||(LA294_0 >= 171 && LA294_0 <= 174)||LA294_0==177||LA294_0==180||(LA294_0 >= 183 && LA294_0 <= 187)||(LA294_0 >= 189 && LA294_0 <= 190)||LA294_0==194||LA294_0==196||LA294_0==202) ) {
					alt294=1;
				}

				switch (alt294) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1418:3: unary_expression ';'
					{
					pushFollow(FOLLOW_unary_expression_in_unary_expression_list13682);
					unary_expression893=unary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression893.getTree());

					char_literal894=(Token)match(input,SEMI,FOLLOW_SEMI_in_unary_expression_list13684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal894_tree = (CommonTree)adaptor.create(char_literal894);
					adaptor.addChild(root_0, char_literal894_tree);
					}

					}
					break;

				default :
					if ( cnt294 >= 1 ) break loop294;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(294, input);
					throw eee;
				}
				cnt294++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 313, unary_expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unary_expression_list"


	public static class invocation_expression_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "invocation_expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1419:1: invocation_expression_list : ( invocation_expression ';' )+ ;
	public final csParser.invocation_expression_list_return invocation_expression_list() throws RecognitionException {
		csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
		retval.start = input.LT(1);
		int invocation_expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal896=null;
		ParserRuleReturnScope invocation_expression895 =null;

		CommonTree char_literal896_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1419:27: ( ( invocation_expression ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1420:2: ( invocation_expression ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1420:2: ( invocation_expression ';' )+
			int cnt295=0;
			loop295:
			while (true) {
				int alt295=2;
				int LA295_0 = input.LA(1);
				if ( (LA295_0==IDENTIFIER||LA295_0==95||(LA295_0 >= 97 && LA295_0 <= 98)||(LA295_0 >= 100 && LA295_0 <= 103)||(LA295_0 >= 105 && LA295_0 <= 106)||LA295_0==109||LA295_0==114||LA295_0==117||(LA295_0 >= 119 && LA295_0 <= 120)||LA295_0==122||LA295_0==126||LA295_0==129||LA295_0==132||LA295_0==135||LA295_0==138||LA295_0==141||(LA295_0 >= 143 && LA295_0 <= 144)||(LA295_0 >= 146 && LA295_0 <= 148)||(LA295_0 >= 151 && LA295_0 <= 152)||LA295_0==154||LA295_0==157||LA295_0==160||LA295_0==162||LA295_0==167||LA295_0==169||(LA295_0 >= 171 && LA295_0 <= 173)||LA295_0==177||LA295_0==180||(LA295_0 >= 183 && LA295_0 <= 186)||(LA295_0 >= 189 && LA295_0 <= 190)||LA295_0==194||LA295_0==196) ) {
					alt295=1;
				}

				switch (alt295) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1420:3: invocation_expression ';'
					{
					pushFollow(FOLLOW_invocation_expression_in_invocation_expression_list13695);
					invocation_expression895=invocation_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_expression895.getTree());

					char_literal896=(Token)match(input,SEMI,FOLLOW_SEMI_in_invocation_expression_list13697); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal896_tree = (CommonTree)adaptor.create(char_literal896);
					adaptor.addChild(root_0, char_literal896_tree);
					}

					}
					break;

				default :
					if ( cnt295 >= 1 ) break loop295;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(295, input);
					throw eee;
				}
				cnt295++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 314, invocation_expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "invocation_expression_list"


	public static class primary_expression_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary_expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1421:1: primary_expression_list : ( primary_expression ';' )+ ;
	public final csParser.primary_expression_list_return primary_expression_list() throws RecognitionException {
		csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
		retval.start = input.LT(1);
		int primary_expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal898=null;
		ParserRuleReturnScope primary_expression897 =null;

		CommonTree char_literal898_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1421:24: ( ( primary_expression ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1422:2: ( primary_expression ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1422:2: ( primary_expression ';' )+
			int cnt296=0;
			loop296:
			while (true) {
				int alt296=2;
				int LA296_0 = input.LA(1);
				if ( (LA296_0==Character_literal||LA296_0==FALSE||(LA296_0 >= Hex_number && LA296_0 <= IDENTIFIER)||(LA296_0 >= NULL && LA296_0 <= NUMBER)||LA296_0==Real_literal||LA296_0==STRINGLITERAL||LA296_0==TRUE||LA296_0==Verbatim_string_literal||LA296_0==68||LA296_0==95||(LA296_0 >= 97 && LA296_0 <= 98)||(LA296_0 >= 100 && LA296_0 <= 103)||(LA296_0 >= 105 && LA296_0 <= 106)||(LA296_0 >= 109 && LA296_0 <= 110)||(LA296_0 >= 114 && LA296_0 <= 117)||(LA296_0 >= 119 && LA296_0 <= 120)||LA296_0==122||LA296_0==126||LA296_0==129||LA296_0==132||LA296_0==135||LA296_0==138||LA296_0==141||(LA296_0 >= 143 && LA296_0 <= 144)||(LA296_0 >= 146 && LA296_0 <= 148)||(LA296_0 >= 150 && LA296_0 <= 152)||LA296_0==154||LA296_0==157||LA296_0==160||LA296_0==162||LA296_0==167||LA296_0==169||(LA296_0 >= 171 && LA296_0 <= 174)||LA296_0==177||LA296_0==180||(LA296_0 >= 183 && LA296_0 <= 187)||(LA296_0 >= 189 && LA296_0 <= 190)||LA296_0==194||LA296_0==196) ) {
					alt296=1;
				}

				switch (alt296) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1422:3: primary_expression ';'
					{
					pushFollow(FOLLOW_primary_expression_in_primary_expression_list13708);
					primary_expression897=primary_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression897.getTree());

					char_literal898=(Token)match(input,SEMI,FOLLOW_SEMI_in_primary_expression_list13710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal898_tree = (CommonTree)adaptor.create(char_literal898);
					adaptor.addChild(root_0, char_literal898_tree);
					}

					}
					break;

				default :
					if ( cnt296 >= 1 ) break loop296;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(296, input);
					throw eee;
				}
				cnt296++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 315, primary_expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primary_expression_list"


	public static class non_assignment_expression_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "non_assignment_expression_list"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1423:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
	public final csParser.non_assignment_expression_list_return non_assignment_expression_list() throws RecognitionException {
		csParser.non_assignment_expression_list_return retval = new csParser.non_assignment_expression_list_return();
		retval.start = input.LT(1);
		int non_assignment_expression_list_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal900=null;
		ParserRuleReturnScope non_assignment_expression899 =null;

		CommonTree char_literal900_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1423:31: ( ( non_assignment_expression ';' )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1424:2: ( non_assignment_expression ';' )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1424:2: ( non_assignment_expression ';' )+
			int cnt297=0;
			loop297:
			while (true) {
				int alt297=2;
				int LA297_0 = input.LA(1);
				if ( (LA297_0==Character_literal||LA297_0==FALSE||(LA297_0 >= Hex_number && LA297_0 <= IDENTIFIER)||(LA297_0 >= MINUS && LA297_0 <= NUMBER)||LA297_0==Real_literal||LA297_0==STRINGLITERAL||LA297_0==TRUE||LA297_0==Verbatim_string_literal||LA297_0==61||LA297_0==66||(LA297_0 >= 68 && LA297_0 <= 69)||(LA297_0 >= 71 && LA297_0 <= 72)||LA297_0==75||LA297_0==95||(LA297_0 >= 97 && LA297_0 <= 98)||(LA297_0 >= 100 && LA297_0 <= 103)||(LA297_0 >= 105 && LA297_0 <= 106)||(LA297_0 >= 109 && LA297_0 <= 110)||(LA297_0 >= 114 && LA297_0 <= 117)||(LA297_0 >= 119 && LA297_0 <= 120)||LA297_0==122||LA297_0==126||LA297_0==129||LA297_0==132||LA297_0==135||LA297_0==138||LA297_0==141||(LA297_0 >= 143 && LA297_0 <= 144)||(LA297_0 >= 146 && LA297_0 <= 148)||(LA297_0 >= 150 && LA297_0 <= 152)||LA297_0==154||LA297_0==157||LA297_0==160||LA297_0==162||LA297_0==167||LA297_0==169||(LA297_0 >= 171 && LA297_0 <= 174)||LA297_0==177||LA297_0==180||(LA297_0 >= 183 && LA297_0 <= 187)||(LA297_0 >= 189 && LA297_0 <= 190)||LA297_0==194||LA297_0==196||LA297_0==202) ) {
					alt297=1;
				}

				switch (alt297) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1424:3: non_assignment_expression ';'
					{
					pushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression_list13721);
					non_assignment_expression899=non_assignment_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression899.getTree());

					char_literal900=(Token)match(input,SEMI,FOLLOW_SEMI_in_non_assignment_expression_list13723); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal900_tree = (CommonTree)adaptor.create(char_literal900);
					adaptor.addChild(root_0, char_literal900_tree);
					}

					}
					break;

				default :
					if ( cnt297 >= 1 ) break loop297;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(297, input);
					throw eee;
				}
				cnt297++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 316, non_assignment_expression_list_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "non_assignment_expression_list"


	public static class method_declarations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "method_declarations"
	// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1425:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
	public final csParser.method_declarations_return method_declarations() throws RecognitionException {
		csParser.method_declarations_return retval = new csParser.method_declarations_return();
		retval.start = input.LT(1);
		int method_declarations_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal902=null;
		ParserRuleReturnScope modifiers901 =null;
		ParserRuleReturnScope type903 =null;
		ParserRuleReturnScope method_declaration904 =null;

		CommonTree string_literal902_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }

			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1425:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			int cnt300=0;
			loop300:
			while (true) {
				int alt300=2;
				int LA300_0 = input.LA(1);
				if ( (LA300_0==IDENTIFIER||(LA300_0 >= 95 && LA300_0 <= 98)||(LA300_0 >= 100 && LA300_0 <= 101)||LA300_0==103||(LA300_0 >= 105 && LA300_0 <= 106)||LA300_0==109||LA300_0==114||LA300_0==117||(LA300_0 >= 119 && LA300_0 <= 120)||LA300_0==122||(LA300_0 >= 125 && LA300_0 <= 126)||LA300_0==129||LA300_0==132||LA300_0==135||LA300_0==138||(LA300_0 >= 140 && LA300_0 <= 141)||(LA300_0 >= 143 && LA300_0 <= 144)||(LA300_0 >= 146 && LA300_0 <= 148)||(LA300_0 >= 150 && LA300_0 <= 152)||LA300_0==154||(LA300_0 >= 156 && LA300_0 <= 157)||(LA300_0 >= 160 && LA300_0 <= 165)||LA300_0==167||(LA300_0 >= 169 && LA300_0 <= 173)||(LA300_0 >= 176 && LA300_0 <= 177)||LA300_0==183||(LA300_0 >= 185 && LA300_0 <= 186)||(LA300_0 >= 188 && LA300_0 <= 194)||LA300_0==196) ) {
					alt300=1;
				}

				switch (alt300) {
				case 1 :
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:3: ( modifiers )? ( 'void' | type ) method_declaration
					{
					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:3: ( modifiers )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==96||LA298_0==125||LA298_0==140||LA298_0==150||LA298_0==156||LA298_0==161||(LA298_0 >= 163 && LA298_0 <= 165)||LA298_0==170||LA298_0==176||LA298_0==188||LA298_0==191||LA298_0==193) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:3: modifiers
							{
							pushFollow(FOLLOW_modifiers_in_method_declarations13734);
							modifiers901=modifiers();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers901.getTree());

							}
							break;

					}

					// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:14: ( 'void' | type )
					int alt299=2;
					int LA299_0 = input.LA(1);
					if ( (LA299_0==192) ) {
						int LA299_1 = input.LA(2);
						if ( (LA299_1==Character_literal||LA299_1==FALSE||(LA299_1 >= Hex_number && LA299_1 <= IDENTIFIER)||(LA299_1 >= NULL && LA299_1 <= NUMBER)||LA299_1==Real_literal||LA299_1==STRINGLITERAL||LA299_1==TRUE||LA299_1==Verbatim_string_literal||LA299_1==95||(LA299_1 >= 97 && LA299_1 <= 98)||(LA299_1 >= 100 && LA299_1 <= 101)||LA299_1==103||(LA299_1 >= 105 && LA299_1 <= 106)||LA299_1==109||LA299_1==114||LA299_1==117||(LA299_1 >= 119 && LA299_1 <= 120)||LA299_1==122||LA299_1==126||LA299_1==129||LA299_1==132||LA299_1==135||LA299_1==138||LA299_1==141||(LA299_1 >= 143 && LA299_1 <= 144)||(LA299_1 >= 146 && LA299_1 <= 148)||(LA299_1 >= 151 && LA299_1 <= 152)||LA299_1==154||LA299_1==157||LA299_1==160||LA299_1==162||LA299_1==167||LA299_1==169||(LA299_1 >= 171 && LA299_1 <= 173)||LA299_1==177||LA299_1==183||(LA299_1 >= 185 && LA299_1 <= 186)||(LA299_1 >= 189 && LA299_1 <= 190)||LA299_1==194||LA299_1==196) ) {
							alt299=1;
						}
						else if ( (LA299_1==69) ) {
							alt299=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 299, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA299_0==IDENTIFIER||LA299_0==95||(LA299_0 >= 97 && LA299_0 <= 98)||(LA299_0 >= 100 && LA299_0 <= 101)||LA299_0==103||(LA299_0 >= 105 && LA299_0 <= 106)||LA299_0==109||LA299_0==114||LA299_0==117||(LA299_0 >= 119 && LA299_0 <= 120)||LA299_0==122||LA299_0==126||LA299_0==129||LA299_0==132||LA299_0==135||LA299_0==138||LA299_0==141||(LA299_0 >= 143 && LA299_0 <= 144)||(LA299_0 >= 146 && LA299_0 <= 148)||(LA299_0 >= 151 && LA299_0 <= 152)||LA299_0==154||LA299_0==157||LA299_0==160||LA299_0==162||LA299_0==167||LA299_0==169||(LA299_0 >= 171 && LA299_0 <= 173)||LA299_0==177||LA299_0==183||(LA299_0 >= 185 && LA299_0 <= 186)||(LA299_0 >= 189 && LA299_0 <= 190)||LA299_0==194||LA299_0==196) ) {
						alt299=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 299, 0, input);
						throw nvae;
					}

					switch (alt299) {
						case 1 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:15: 'void'
							{
							string_literal902=(Token)match(input,192,FOLLOW_192_in_method_declarations13738); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal902_tree = (CommonTree)adaptor.create(string_literal902);
							adaptor.addChild(root_0, string_literal902_tree);
							}

							}
							break;
						case 2 :
							// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1426:24: type
							{
							pushFollow(FOLLOW_type_in_method_declarations13742);
							type903=type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, type903.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_method_declaration_in_method_declarations13745);
					method_declaration904=method_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration904.getTree());

					}
					break;

				default :
					if ( cnt300 >= 1 ) break loop300;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(300, input);
					throw eee;
				}
				cnt300++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 317, method_declarations_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "method_declarations"

	// $ANTLR start synpred1_cs
	public final void synpred1_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:10: ( 'partial' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:67:11: 'partial'
		{
		match(input,159,FOLLOW_159_in_synpred1_cs490); if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_cs

	// $ANTLR start synpred2_cs
	public final void synpred2_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:103:20: ( member_name '(' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:103:21: member_name '('
		{
		pushFollow(FOLLOW_member_name_in_synpred2_cs1070);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,68,FOLLOW_68_in_synpred2_cs1074); if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_cs

	// $ANTLR start synpred3_cs
	public final void synpred3_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:104:22: ( member_name '{' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:104:23: member_name '{'
		{
		pushFollow(FOLLOW_member_name_in_synpred3_cs1107);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,197,FOLLOW_197_in_synpred3_cs1111); if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_cs

	// $ANTLR start synpred4_cs
	public final void synpred4_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:105:22: ( member_name '.' 'this' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:105:23: member_name '.' 'this'
		{
		pushFollow(FOLLOW_member_name_in_synpred4_cs1140);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,DOT,FOLLOW_DOT_in_synpred4_cs1144); if (state.failed) return;
		match(input,180,FOLLOW_180_in_synpred4_cs1148); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_cs

	// $ANTLR start synpred5_cs
	public final void synpred5_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:129:3: ( 'this' brackets )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:129:4: 'this' brackets
		{
		match(input,180,FOLLOW_180_in_synpred5_cs1506); if (state.failed) return;
		pushFollow(FOLLOW_brackets_in_synpred5_cs1511);
		brackets();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred5_cs

	// $ANTLR start synpred6_cs
	public final void synpred6_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:130:4: ( 'base' brackets )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:130:5: 'base' brackets
		{
		match(input,102,FOLLOW_102_in_synpred6_cs1531); if (state.failed) return;
		pushFollow(FOLLOW_brackets_in_synpred6_cs1535);
		brackets();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_cs

	// $ANTLR start synpred7_cs
	public final void synpred7_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:132:14: ( object_creation_expression ( '.' | '->' | '[' ) )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:132:15: object_creation_expression ( '.' | '->' | '[' )
		{
		pushFollow(FOLLOW_object_creation_expression_in_synpred7_cs1580);
		object_creation_expression();
		state._fsp--;
		if (state.failed) return;
		if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91 ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred7_cs

	// $ANTLR start synpred8_cs
	public final void synpred8_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:136:7: ( delegate_creation_expression )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:136:8: delegate_creation_expression
		{
		pushFollow(FOLLOW_delegate_creation_expression_in_synpred8_cs1632);
		delegate_creation_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_cs

	// $ANTLR start synpred9_cs
	public final void synpred9_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:150:4: ( identifier '<' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:150:5: identifier '<'
		{
		pushFollow(FOLLOW_identifier_in_synpred9_cs1780);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,81,FOLLOW_81_in_synpred9_cs1785); if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_cs

	// $ANTLR start synpred10_cs
	public final void synpred10_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:4: ( '(' type ')' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:196:5: '(' type ')'
		{
		match(input,68,FOLLOW_68_in_synpred10_cs2172); if (state.failed) return;
		pushFollow(FOLLOW_type_in_synpred10_cs2176);
		type();
		state._fsp--;
		if (state.failed) return;
		match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_cs2180); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_cs

	// $ANTLR start synpred11_cs
	public final void synpred11_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:226:2: ( array_creation_expression )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:226:3: array_creation_expression
		{
		pushFollow(FOLLOW_array_creation_expression_in_synpred11_cs2438);
		array_creation_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_cs

	// $ANTLR start synpred12_cs
	public final void synpred12_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:11: ( arguments ( '[' | '.' | '->' ) )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:235:12: arguments ( '[' | '.' | '->' )
		{
		pushFollow(FOLLOW_arguments_in_synpred12_cs2521);
		arguments();
		state._fsp--;
		if (state.failed) return;
		if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91 ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred12_cs

	// $ANTLR start synpred13_cs
	public final void synpred13_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:310:20: ( unbound_type_name )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:310:21: unbound_type_name
		{
		pushFollow(FOLLOW_unbound_type_name_in_synpred13_cs3107);
		unbound_type_name();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_cs

	// $ANTLR start synpred14_cs
	public final void synpred14_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:5: ( generic_dimension_specifier '.' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:320:6: generic_dimension_specifier '.'
		{
		pushFollow(FOLLOW_generic_dimension_specifier_in_synpred14_cs3165);
		generic_dimension_specifier();
		state._fsp--;
		if (state.failed) return;
		match(input,DOT,FOLLOW_DOT_in_synpred14_cs3169); if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_cs

	// $ANTLR start synpred15_cs
	public final void synpred15_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:345:9: ( identifier '<' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:345:10: identifier '<'
		{
		pushFollow(FOLLOW_identifier_in_synpred15_cs3340);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,81,FOLLOW_81_in_synpred15_cs3344); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_cs

	// $ANTLR start synpred16_cs
	public final void synpred16_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:355:4: ( identifier '<' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:355:5: identifier '<'
		{
		pushFollow(FOLLOW_identifier_in_synpred16_cs3416);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,81,FOLLOW_81_in_synpred16_cs3421); if (state.failed) return;
		}

	}
	// $ANTLR end synpred16_cs

	// $ANTLR start synpred17_cs
	public final void synpred17_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:12: ( ( predefined_type | type_name ) rank_specifiers )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:13: ( predefined_type | type_name ) rank_specifiers
		{
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:13: ( predefined_type | type_name )
		int alt301=2;
		int LA301_0 = input.LA(1);
		if ( (LA301_0==103||LA301_0==106||LA301_0==109||LA301_0==114||LA301_0==119||LA301_0==129||LA301_0==138||LA301_0==146||LA301_0==151||LA301_0==169||LA301_0==173||LA301_0==177||(LA301_0 >= 185 && LA301_0 <= 186)||LA301_0==189) ) {
			alt301=1;
		}
		else if ( (LA301_0==IDENTIFIER||LA301_0==95||(LA301_0 >= 97 && LA301_0 <= 98)||(LA301_0 >= 100 && LA301_0 <= 101)||LA301_0==105||LA301_0==117||LA301_0==120||LA301_0==122||LA301_0==126||LA301_0==132||LA301_0==135||LA301_0==141||(LA301_0 >= 143 && LA301_0 <= 144)||(LA301_0 >= 147 && LA301_0 <= 148)||LA301_0==152||LA301_0==154||LA301_0==157||LA301_0==160||LA301_0==162||LA301_0==167||(LA301_0 >= 171 && LA301_0 <= 172)||LA301_0==183||LA301_0==190||LA301_0==194||LA301_0==196) ) {
			alt301=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 301, 0, input);
			throw nvae;
		}

		switch (alt301) {
			case 1 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:14: predefined_type
				{
				pushFollow(FOLLOW_predefined_type_in_synpred17_cs3544);
				predefined_type();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:373:32: type_name
				{
				pushFollow(FOLLOW_type_name_in_synpred17_cs3548);
				type_name();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}

		pushFollow(FOLLOW_rank_specifiers_in_synpred17_cs3552);
		rank_specifiers();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_cs

	// $ANTLR start synpred18_cs
	public final void synpred18_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:11: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:12: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
		{
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:12: ( predefined_type | type_name )
		int alt302=2;
		int LA302_0 = input.LA(1);
		if ( (LA302_0==103||LA302_0==106||LA302_0==109||LA302_0==114||LA302_0==119||LA302_0==129||LA302_0==138||LA302_0==146||LA302_0==151||LA302_0==169||LA302_0==173||LA302_0==177||(LA302_0 >= 185 && LA302_0 <= 186)||LA302_0==189) ) {
			alt302=1;
		}
		else if ( (LA302_0==IDENTIFIER||LA302_0==95||(LA302_0 >= 97 && LA302_0 <= 98)||(LA302_0 >= 100 && LA302_0 <= 101)||LA302_0==105||LA302_0==117||LA302_0==120||LA302_0==122||LA302_0==126||LA302_0==132||LA302_0==135||LA302_0==141||(LA302_0 >= 143 && LA302_0 <= 144)||(LA302_0 >= 147 && LA302_0 <= 148)||LA302_0==152||LA302_0==154||LA302_0==157||LA302_0==160||LA302_0==162||LA302_0==167||(LA302_0 >= 171 && LA302_0 <= 172)||LA302_0==183||LA302_0==190||LA302_0==194||LA302_0==196) ) {
			alt302=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 302, 0, input);
			throw nvae;
		}

		switch (alt302) {
			case 1 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:13: predefined_type
				{
				pushFollow(FOLLOW_predefined_type_in_synpred18_cs3586);
				predefined_type();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:31: type_name
				{
				pushFollow(FOLLOW_type_name_in_synpred18_cs3590);
				type_name();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}

		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:43: ( ( '*' )+ | '?' )
		int alt304=2;
		int LA304_0 = input.LA(1);
		if ( (LA304_0==69) ) {
			alt304=1;
		}
		else if ( (LA304_0==89) ) {
			alt304=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 304, 0, input);
			throw nvae;
		}

		switch (alt304) {
			case 1 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:44: ( '*' )+
				{
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:44: ( '*' )+
				int cnt303=0;
				loop303:
				while (true) {
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==69) ) {
						alt303=1;
					}

					switch (alt303) {
					case 1 :
						// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:44: '*'
						{
						match(input,69,FOLLOW_69_in_synpred18_cs3595); if (state.failed) return;
						}
						break;

					default :
						if ( cnt303 >= 1 ) break loop303;
						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee = new EarlyExitException(303, input);
						throw eee;
					}
					cnt303++;
				}

				}
				break;
			case 2 :
				// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:374:51: '?'
				{
				match(input,89,FOLLOW_89_in_synpred18_cs3600); if (state.failed) return;
				}
				break;

		}

		}

	}
	// $ANTLR end synpred18_cs

	// $ANTLR start synpred19_cs
	public final void synpred19_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:414:10: ( unary_expression assignment_operator )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:414:11: unary_expression assignment_operator
		{
		pushFollow(FOLLOW_unary_expression_in_synpred19_cs3892);
		unary_expression();
		state._fsp--;
		if (state.failed) return;
		pushFollow(FOLLOW_assignment_operator_in_synpred19_cs3896);
		assignment_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_cs

	// $ANTLR start synpred20_cs
	public final void synpred20_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:431:2: ( cast_expression )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:431:3: cast_expression
		{
		pushFollow(FOLLOW_cast_expression_in_synpred20_cs4049);
		cast_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred20_cs

	// $ANTLR start synpred21_cs
	public final void synpred21_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:457:2: ( anonymous_function_signature '=>' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:457:3: anonymous_function_signature '=>'
		{
		pushFollow(FOLLOW_anonymous_function_signature_in_synpred21_cs4295);
		anonymous_function_signature();
		state._fsp--;
		if (state.failed) return;
		match(input,87,FOLLOW_87_in_synpred21_cs4299); if (state.failed) return;
		}

	}
	// $ANTLR end synpred21_cs

	// $ANTLR start synpred22_cs
	public final void synpred22_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:458:4: ( query_expression )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:458:5: query_expression
		{
		pushFollow(FOLLOW_query_expression_in_synpred22_cs4314);
		query_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_cs

	// $ANTLR start synpred23_cs
	public final void synpred23_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:50: ( 'into' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:549:51: 'into'
		{
		match(input,141,FOLLOW_141_in_synpred23_cs5116); if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_cs

	// $ANTLR start synpred24_cs
	public final void synpred24_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:32: ( ',' identifier '=' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:619:33: ',' identifier '='
		{
		match(input,74,FOLLOW_74_in_synpred24_cs5669); if (state.failed) return;
		pushFollow(FOLLOW_identifier_in_synpred24_cs5673);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,85,FOLLOW_85_in_synpred24_cs5677); if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_cs

	// $ANTLR start synpred25_cs
	public final void synpred25_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:719:4: ( member_name '{' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:719:5: member_name '{'
		{
		pushFollow(FOLLOW_member_name_in_synpred25_cs6545);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,197,FOLLOW_197_in_synpred25_cs6549); if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_cs

	// $ANTLR start synpred26_cs
	public final void synpred26_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:838:14: ( member_name '(' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:838:15: member_name '('
		{
		pushFollow(FOLLOW_member_name_in_synpred26_cs7555);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,68,FOLLOW_68_in_synpred26_cs7559); if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_cs

	// $ANTLR start synpred27_cs
	public final void synpred27_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:839:14: ( member_name '{' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:839:15: member_name '{'
		{
		pushFollow(FOLLOW_member_name_in_synpred27_cs7580);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,197,FOLLOW_197_in_synpred27_cs7584); if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_cs

	// $ANTLR start synpred28_cs
	public final void synpred28_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:890:11: ( member_name '(' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:890:12: member_name '('
		{
		pushFollow(FOLLOW_member_name_in_synpred28_cs8028);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,68,FOLLOW_68_in_synpred28_cs8032); if (state.failed) return;
		}

	}
	// $ANTLR end synpred28_cs

	// $ANTLR start synpred29_cs
	public final void synpred29_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:891:8: ( member_name '{' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:891:9: member_name '{'
		{
		pushFollow(FOLLOW_member_name_in_synpred29_cs8047);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,197,FOLLOW_197_in_synpred29_cs8051); if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_cs

	// $ANTLR start synpred30_cs
	public final void synpred30_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:892:8: ( member_name '.' 'this' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:892:9: member_name '.' 'this'
		{
		pushFollow(FOLLOW_member_name_in_synpred30_cs8066);
		member_name();
		state._fsp--;
		if (state.failed) return;
		match(input,DOT,FOLLOW_DOT_in_synpred30_cs8070); if (state.failed) return;
		match(input,180,FOLLOW_180_in_synpred30_cs8074); if (state.failed) return;
		}

	}
	// $ANTLR end synpred30_cs

	// $ANTLR start synpred31_cs
	public final void synpred31_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:23: ( arguments ( '[' | '.' | '->' ) )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:964:24: arguments ( '[' | '.' | '->' )
		{
		pushFollow(FOLLOW_arguments_in_synpred31_cs8620);
		arguments();
		state._fsp--;
		if (state.failed) return;
		if ( input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91 ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred31_cs

	// $ANTLR start synpred32_cs
	public final void synpred32_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:968:4: ( identifier '<' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:968:5: identifier '<'
		{
		pushFollow(FOLLOW_identifier_in_synpred32_cs8671);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,81,FOLLOW_81_in_synpred32_cs8676); if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_cs

	// $ANTLR start synpred33_cs
	public final void synpred33_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:982:9: ( declaration_statement )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:982:10: declaration_statement
		{
		pushFollow(FOLLOW_declaration_statement_in_synpred33_cs8770);
		declaration_statement();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_cs

	// $ANTLR start synpred34_cs
	public final void synpred34_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:983:11: ( identifier ':' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:983:12: identifier ':'
		{
		pushFollow(FOLLOW_identifier_in_synpred34_cs8792);
		identifier();
		state._fsp--;
		if (state.failed) return;
		match(input,79,FOLLOW_79_in_synpred34_cs8796); if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_cs

	// $ANTLR start synpred35_cs
	public final void synpred35_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1027:9: ( 'var' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1027:10: 'var'
		{
		match(input,190,FOLLOW_190_in_synpred35_cs9346); if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_cs

	// $ANTLR start synpred36_cs
	public final void synpred36_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1028:11: ( 'dynamic' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1028:12: 'dynamic'
		{
		match(input,120,FOLLOW_120_in_synpred36_cs9368); if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_cs

	// $ANTLR start synpred37_cs
	public final void synpred37_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1060:66: ( 'else' )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1060:67: 'else'
		{
		match(input,121,FOLLOW_121_in_synpred37_cs9740); if (state.failed) return;
		}

	}
	// $ANTLR end synpred37_cs

	// $ANTLR start synpred38_cs
	public final void synpred38_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1094:2: ( local_variable_declaration )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1094:3: local_variable_declaration
		{
		pushFollow(FOLLOW_local_variable_declaration_in_synpred38_cs10097);
		local_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred38_cs

	// $ANTLR start synpred39_cs
	public final void synpred39_cs_fragment() throws RecognitionException {
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1160:2: ( local_variable_declaration )
		// C:\\Users\\Raphael\\git\\GOOL\\src\\gool\\parser\\csharp\\util\\cs.g:1160:3: local_variable_declaration
		{
		pushFollow(FOLLOW_local_variable_declaration_in_synpred39_cs10717);
		local_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_cs

	// Delegated rules

	public final boolean synpred24_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred32_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred29_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred28_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred25_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred37_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred22_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred34_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred36_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred21_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred33_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred26_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred35_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred39_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred27_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_cs() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_cs_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA50 dfa50 = new DFA50(this);
	protected DFA71 dfa71 = new DFA71(this);
	protected DFA72 dfa72 = new DFA72(this);
	static final String DFA50_eotS =
		"\5\uffff";
	static final String DFA50_eofS =
		"\1\2\3\uffff\1\2";
	static final String DFA50_minS =
		"\1\12\1\5\2\uffff\1\12";
	static final String DFA50_maxS =
		"\1\u00c9\1\u00ca\2\uffff\1\u00c9";
	static final String DFA50_acceptS =
		"\2\uffff\1\1\1\2\1\uffff";
	static final String DFA50_specialS =
		"\5\uffff}>";
	static final String[] DFA50_transitionS = {
			"\1\3\12\uffff\1\2\5\uffff\1\2\6\uffff\1\2\12\uffff\1\3\1\uffff\1\2\2"+
			"\uffff\1\2\13\uffff\6\2\1\3\13\2\1\uffff\6\2\1\uffff\3\2\1\1\4\2\1\uffff"+
			"\5\2\3\uffff\1\2\13\uffff\1\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\5\uffff"+
			"\1\2\2\uffff\1\2\5\uffff\4\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2\4\uffff\1\2\3\uffff\2\2\12\uffff\1\2\6\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\6\2",
			"\1\3\16\uffff\1\3\5\uffff\2\3\6\uffff\3\3\13\uffff\1\3\2\uffff\1\3\1"+
			"\uffff\1\3\4\uffff\1\3\2\uffff\1\3\4\uffff\1\3\1\uffff\2\3\1\uffff\2"+
			"\3\1\uffff\1\2\1\3\20\uffff\1\4\2\uffff\1\3\1\uffff\2\3\1\uffff\4\3\1"+
			"\uffff\2\3\2\uffff\2\3\3\uffff\4\3\1\uffff\2\3\1\uffff\1\3\3\uffff\1"+
			"\3\2\uffff\1\3\2\uffff\1\3\2\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\2\3\1\uffff\3\3\1\uffff\3\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\1\3\4\uffff\1\3\1\uffff\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\2\uffff"+
			"\5\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3",
			"",
			"",
			"\1\3\12\uffff\1\2\5\uffff\1\2\6\uffff\1\2\12\uffff\1\3\1\uffff\1\2\2"+
			"\uffff\1\2\13\uffff\6\2\1\3\13\2\1\uffff\6\2\1\uffff\3\2\1\1\4\2\1\uffff"+
			"\5\2\3\uffff\1\2\13\uffff\1\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\5\uffff"+
			"\1\2\2\uffff\1\2\5\uffff\4\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2\4\uffff\1\2\3\uffff\2\2\12\uffff\1\2\6\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\6\2"
	};

	static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
	static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
	static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
	static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
	static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
	static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
	static final short[][] DFA50_transition;

	static {
		int numStates = DFA50_transitionS.length;
		DFA50_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
		}
	}

	protected class DFA50 extends DFA {

		public DFA50(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}
		@Override
		public String getDescription() {
			return "233:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )";
		}
	}

	static final String DFA71_eotS =
		"\16\uffff";
	static final String DFA71_eofS =
		"\16\uffff";
	static final String DFA71_minS =
		"\1\33\1\12\1\uffff\1\57\1\33\1\25\1\33\1\uffff\1\12\2\uffff\1\12\2\25";
	static final String DFA71_maxS =
		"\1\u00c4\1\133\1\uffff\1\105\3\u00c4\1\uffff\1\133\2\uffff\1\133\2\u00c4";
	static final String DFA71_acceptS =
		"\2\uffff\1\2\4\uffff\1\3\1\uffff\2\1\3\uffff";
	static final String DFA71_specialS =
		"\5\uffff\1\2\6\uffff\1\1\1\0}>";
	static final String[] DFA71_transitionS = {
			"\1\1\103\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\1\2\1\uffff\1\1\1"+
			"\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\1\1\uffff\1\2\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\2\uffff\1\2\2\uffff\1\1\2\uffff\1\1\2\uffff\1\2\2\uffff\1"+
			"\1\1\uffff\2\1\1\uffff\1\2\2\1\2\uffff\1\2\1\1\1\uffff\1\1\2\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\2\1\uffff\2\1\1\2\3"+
			"\uffff\1\2\5\uffff\1\1\1\uffff\2\2\2\uffff\1\2\1\1\1\uffff\1\3\1\uffff"+
			"\1\1\1\uffff\1\1",
			"\1\6\44\uffff\1\2\25\uffff\1\2\12\uffff\1\4\1\5\7\uffff\1\2\1\uffff"+
			"\1\2",
			"",
			"\1\7\25\uffff\1\2",
			"\1\10\103\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10\13\uffff"+
			"\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\5\uffff\1\10\2\uffff\1\10"+
			"\5\uffff\1\10\1\uffff\2\10\2\uffff\2\10\3\uffff\1\10\1\uffff\1\10\2\uffff"+
			"\1\10\2\uffff\1\10\1\uffff\1\10\4\uffff\1\10\3\uffff\2\10\12\uffff\1"+
			"\10\6\uffff\1\10\3\uffff\1\10\1\uffff\1\10",
			"\1\12\5\uffff\1\2\56\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1\uffff\2\2"+
			"\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff"+
			"\1\2\5\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2",
			"\1\13\103\uffff\1\13\1\uffff\2\13\1\uffff\2\13\3\uffff\1\13\13\uffff"+
			"\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\5\uffff\1\13\2\uffff\1\13"+
			"\5\uffff\1\13\1\uffff\2\13\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\2\uffff"+
			"\1\13\2\uffff\1\13\1\uffff\1\13\4\uffff\1\13\3\uffff\2\13\12\uffff\1"+
			"\13\6\uffff\1\13\3\uffff\1\13\1\uffff\1\13",
			"",
			"\1\6\44\uffff\1\2\25\uffff\1\2\13\uffff\1\14\7\uffff\1\2\1\uffff\1\2",
			"",
			"",
			"\1\6\44\uffff\1\2\25\uffff\1\2\13\uffff\1\15\7\uffff\1\2\1\uffff\1\2",
			"\1\12\5\uffff\1\2\56\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1\uffff\2\2"+
			"\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff"+
			"\1\2\5\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2",
			"\1\12\5\uffff\1\2\56\uffff\1\11\24\uffff\1\2\1\uffff\2\2\1\uffff\2\2"+
			"\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\2\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff"+
			"\1\2\5\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2"
	};

	static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
	static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
	static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
	static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
	static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
	static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
	static final short[][] DFA71_transition;

	static {
		int numStates = DFA71_transitionS.length;
		DFA71_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
		}
	}

	protected class DFA71 extends DFA {

		public DFA71(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}
		@Override
		public String getDescription() {
			return "310:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA71_13 = input.LA(1);
						 
						int index71_13 = input.index();
						input.rewind();
						s = -1;
						if ( (LA71_13==74) && (synpred13_cs())) {s = 9;}
						else if ( (LA71_13==GT) && (synpred13_cs())) {s = 10;}
						else if ( (LA71_13==IDENTIFIER||LA71_13==95||(LA71_13 >= 97 && LA71_13 <= 98)||(LA71_13 >= 100 && LA71_13 <= 101)||LA71_13==103||(LA71_13 >= 105 && LA71_13 <= 106)||LA71_13==109||LA71_13==114||LA71_13==117||(LA71_13 >= 119 && LA71_13 <= 120)||LA71_13==122||LA71_13==126||LA71_13==129||LA71_13==132||LA71_13==135||LA71_13==138||LA71_13==141||(LA71_13 >= 143 && LA71_13 <= 144)||(LA71_13 >= 146 && LA71_13 <= 148)||(LA71_13 >= 151 && LA71_13 <= 152)||LA71_13==154||LA71_13==157||LA71_13==160||LA71_13==162||LA71_13==167||LA71_13==169||(LA71_13 >= 171 && LA71_13 <= 173)||LA71_13==177||LA71_13==183||(LA71_13 >= 185 && LA71_13 <= 186)||(LA71_13 >= 189 && LA71_13 <= 190)||LA71_13==192||LA71_13==194||LA71_13==196) ) {s = 2;}
						 
						input.seek(index71_13);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA71_12 = input.LA(1);
						 
						int index71_12 = input.index();
						input.rewind();
						s = -1;
						if ( (LA71_12==74) && (synpred13_cs())) {s = 9;}
						else if ( (LA71_12==GT) && (synpred13_cs())) {s = 10;}
						else if ( (LA71_12==IDENTIFIER||LA71_12==95||(LA71_12 >= 97 && LA71_12 <= 98)||(LA71_12 >= 100 && LA71_12 <= 101)||LA71_12==103||(LA71_12 >= 105 && LA71_12 <= 106)||LA71_12==109||LA71_12==114||LA71_12==117||(LA71_12 >= 119 && LA71_12 <= 120)||LA71_12==122||LA71_12==126||LA71_12==129||LA71_12==132||LA71_12==135||LA71_12==138||LA71_12==141||(LA71_12 >= 143 && LA71_12 <= 144)||(LA71_12 >= 146 && LA71_12 <= 148)||(LA71_12 >= 151 && LA71_12 <= 152)||LA71_12==154||LA71_12==157||LA71_12==160||LA71_12==162||LA71_12==167||LA71_12==169||(LA71_12 >= 171 && LA71_12 <= 173)||LA71_12==177||LA71_12==183||(LA71_12 >= 185 && LA71_12 <= 186)||(LA71_12 >= 189 && LA71_12 <= 190)||LA71_12==192||LA71_12==194||LA71_12==196) ) {s = 2;}
						 
						input.seek(index71_12);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA71_5 = input.LA(1);
						 
						int index71_5 = input.index();
						input.rewind();
						s = -1;
						if ( (LA71_5==74) && (synpred13_cs())) {s = 9;}
						else if ( (LA71_5==GT) && (synpred13_cs())) {s = 10;}
						else if ( (LA71_5==IDENTIFIER||LA71_5==95||(LA71_5 >= 97 && LA71_5 <= 98)||(LA71_5 >= 100 && LA71_5 <= 101)||LA71_5==103||(LA71_5 >= 105 && LA71_5 <= 106)||LA71_5==109||LA71_5==114||LA71_5==117||(LA71_5 >= 119 && LA71_5 <= 120)||LA71_5==122||LA71_5==126||LA71_5==129||LA71_5==132||LA71_5==135||LA71_5==138||LA71_5==141||(LA71_5 >= 143 && LA71_5 <= 144)||(LA71_5 >= 146 && LA71_5 <= 148)||(LA71_5 >= 151 && LA71_5 <= 152)||LA71_5==154||LA71_5==157||LA71_5==160||LA71_5==162||LA71_5==167||LA71_5==169||(LA71_5 >= 171 && LA71_5 <= 173)||LA71_5==177||LA71_5==183||(LA71_5 >= 185 && LA71_5 <= 186)||(LA71_5 >= 189 && LA71_5 <= 190)||LA71_5==192||LA71_5==194||LA71_5==196) ) {s = 2;}
						 
						input.seek(index71_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 71, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA72_eotS =
		"\7\uffff";
	static final String DFA72_eofS =
		"\4\uffff\1\5\2\uffff";
	static final String DFA72_minS =
		"\1\12\1\25\1\uffff\1\25\1\12\2\uffff";
	static final String DFA72_maxS =
		"\1\121\1\112\1\uffff\1\112\1\57\2\uffff";
	static final String DFA72_acceptS =
		"\2\uffff\1\2\2\uffff\1\3\1\1";
	static final String DFA72_specialS =
		"\4\uffff\1\0\2\uffff}>";
	static final String[] DFA72_transitionS = {
			"\1\2\106\uffff\1\1",
			"\1\4\64\uffff\1\3",
			"",
			"\1\4\64\uffff\1\3",
			"\1\6\44\uffff\1\5",
			"",
			""
	};

	static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
	static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
	static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
	static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
	static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
	static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
	static final short[][] DFA72_transition;

	static {
		int numStates = DFA72_transitionS.length;
		DFA72_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
		}
	}

	protected class DFA72 extends DFA {

		public DFA72(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 320:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA72_4 = input.LA(1);
						 
						int index72_4 = input.index();
						input.rewind();
						s = -1;
						if ( (LA72_4==EOF||LA72_4==RPAREN) ) {s = 5;}
						else if ( (LA72_4==DOT) && (synpred14_cs())) {s = 6;}
						 
						input.seek(index72_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 72, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_namespace_body_in_compilation_unit90 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_149_in_namespace_declaration111 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_namespace_block_in_namespace_declaration119 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_SEMI_in_namespace_declaration123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_namespace_block132 = new BitSet(new long[]{0x0200000000020000L,0x2010800108000000L,0x9005043A90601800L,0x0000000000000202L});
	public static final BitSet FOLLOW_namespace_body_in_namespace_block136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_namespace_block141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body169 = new BitSet(new long[]{0x0200000000020002L,0x2010800108000000L,0x9005043A90601800L,0x0000000000000002L});
	public static final BitSet FOLLOW_using_directives_in_namespace_body176 = new BitSet(new long[]{0x0000000000020002L,0x2010800108000000L,0x9005043A90601800L,0x0000000000000002L});
	public static final BitSet FOLLOW_global_attributes_in_namespace_body183 = new BitSet(new long[]{0x0000000000020002L,0x2010800108000000L,0x9005043A90601800L,0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives228 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_125_in_extern_alias_directive244 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_98_in_extern_alias_directive248 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_extern_alias_directive252 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_extern_alias_directive255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_directive_in_using_directives281 = new BitSet(new long[]{0x0200000000000002L});
	public static final BitSet FOLLOW_using_alias_directive_in_using_directive292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_namespace_directive_in_using_directive297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_in_using_alias_directive306 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_using_alias_directive310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_using_alias_directive314 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive318 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_using_alias_directive322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_in_using_namespace_directive330 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive334 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_using_namespace_directive338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations374 = new BitSet(new long[]{0x0000000000020002L,0x2010800108000000L,0x9005043A90601800L,0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attributes_in_namespace_member_declaration431 = new BitSet(new long[]{0x0000000000020000L,0x2010800100000000L,0x9005043A90401800L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifiers_in_namespace_member_declaration438 = new BitSet(new long[]{0x0000000000020000L,0x0010800000000000L,0x0004000080000800L});
	public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_159_in_type_declaration495 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0004000000000800L});
	public static final BitSet FOLLOW_class_declaration_in_type_declaration500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_type_declaration568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_type_declaration636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_declaration_in_type_declaration652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_type_declaration666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_type_declaration678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enum_declaration_in_type_declaration690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delegate_declaration_in_type_declaration702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_qualified_identifier712 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_DOT_in_qualified_identifier715 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_qualified_identifier717 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_in_modifiers767 = new BitSet(new long[]{0x0000000000000002L,0x2000000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_attributes_in_class_member_declaration878 = new BitSet(new long[]{0x0000000008020000L,0x7DB5A6B780000000L,0xF6873EBFB5DDBD92L,0x0000000000000417L});
	public static final BitSet FOLLOW_modifiers_in_class_member_declaration891 = new BitSet(new long[]{0x0000000008020000L,0x5DB5A6B680000000L,0x66863A85A59DAD92L,0x0000000000000415L});
	public static final BitSet FOLLOW_112_in_class_member_declaration904 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_class_member_declaration908 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_constant_declarators_in_class_member_declaration912 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_class_member_declaration916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_159_in_class_member_declaration929 = new BitSet(new long[]{0x042900180C100020L,0x45A4A6B680000000L,0x66863A85259DAC92L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_class_member_declaration932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_declaration_in_class_member_declaration996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration1028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_192_in_class_member_declaration1044 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_class_member_declaration1049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_class_member_declaration1065 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66923A85279DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_class_member_declaration1081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_declaration_in_class_member_declaration1116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_name_in_class_member_declaration1153 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_DOT_in_class_member_declaration1155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration1157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration1176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_field_declaration_in_class_member_declaration1205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_declaration_in_class_member_declaration1232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_declaration_in_class_member_declaration1290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration1323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enum_declaration_in_class_member_declaration1343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_event_declaration_in_class_member_declaration1357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration1385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delegate_declaration_in_class_member_declaration1405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration1425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_declaration_in_class_member_declaration1437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_destructor_declaration_in_class_member_declaration1457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_primary_expression1516 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_brackets_in_primary_expression1520 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1524 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_180_in_primary_expression1540 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_brackets_in_primary_expression1544 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1548 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_primary_expression_start_in_primary_expression1557 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1564 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_150_in_primary_expression1573 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000035L});
	public static final BitSet FOLLOW_object_creation_expression_in_primary_expression1603 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1609 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L});
	public static final BitSet FOLLOW_delegate_creation_expression_in_primary_expression1637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_object_creation_expression_in_primary_expression1647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression1657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sizeof_expression_in_primary_expression1670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checked_expression_in_primary_expression1681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unchecked_expression_in_primary_expression1700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_expression_in_primary_expression1717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression1730 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predefined_type_in_primary_expression_start1760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_primary_expression_start1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_argument_list_in_primary_expression_start1794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_primary_expression_start1801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
	public static final BitSet FOLLOW_80_in_primary_expression_start1804 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_primary_expression_start1808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_primary_expression_start1817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_102_in_primary_expression_start1823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_paren_expression_in_primary_expression_start1830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start1836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_literal_in_primary_expression_start1856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_access_identifier_in_primary_expression_part1876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part1884 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_access_operator_in_access_identifier1904 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_or_generic_in_access_identifier1910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brackets_in_brackets_or_arguments1949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arguments_in_brackets_or_arguments1956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_91_in_brackets1970 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6900009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_list_in_brackets1976 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_brackets1982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_paren_expression1996 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_paren_expression2002 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_paren_expression2006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_arguments2020 = new BitSet(new long[]{0x2429801C0C100020L,0x45BC66F6800089B4L,0x6F927AC52DDDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_argument_list_in_arguments2026 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_arguments2033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_argument_in_argument_list2057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_argument_list2062 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800089B4L,0x6F927AC52DDDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_argument_in_argument_list2066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_argument_name_in_argument2093 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927AC52DDDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_argument_value_in_argument2097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_argument_value_in_argument2105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_79_in_argument_name2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_argument_value2140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ref_variable_reference_in_argument_value2147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_155_in_argument_value2153 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_variable_reference_in_argument_value2157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_166_in_ref_variable_reference2165 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_68_in_ref_variable_reference2187 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_ref_variable_reference2191 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_ref_variable_reference2195 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927AC525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference2200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference2204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference2240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_variable_reference2250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers2258 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_rank_specifier2276 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000400L});
	public static final BitSet FOLLOW_dim_separators_in_rank_specifier2280 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_rank_specifier2285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_74_in_dim_separators2294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_type_name_in_delegate_creation_expression2307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_delegate_creation_expression2311 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_name_in_delegate_creation_expression2315 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_delegate_creation_expression2319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_anonymous_object_initializer2339 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000400L,0x408018852519A090L,0x0000000000000214L});
	public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer2343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_74_in_anonymous_object_initializer2348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_anonymous_object_initializer2353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_declarator_in_member_declarator_list2361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_member_declarator_list2365 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_member_declarator_in_member_declarator_list2367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_member_declarator2379 = new BitSet(new long[]{0x0000000000000400L,0x0000000000220000L});
	public static final BitSet FOLLOW_generic_argument_list_in_member_declarator2384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_member_declarator2394 = new BitSet(new long[]{0x042900180C100020L,0x45BC66F680000010L,0x6F927A8525DDA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_primary_or_array_creation_expression_in_member_declarator2398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_85_in_member_declarator2408 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_member_declarator2412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression2450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_150_in_array_creation_expression2462 = new BitSet(new long[]{0x0000000008000000L,0x45A426B688000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_array_creation_expression2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_91_in_array_creation_expression2475 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_list_in_array_creation_expression2479 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_array_creation_expression2483 = new BitSet(new long[]{0x0000200000000402L,0x0000000008000010L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression2495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arguments_in_array_creation_expression2536 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000000L});
	public static final BitSet FOLLOW_invocation_part_in_array_creation_expression2540 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_invocation_part_in_array_creation_expression2552 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_arguments_in_array_creation_expression2558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rank_specifier_in_array_creation_expression2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_array_initializer2642 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F680000DB4L,0x6F927A8525DDA492L,0x0000000000000634L});
	public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer2646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_74_in_array_initializer2651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_array_initializer2656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list2669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_variable_initializer_list2672 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list2674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_variable_initializer2692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_array_initializer_in_variable_initializer2700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_174_in_sizeof_expression2710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_sizeof_expression2714 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_unmanaged_type_in_sizeof_expression2718 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sizeof_expression2722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_110_in_checked_expression2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_checked_expression2734 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_checked_expression2738 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_checked_expression2742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_187_in_unchecked_expression2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_unchecked_expression2755 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_unchecked_expression2759 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_unchecked_expression2763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_115_in_default_value_expression2772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_default_value_expression2776 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_default_value_expression2780 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_default_value_expression2784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_116_in_anonymous_method_expression2792 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2796 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_anonymous_method_expression2801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_explicit_anonymous_function_signature2808 = new BitSet(new long[]{0x0000800008000000L,0x45A426B680000000L,0x66823AC52D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2812 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature2817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_explicit_anonymous_function_parameter_list2830 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823AC52D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2845 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter2850 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter2854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_object_creation_expression2894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_68_in_object_creation_expression2903 = new BitSet(new long[]{0x2429801C0C100020L,0x45BC66F6800089B4L,0x6F927AC52DDDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_argument_list_in_object_creation_expression2909 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_object_creation_expression2914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_object_or_collection_initializer2942 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F680000DB4L,0x6F927A8525DDA492L,0x0000000000000634L});
	public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer2946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer2953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_74_in_collection_initializer2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_collection_initializer2972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_element_initializer_list2985 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer2998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_element_initializer3004 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_list_in_element_initializer3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_element_initializer3012 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_initializer_list_in_object_initializer3027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_74_in_object_initializer3032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_object_initializer3037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_initializer_in_member_initializer_list3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_member_initializer_list3050 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_member_initializer_in_member_initializer_list3052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_member_initializer3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_member_initializer3066 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_initializer_value_in_member_initializer3070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_initializer_value3079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value3085 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_184_in_typeof_expression3097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_typeof_expression3101 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression3112 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_type_in_typeof_expression3123 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_192_in_typeof_expression3135 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_typeof_expression3140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name3155 = new BitSet(new long[]{0x0000000000000400L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3174 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name3178 = new BitSet(new long[]{0x0000000000000400L,0x0000000000020000L});
	public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name3185 = new BitSet(new long[]{0x0000000000000400L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_unbound_type_name_start3205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
	public static final BitSet FOLLOW_80_in_unbound_type_name_start3208 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_unbound_type_name_start3210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_unbound_type_name_part3219 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_unbound_type_name_part3223 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_81_in_generic_dimension_specifier3231 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000400L});
	public static final BitSet FOLLOW_commas_in_generic_dimension_specifier3235 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GT_in_generic_dimension_specifier3240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_74_in_commas3249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_namespace_or_type_name_in_type_name3273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3293 = new BitSet(new long[]{0x0000000000000402L,0x0000000000010000L});
	public static final BitSet FOLLOW_80_in_namespace_or_type_name3300 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3302 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_DOT_in_namespace_or_type_name3307 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name3311 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_type_or_generic3351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_argument_list_in_type_or_generic3357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_type_or_generic3373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qid_start_in_qid3396 = new BitSet(new long[]{0x0000200000000402L});
	public static final BitSet FOLLOW_qid_part_in_qid3400 = new BitSet(new long[]{0x0000200000000402L});
	public static final BitSet FOLLOW_predefined_type_in_qid_start3410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_qid_start3426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_argument_list_in_qid_start3430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_qid_start3437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
	public static final BitSet FOLLOW_80_in_qid_start3442 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_qid_start3446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_literal_in_qid_start3453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_access_identifier_in_qid_part3467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_81_in_generic_argument_list3488 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_arguments_in_generic_argument_list3492 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GT_in_generic_argument_list3496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_type_arguments3505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_type_arguments3508 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_type_arguments3510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_predefined_type_in_type3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_type_name_in_type3562 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_rank_specifiers_in_type3567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_69_in_type3571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_predefined_type_in_type3607 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000020L});
	public static final BitSet FOLLOW_type_name_in_type3611 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000020L});
	public static final BitSet FOLLOW_69_in_type3617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_89_in_type3622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predefined_type_in_type3636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_name_in_type3640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_192_in_type3653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_69_in_type3655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_predefined_type_in_non_nullable_type3686 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000020L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_name_in_non_nullable_type3690 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000020L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_rank_specifiers_in_non_nullable_type3699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_69_in_non_nullable_type3703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_69_in_non_nullable_type3712 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000020L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_non_nullable_type3719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_192_in_non_nullable_type3725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_69_in_non_nullable_type3729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_type_in_non_array_type3740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_array_type3747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_unmanaged_type3754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_class_type3761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_pointer_type3768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_block3792 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_block3804 = new BitSet(new long[]{0x262D001C1C100020L,0x45FF67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000063DL});
	public static final BitSet FOLLOW_statement_list_in_block3810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_block3815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statement_list3853 = new BitSet(new long[]{0x262D001C1C100022L,0x45FF67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043DL});
	public static final BitSet FOLLOW_assignment_in_expression3903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_non_assignment_expression_in_expression3927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expression_list3975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_expression_list3980 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_expression_list3984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_unary_expression_in_assignment4007 = new BitSet(new long[]{0x0000000000200000L,0x0000000040285249L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_assignment_operator_in_assignment4013 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_assignment4019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cast_expression_in_unary_expression4056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression4065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000900L});
	public static final BitSet FOLLOW_72_in_unary_expression4070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_75_in_unary_expression4078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_71_in_unary_expression4088 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_unary_expression4092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_unary_expression4097 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_unary_expression4101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_61_in_unary_expression4106 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_unary_expression4110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_202_in_unary_expression4115 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_unary_expression4119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression4124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression4129 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointer_indirection_expression_in_unary_expression4134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_addressof_expression_in_unary_expression4139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_cast_expression4151 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_cast_expression4157 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cast_expression4161 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_cast_expression4167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_85_in_assignment_operator4187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_73_in_assignment_operator4191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_76_in_assignment_operator4195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_70_in_assignment_operator4199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_78_in_assignment_operator4203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_64_in_assignment_operator4207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_67_in_assignment_operator4211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_assignment_operator4215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_94_in_assignment_operator4219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_83_in_assignment_operator4223 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_assignment_operator4227 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_88_in_assignment_operator4229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_72_in_pre_increment_expression4238 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression4242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_75_in_pre_decrement_expression4251 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression4255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_69_in_pointer_indirection_expression4263 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_pointer_indirection_expression4267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_66_in_addressof_expression4275 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_addressof_expression4279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression4306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_query_expression_in_non_assignment_expression4321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression4330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression4365 = new BitSet(new long[]{0x8000000000000002L,0x0000000000002020L});
	public static final BitSet FOLLOW_69_in_multiplicative_expression4376 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_77_in_multiplicative_expression4380 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_63_in_multiplicative_expression4384 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression4391 = new BitSet(new long[]{0x8000000000000002L,0x0000000000002020L});
	public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression4422 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000080L});
	public static final BitSet FOLLOW_71_in_additive_expression4431 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_MINUS_in_additive_expression4435 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression4442 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000080L});
	public static final BitSet FOLLOW_additive_expression_in_shift_expression4474 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L});
	public static final BitSet FOLLOW_82_in_shift_expression4483 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_GT_in_shift_expression4487 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GT_in_shift_expression4489 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_additive_expression_in_shift_expression4494 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L});
	public static final BitSet FOLLOW_shift_expression_in_relational_expression4525 = new BitSet(new long[]{0x0000000000200002L,0x0000000801120000L,0x0000000000004000L});
	public static final BitSet FOLLOW_81_in_relational_expression4538 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_GT_in_relational_expression4542 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_88_in_relational_expression4546 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_84_in_relational_expression4550 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_shift_expression_in_relational_expression4555 = new BitSet(new long[]{0x0000000000200002L,0x0000000801120000L,0x0000000000004000L});
	public static final BitSet FOLLOW_142_in_relational_expression4569 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_99_in_relational_expression4573 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_non_nullable_type_in_relational_expression4581 = new BitSet(new long[]{0x0000000000200002L,0x0000000801120000L,0x0000000000004000L});
	public static final BitSet FOLLOW_relational_expression_in_equality_expression4620 = new BitSet(new long[]{0x4000000000000002L,0x0000000000400000L});
	public static final BitSet FOLLOW_86_in_equality_expression4632 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_62_in_equality_expression4636 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_relational_expression_in_equality_expression4643 = new BitSet(new long[]{0x4000000000000002L,0x0000000000400000L});
	public static final BitSet FOLLOW_equality_expression_in_and_expression4674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
	public static final BitSet FOLLOW_66_in_and_expression4681 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_equality_expression_in_and_expression4688 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
	public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression4719 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
	public static final BitSet FOLLOW_93_in_exclusive_or_expression4726 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression4733 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
	public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression4764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_198_in_inclusive_or_expression4773 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression4780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression4810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
	public static final BitSet FOLLOW_65_in_conditional_and_expression4818 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression4825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
	public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression4856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_200_in_conditional_or_expression4863 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression4870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression4901 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_90_in_null_coalescing_expression4909 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression4915 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression4941 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_89_in_conditional_expression4947 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_conditional_expression4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_conditional_expression4957 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_conditional_expression4963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression4996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_87_in_lambda_expression5000 = new BitSet(new long[]{0x242D001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression5004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_anonymous_function_signature5011 = new BitSet(new long[]{0x0000800008000000L,0x45A426B680000000L,0x66823AC52D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature5014 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5020 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_anonymous_function_signature5024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature5029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_implicit_anonymous_function_parameter_list5043 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter5057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_anonymous_function_body5064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_anonymous_function_body5069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_from_clause_in_query_expression5091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080004018090L,0x0000000000000004L});
	public static final BitSet FOLLOW_query_body_in_query_expression5095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_query_body_clauses_in_query_body5105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000080L});
	public static final BitSet FOLLOW_select_or_group_clause_in_query_body5110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_query_continuation_in_query_body5121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_141_in_query_continuation5131 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_query_continuation5135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080004018090L,0x0000000000000004L});
	public static final BitSet FOLLOW_query_body_in_query_continuation5139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses5146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004018010L,0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_body_clause5155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_let_clause_in_query_body_clause5160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_where_clause_in_query_body_clause5165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_join_clause_in_query_body_clause5170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_orderby_clause_in_query_body_clause5175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_132_in_from_clause5182 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_from_clause5186 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_from_clause5191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_137_in_from_clause5195 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_from_clause5199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_143_in_join_clause5207 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_join_clause5211 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_join_clause5216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_137_in_join_clause5220 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_join_clause5224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_152_in_join_clause5228 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_join_clause5232 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_122_in_join_clause5236 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_join_clause5240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_141_in_join_clause5243 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_join_clause5245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_144_in_let_clause5255 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_let_clause5259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_let_clause5263 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_let_clause5267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_154_in_orderby_clause5274 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_ordering_list_in_orderby_clause5278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ordering_in_ordering_list5286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_ordering_list5291 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_ordering_in_ordering_list5295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_ordering5305 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L});
	public static final BitSet FOLLOW_ordering_direction_in_ordering5310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_clause_in_select_or_group_clause5332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_group_clause_in_select_or_group_clause5337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_171_in_select_clause5345 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_select_clause5349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_135_in_group_clause5357 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_group_clause5361 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_105_in_group_clause5365 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_group_clause5369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_194_in_where_clause5377 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_boolean_expression_in_where_clause5381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_boolean_expression5397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_global_attribute_in_global_attributes5428 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_global_attribute5446 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute5450 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_attribute_list_in_global_attribute5454 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000400L});
	public static final BitSet FOLLOW_74_in_global_attribute5458 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_global_attribute5463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier5472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_global_attribute_target_specifier5476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attribute_sections_in_attributes5515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attribute_section_in_attribute_sections5523 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_attribute_section5533 = new BitSet(new long[]{0x0000000008000000L,0x4D20023680000000L,0x408019852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section5537 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_attribute_list_in_attribute_section5542 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000400L});
	public static final BitSet FOLLOW_74_in_attribute_section5546 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_attribute_section5551 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier5560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_attribute_target_specifier5564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attribute_in_attribute_list5606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_attribute_list5609 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_attribute_in_attribute_list5611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_type_name_in_attribute5623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_attribute_arguments_in_attribute5627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_attribute_arguments5638 = new BitSet(new long[]{0x2429801C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_RPAREN_in_attribute_arguments5643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_positional_argument_in_attribute_arguments5663 = new BitSet(new long[]{0x0000800008000000L,0x4520023680000400L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_named_argument_in_attribute_arguments5682 = new BitSet(new long[]{0x0000800008000000L,0x4520023680000400L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_74_in_attribute_arguments5698 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_positional_argument_in_attribute_arguments5700 = new BitSet(new long[]{0x0000800008000000L,0x4520023680000400L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_RPAREN_in_attribute_arguments5711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_positional_argument_in_positional_argument_list5725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_positional_argument_list5728 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_positional_argument_in_positional_argument_list5730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument5741 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_named_argument_in_named_argument_list5750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_named_argument_list5753 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_named_argument_in_named_argument_list5755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_named_argument5766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_named_argument5770 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument5774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_attribute_argument_expression5783 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_111_in_class_declaration5814 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_or_generic_in_class_declaration5819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_class_base_in_class_declaration5825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_class_body_in_class_declaration5839 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_SEMI_in_class_declaration5843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_79_in_class_base5898 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_interface_type_list_in_class_base5902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_interface_type_list5913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_interface_type_list5916 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_interface_type_list5920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_197_in_class_body5950 = new BitSet(new long[]{0x0000000008020000L,0x7DB5A6B788000000L,0xF6873EBFB5DDBD92L,0x0000000000000617L});
	public static final BitSet FOLLOW_class_member_declarations_in_class_body5956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_class_body5961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations5997 = new BitSet(new long[]{0x0000000008020002L,0x7DB5A6B788000000L,0xF6873EBFB5DDBD92L,0x0000000000000417L});
	public static final BitSet FOLLOW_112_in_constant_declaration6021 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_constant_declaration6025 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_constant_declarators_in_constant_declaration6029 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_constant_declaration6033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_declarator_in_constant_declarators6065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_constant_declarators6070 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_constant_declarator_in_constant_declarators6074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_constant_declarator6100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_constant_declarator6105 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_constant_expression_in_constant_declarator6111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constant_expression6129 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declarators_in_field_declaration6145 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_field_declaration6149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declarator_in_variable_declarators6182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_variable_declarators6187 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_variable_declarator_in_variable_declarators6193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_type_name_in_variable_declarator6221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_variable_declarator6224 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_variable_initializer_in_variable_declarator6230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_method_header_in_method_declaration6265 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_method_body_in_method_declaration6271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_method_header6299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_method_header6302 = new BitSet(new long[]{0x0000800008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_method_header6308 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_method_header6313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header6319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_method_body6351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qid_in_member_name6374 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_property_declaration6410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_property_declaration6414 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000101A00001020L});
	public static final BitSet FOLLOW_accessor_declarations_in_property_declaration6418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_property_declaration6422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attributes_in_accessor_declarations6430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101A00001020L});
	public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations6436 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000101A00001000L});
	public static final BitSet FOLLOW_attributes_in_accessor_declarations6440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000101A00001000L});
	public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations6445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations6452 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000001A00001020L});
	public static final BitSet FOLLOW_attributes_in_accessor_declarations6456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001A00001020L});
	public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations6461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration6471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_133_in_get_accessor_declaration6476 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration6480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration6488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_172_in_set_accessor_declaration6493 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration6497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_accessor_body6525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_123_in_event_declaration6535 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_event_declaration6539 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_member_name_in_event_declaration6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_event_declaration6558 = new BitSet(new long[]{0x0000000000000000L,0x0000000208000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration6562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_event_declaration6566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declarators_in_event_declaration6572 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_event_declaration6576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_in_event_modifiers6588 = new BitSet(new long[]{0x0000000000000002L,0x2000000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_attributes_in_event_accessor_declarations6597 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations6604 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_attributes_in_event_accessor_declarations6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations6613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations6634 = new BitSet(new long[]{0x0000000000000000L,0x0000000208000000L});
	public static final BitSet FOLLOW_attributes_in_event_accessor_declarations6638 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations6643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_97_in_add_accessor_declaration6653 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_add_accessor_declaration6657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_167_in_remove_accessor_declaration6665 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_remove_accessor_declaration6669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENUM_in_enum_declaration6681 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_enum_declaration6685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_enum_base_in_enum_declaration6689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_enum_body_in_enum_declaration6694 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_SEMI_in_enum_declaration6698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_79_in_enum_base6707 = new BitSet(new long[]{0x0000000000000000L,0x0000240000000000L,0x2600220000040400L});
	public static final BitSet FOLLOW_integral_type_in_enum_base6711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_enum_body6719 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000000L,0x408018852519A090L,0x0000000000000214L});
	public static final BitSet FOLLOW_enum_member_declarations_in_enum_body6722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_74_in_enum_body6724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_enum_body6731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations6739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_enum_member_declarations6742 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations6744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_attributes_in_enum_member_declaration6754 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_enum_member_declaration6759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_enum_member_declaration6764 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_enum_member_declaration6768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_116_in_delegate_declaration6825 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_return_type_in_delegate_declaration6829 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_delegate_declaration6833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
	public static final BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration6836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_delegate_declaration6844 = new BitSet(new long[]{0x0000800008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration6848 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_delegate_declaration6853 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration6857 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_delegate_declaration6862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_in_delegate_modifiers6870 = new BitSet(new long[]{0x0000000000000002L,0x2000000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_81_in_variant_generic_parameter_list6880 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000000L,0x408018852D19A290L,0x0000000000000014L});
	public static final BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list6884 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GT_in_variant_generic_parameter_list6888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters6896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_variant_type_parameters6899 = new BitSet(new long[]{0x0000000008000000L,0x4520023688000000L,0x408018852D19A290L,0x0000000000000014L});
	public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters6901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_attributes_in_variant_type_variable_name6911 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852D19A290L,0x0000000000000014L});
	public static final BitSet FOLLOW_variance_annotation_in_variant_type_variable_name6916 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_variable_name_in_variant_type_variable_name6921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_type_parameter_constraints_clauses6965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_194_in_type_parameter_constraints_clause6980 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause6984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_type_parameter_constraints_clause6988 = new BitSet(new long[]{0x0000000008000000L,0x4520823680000000L,0x408418852559A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause6992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_type_parameter_constraint_list7055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_type_parameter_constraint_list7066 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_type_parameter_constraint_list7077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list7088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_type_parameter_constraint_list7093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list7104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list7116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_secondary_constraint_list7119 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list7121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_type_name_in_secondary_constraint7131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_type_variable_name7141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_150_in_constructor_constraint7149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_constructor_constraint7153 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_constructor_constraint7157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_return_type7165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_192_in_return_type7171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list7204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_formal_parameter_list7209 = new BitSet(new long[]{0x0000000008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list7213 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_attributes_in_formal_parameter7244 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_fixed_parameter_in_formal_parameter7252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameter_array_in_formal_parameter7260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_95_in_formal_parameter7270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters7290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_fixed_parameters7295 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66923AC52D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters7299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter7323 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_fixed_parameter7330 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_fixed_parameter7336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
	public static final BitSet FOLLOW_default_argument_in_fixed_parameter7342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_85_in_default_argument7365 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_default_argument7367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_158_in_parameter_array7412 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_parameter_array7416 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_parameter_array7420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_139_in_interface_declaration7430 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_interface_declaration7434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000028000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration7438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_interface_base_in_interface_declaration7447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration7452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_interface_body_in_interface_declaration7457 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_SEMI_in_interface_declaration7461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_in_interface_modifiers7471 = new BitSet(new long[]{0x0000000000000002L,0x2000000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_79_in_interface_base7484 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_interface_type_list_in_interface_base7486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_interface_body7494 = new BitSet(new long[]{0x0000000008000000L,0x6DA426B788000000L,0xF6833EBF35DDB492L,0x0000000000000217L});
	public static final BitSet FOLLOW_interface_member_declarations_in_interface_body7498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_interface_body7503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations7511 = new BitSet(new long[]{0x0000000008000002L,0x6DA426B788000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_attributes_in_interface_member_declaration7520 = new BitSet(new long[]{0x0000000008000000L,0x6DA426B780000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_modifiers_in_interface_member_declaration7526 = new BitSet(new long[]{0x0000000008000000L,0x4DA426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_192_in_interface_member_declaration7532 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration7536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration7542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_interface_member_declaration7548 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x409018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration7564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration7589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration7599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_interface_property_declaration7616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_interface_property_declaration7620 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000100000000020L});
	public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration7624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_interface_property_declaration7628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_interface_method_declaration7636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
	public static final BitSet FOLLOW_generic_argument_list_in_interface_method_declaration7640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_interface_method_declaration7648 = new BitSet(new long[]{0x0000800008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration7652 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_interface_method_declaration7657 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration7661 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_interface_method_declaration7666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_123_in_interface_event_declaration7677 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_interface_event_declaration7681 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_interface_event_declaration7685 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_interface_event_declaration7689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_interface_indexer_declaration7701 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_interface_indexer_declaration7705 = new BitSet(new long[]{0x0000000008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration7709 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_interface_indexer_declaration7713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_interface_indexer_declaration7717 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000100000000020L});
	public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration7721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_interface_indexer_declaration7725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations7733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000020L});
	public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations7742 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations7746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations7751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations7758 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations7762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations7767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_133_in_interface_get_accessor_declaration7777 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_interface_get_accessor_declaration7781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_172_in_interface_set_accessor_declaration7791 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_interface_set_accessor_declaration7795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_in_method_modifiers7805 = new BitSet(new long[]{0x0000000000000002L,0x2000000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_178_in_struct_declaration7817 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_or_generic_in_struct_declaration7821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration7825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration7830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_struct_body_in_struct_declaration7835 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_SEMI_in_struct_declaration7839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers7848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000001A00401000L});
	public static final BitSet FOLLOW_79_in_struct_interfaces7885 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces7889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_struct_body7896 = new BitSet(new long[]{0x0000000008020000L,0x7DB5A6B788000000L,0xF6873EBFB5DDBD92L,0x0000000000000217L});
	public static final BitSet FOLLOW_struct_member_declarations_in_struct_body7900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_struct_body7905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations7912 = new BitSet(new long[]{0x0000000008020002L,0x7DB5A6B788000000L,0xF6873EBFB5DDBD92L,0x0000000000000017L});
	public static final BitSet FOLLOW_attributes_in_struct_member_declaration7921 = new BitSet(new long[]{0x0000000008020000L,0x7DB5A6B780000000L,0xF6873EBFB5DDBD92L,0x0000000000000017L});
	public static final BitSet FOLLOW_modifiers_in_struct_member_declaration7928 = new BitSet(new long[]{0x0000000008020000L,0x5DB5A6B680000000L,0x66863A85A59DAD92L,0x0000000000000015L});
	public static final BitSet FOLLOW_112_in_struct_member_declaration7934 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_struct_member_declaration7938 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_constant_declarators_in_struct_member_declaration7942 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_struct_member_declaration7946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_event_declaration_in_struct_member_declaration7951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_159_in_struct_member_declaration7958 = new BitSet(new long[]{0x042900180C100020L,0x45A4A6B680000000L,0x66863A85259DAC92L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration7961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration7972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration7983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration7994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration8001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration8007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_192_in_struct_member_declaration8014 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration8018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_struct_member_declaration8023 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66923A85279DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration8037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_declaration_in_struct_member_declaration8056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_name_in_struct_member_declaration8079 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_DOT_in_struct_member_declaration8081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration8083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration8092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_field_declaration_in_struct_member_declaration8105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_declaration_in_struct_member_declaration8123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration8141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enum_declaration_in_struct_member_declaration8147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delegate_declaration_in_struct_member_declaration8154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_conversion_operator_declaration_in_struct_member_declaration8160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_declaration_in_struct_member_declaration8165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration8182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_indexer_declaration8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000101A00001020L});
	public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration8190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_indexer_declaration8194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_indexer_declarator8204 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_indexer_declarator8208 = new BitSet(new long[]{0x0000000008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_indexer_declarator8216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_declarator_in_operator_declaration8227 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_operator_body_in_operator_declaration8231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_153_in_operator_declarator8239 = new BitSet(new long[]{0xE020000400300000L,0x00000000215629A4L,0x0000000000000000L,0x0000000000000440L});
	public static final BitSet FOLLOW_set_in_operator_declarator8247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_operator_declarator8257 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_operator_declarator8261 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_operator_declarator8265 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator8279 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator8289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RPAREN_in_unary_operator_declarator8305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_74_in_binary_operator_declarator8348 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_binary_operator_declarator8352 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_binary_operator_declarator8356 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_binary_operator_declarator8360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_69_in_overloadable_binary_operator8371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_77_in_overloadable_binary_operator8375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_63_in_overloadable_binary_operator8379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_66_in_overloadable_binary_operator8383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_overloadable_binary_operator8387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_93_in_overloadable_binary_operator8391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_82_in_overloadable_binary_operator8395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_overloadable_binary_operator8399 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GT_in_overloadable_binary_operator8401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_86_in_overloadable_binary_operator8405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_62_in_overloadable_binary_operator8409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_overloadable_binary_operator8413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_81_in_overloadable_binary_operator8417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_88_in_overloadable_binary_operator8421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_84_in_overloadable_binary_operator8425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration8435 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_operator_body_in_conversion_operator_declaration8439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_conversion_operator_declarator8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_153_in_conversion_operator_declarator8456 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_conversion_operator_declarator8460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_conversion_operator_declarator8464 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_conversion_operator_declarator8468 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_conversion_operator_declarator8472 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_conversion_operator_declarator8476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_operator_body8484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration8494 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_constructor_body_in_constructor_declaration8498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_constructor_declarator8506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_constructor_declarator8510 = new BitSet(new long[]{0x0000800008000000L,0x45A426B688000000L,0x66923AC56D9DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator8514 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_constructor_declarator8519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
	public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator8523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_79_in_constructor_initializer8532 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_set_in_constructor_initializer8536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_constructor_initializer8546 = new BitSet(new long[]{0x2429801C0C100020L,0x45BC66F6800089B4L,0x6F927AC52DDDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_argument_list_in_constructor_initializer8550 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_constructor_initializer8555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_constructor_body8563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_202_in_destructor_declaration8579 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_destructor_declaration8582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_destructor_declaration8586 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_destructor_declaration8590 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_destructor_body_in_destructor_declaration8595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_destructor_body8603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_invocation_start_in_invocation_expression8613 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_arguments_in_invocation_expression8635 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000000L});
	public static final BitSet FOLLOW_invocation_part_in_invocation_expression8639 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_invocation_part_in_invocation_expression8650 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000010L});
	public static final BitSet FOLLOW_arguments_in_invocation_expression8656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predefined_type_in_invocation_start8664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_invocation_start8681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_generic_argument_list_in_invocation_start8685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_invocation_start8690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_102_in_invocation_start8696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_invocation_start8701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
	public static final BitSet FOLLOW_80_in_invocation_start8706 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_invocation_start8710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeof_expression_in_invocation_start8717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_access_identifier_in_invocation_part8740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brackets_in_invocation_part8745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_statement_in_statement8777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labeled_statement_in_statement8803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_embedded_statement_in_statement8819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_embedded_statement8852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selection_statement_in_embedded_statement8868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_iteration_statement_in_embedded_statement8891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_jump_statement_in_embedded_statement8914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_try_statement_in_embedded_statement8946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checked_statement_in_embedded_statement8963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement8980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_statement_in_embedded_statement8997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_statement_in_embedded_statement9013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_yield_statement_in_embedded_statement9030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unsafe_statement_in_embedded_statement9048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fixed_statement_in_embedded_statement9065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_statement_in_embedded_statement9082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_128_in_fixed_statement9120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_fixed_statement9124 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_pointer_type_in_fixed_statement9128 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement9130 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_fixed_statement9134 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_fixed_statement9138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_fixed_pointer_declarators9151 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators9155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_fixed_pointer_declarator9165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_fixed_pointer_declarator9169 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator9173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fixed_pointer_initializer9183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_188_in_unsafe_statement9201 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_unsafe_statement9205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_labeled_statement9229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_labeled_statement9233 = new BitSet(new long[]{0x262D001C1C100020L,0x45FF67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043DL});
	public static final BitSet FOLLOW_statement_in_labeled_statement9237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement9259 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement9275 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_declaration_statement9281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_type_in_local_variable_declaration9309 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration9315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_190_in_local_variable_type9353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_120_in_local_variable_type9375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_local_variable_type9391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators9427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_local_variable_declarators9432 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators9436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_identifier_in_local_variable_declarator9468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_local_variable_declarator9471 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F92FA8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator9477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_local_variable_initializer9504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer9520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer9536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_175_in_stackalloc_initializer9564 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_91_in_stackalloc_initializer9572 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_stackalloc_initializer9576 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_92_in_stackalloc_initializer9580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_112_in_local_constant_declaration9606 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_local_constant_declaration9612 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration9618 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expression_statement9643 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_expression_statement9647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_statement_expression9666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_selection_statement9684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switch_statement_in_selection_statement9693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_if_statement9716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_if_statement9720 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_boolean_expression_in_if_statement9726 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_if_statement9730 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_if_statement9736 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
	public static final BitSet FOLLOW_else_statement_in_if_statement9747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_121_in_else_statement9765 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_else_statement9771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_179_in_switch_statement9792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_switch_statement9796 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_switch_statement9800 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_switch_statement9804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_switch_block_in_switch_statement9808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_197_in_switch_block9816 = new BitSet(new long[]{0x0000000000000000L,0x0008080000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_switch_sections_in_switch_block9820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_201_in_switch_block9825 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switch_section_in_switch_sections9833 = new BitSet(new long[]{0x0000000000000002L,0x0008080000000000L});
	public static final BitSet FOLLOW_switch_labels_in_switch_section9842 = new BitSet(new long[]{0x262D001C1C100020L,0x45FF67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043DL});
	public static final BitSet FOLLOW_statement_list_in_switch_section9846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switch_label_in_switch_labels9854 = new BitSet(new long[]{0x0000000000000002L,0x0008080000000000L});
	public static final BitSet FOLLOW_107_in_switch_label9864 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_constant_expression_in_switch_label9868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_switch_label9872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_115_in_switch_label9879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_switch_label9883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_while_statement_in_iteration_statement9900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_do_statement_in_iteration_statement9909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_for_statement_in_iteration_statement9918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_foreach_statement_in_iteration_statement9927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_195_in_while_statement9948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_while_statement9952 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_boolean_expression_in_while_statement9958 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_while_statement9962 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_while_statement9968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_118_in_do_statement9988 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_do_statement9994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_195_in_do_statement9998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_do_statement10002 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_boolean_expression_in_do_statement10008 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_do_statement10012 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_do_statement10016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_130_in_for_statement10036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_for_statement10040 = new BitSet(new long[]{0x242D001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000415L});
	public static final BitSet FOLLOW_for_initializer_in_for_statement10046 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_for_statement10051 = new BitSet(new long[]{0x242D001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_for_condition_in_for_statement10057 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_for_statement10062 = new BitSet(new long[]{0x2429801C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_for_iterator_in_for_statement10068 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_for_statement10073 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_for_statement10079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer10104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_expression_list_in_for_initializer10113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_boolean_expression_in_for_condition10131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_expression_list_in_for_iterator10147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_expression_in_statement_expression_list10176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_74_in_statement_expression_list10180 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_statement_expression_in_statement_expression_list10184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_131_in_foreach_statement10207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_foreach_statement10211 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_local_variable_type_in_foreach_statement10217 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_foreach_statement10223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_137_in_foreach_statement10227 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_foreach_statement10233 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_foreach_statement10237 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_foreach_statement10243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_break_statement_in_jump_statement10261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_jump_statement10270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_jump_statement10279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_jump_statement10288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_throw_statement_in_jump_statement10297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_104_in_break_statement10317 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_break_statement10321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_113_in_continue_statement10340 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_continue_statement10344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_134_in_goto_statement10363 = new BitSet(new long[]{0x0000000008000000L,0x45280A3680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_goto_statement10369 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_107_in_goto_statement10377 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_constant_expression_in_goto_statement10381 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_115_in_goto_statement10389 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_goto_statement10394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_168_in_return_statement10413 = new BitSet(new long[]{0x242D001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_return_statement10419 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_return_statement10424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_181_in_throw_statement10445 = new BitSet(new long[]{0x242D001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_throw_statement10449 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_throw_statement10454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_182_in_try_statement10477 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_try_statement10481 = new BitSet(new long[]{0x0000000000000000L,0x8000100000000000L});
	public static final BitSet FOLLOW_catch_clauses_in_try_statement10487 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
	public static final BitSet FOLLOW_finally_clause_in_try_statement10491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_finally_clause_in_try_statement10503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_108_in_catch_clauses10512 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses10517 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses10521 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses10530 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_108_in_specific_catch_clauses10535 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses10540 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_general_catch_clause_in_specific_catch_clauses10544 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_68_in_specific_catch_clause10554 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_class_type_in_specific_catch_clause10558 = new BitSet(new long[]{0x0000800008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_specific_catch_clause10562 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_specific_catch_clause10567 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_specific_catch_clause10571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_general_catch_clause10579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_127_in_finally_clause10587 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_finally_clause10591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_110_in_checked_statement10610 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_checked_statement10614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_187_in_unchecked_statement10633 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_block_in_unchecked_statement10637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_145_in_lock_statement10656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_lock_statement10660 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_lock_statement10663 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_lock_statement10667 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_lock_statement10671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_in_using_statement10690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_using_statement10694 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000415L});
	public static final BitSet FOLLOW_resource_acquisition_in_using_statement10699 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_using_statement10703 = new BitSet(new long[]{0x262D001C1C100020L,0x45FE67F6800009B4L,0x7FFA7B8525DFA4DFL,0x000000000000043CL});
	public static final BitSet FOLLOW_embedded_statement_in_using_statement10708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition10722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_resource_acquisition10727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_196_in_yield_statement10745 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_168_in_yield_statement10750 = new BitSet(new long[]{0x2429001C0C100020L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_expression_in_yield_statement10754 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_yield_statement10758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_104_in_yield_statement10773 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_yield_statement10777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Real_literal_in_literal11481 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_literal11490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Hex_number_in_literal11500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Character_literal_in_literal11510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRINGLITERAL_in_literal11520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Verbatim_string_literal_in_literal11530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_literal11540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_literal11550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_in_literal11560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_in_assignment_list13542 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_assignment_list13544 = new BitSet(new long[]{0x2429001C0C100022L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_attributes_in_field_declarations13555 = new BitSet(new long[]{0x0000000008000000L,0x65A426B780000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_modifiers_in_field_declarations13560 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_field_declarations13565 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_field_declaration_in_field_declarations13569 = new BitSet(new long[]{0x0000000008000002L,0x65A426B788000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_attributes_in_property_declaration_list13580 = new BitSet(new long[]{0x0000000008000000L,0x65A426B780000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_modifiers_in_property_declaration_list13585 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_property_declaration_list13590 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_property_declaration_in_property_declaration_list13594 = new BitSet(new long[]{0x0000000008000002L,0x65A426B788000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_constant_declaration_in_constant_declarations13604 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
	public static final BitSet FOLLOW_literal_in_literals13612 = new BitSet(new long[]{0x0429001804100022L});
	public static final BitSet FOLLOW_attributes_in_delegate_declaration_list13622 = new BitSet(new long[]{0x0000000000000000L,0x2010000100000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifiers_in_delegate_declaration_list13627 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_delegate_declaration_in_delegate_declaration_list13632 = new BitSet(new long[]{0x0000000000000002L,0x2010000108000000L,0x9001043A10401000L,0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_local_variable_declaration_list13643 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_local_variable_declaration_list13645 = new BitSet(new long[]{0x0000000008000002L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_initializer_list13656 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_local_variable_initializer_list13658 = new BitSet(new long[]{0x2429001C0C100022L,0x45BC66F6800009B4L,0x6F92FA8525DDA492L,0x0000000000000434L});
	public static final BitSet FOLLOW_expression_in_expression_list_test13669 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_expression_list_test13671 = new BitSet(new long[]{0x2429001C0C100022L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_unary_expression_in_unary_expression_list13682 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_unary_expression_list13684 = new BitSet(new long[]{0x2429001C0C100022L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_invocation_expression_in_invocation_expression_list13695 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_invocation_expression_list13697 = new BitSet(new long[]{0x0000000008000002L,0x45A426F680000000L,0x67923A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_primary_expression_in_primary_expression_list13708 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_primary_expression_list13710 = new BitSet(new long[]{0x042900180C100022L,0x45BC66F680000010L,0x6F927A8525DDA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression_list13721 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_SEMI_in_non_assignment_expression_list13723 = new BitSet(new long[]{0x2429001C0C100022L,0x45BC66F6800009B4L,0x6F927A8525DDA492L,0x0000000000000414L});
	public static final BitSet FOLLOW_modifiers_in_method_declarations13734 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_192_in_method_declarations13738 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_type_in_method_declarations13742 = new BitSet(new long[]{0x042900180C100020L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000014L});
	public static final BitSet FOLLOW_method_declaration_in_method_declarations13745 = new BitSet(new long[]{0x0000000008000002L,0x65A426B780000000L,0xF6833EBF35DDB492L,0x0000000000000017L});
	public static final BitSet FOLLOW_159_in_synpred1_cs490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred2_cs1070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_synpred2_cs1074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred3_cs1107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_synpred3_cs1111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred4_cs1140 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_DOT_in_synpred4_cs1144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_180_in_synpred4_cs1148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_180_in_synpred5_cs1506 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_brackets_in_synpred5_cs1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_102_in_synpred6_cs1531 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_brackets_in_synpred6_cs1535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_object_creation_expression_in_synpred7_cs1580 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000000L});
	public static final BitSet FOLLOW_set_in_synpred7_cs1584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delegate_creation_expression_in_synpred8_cs1632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_synpred9_cs1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_81_in_synpred9_cs1785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_68_in_synpred10_cs2172 = new BitSet(new long[]{0x0000000008000000L,0x45A426B680000000L,0x66823A85259DA492L,0x0000000000000015L});
	public static final BitSet FOLLOW_type_in_synpred10_cs2176 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred10_cs2180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_array_creation_expression_in_synpred11_cs2438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arguments_in_synpred12_cs2521 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000000L});
	public static final BitSet FOLLOW_set_in_synpred12_cs2525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unbound_type_name_in_synpred13_cs3107 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_dimension_specifier_in_synpred14_cs3165 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_DOT_in_synpred14_cs3169 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_synpred15_cs3340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_81_in_synpred15_cs3344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_synpred16_cs3416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_81_in_synpred16_cs3421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predefined_type_in_synpred17_cs3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_type_name_in_synpred17_cs3548 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_rank_specifiers_in_synpred17_cs3552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predefined_type_in_synpred18_cs3586 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000020L});
	public static final BitSet FOLLOW_type_name_in_synpred18_cs3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000020L});
	public static final BitSet FOLLOW_69_in_synpred18_cs3595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_89_in_synpred18_cs3600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unary_expression_in_synpred19_cs3892 = new BitSet(new long[]{0x0000000000200000L,0x0000000040285249L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_assignment_operator_in_synpred19_cs3896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cast_expression_in_synpred20_cs4049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymous_function_signature_in_synpred21_cs4295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_87_in_synpred21_cs4299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_query_expression_in_synpred22_cs4314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_141_in_synpred23_cs5116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_74_in_synpred24_cs5669 = new BitSet(new long[]{0x0000000008000000L,0x4520023680000000L,0x408018852519A090L,0x0000000000000014L});
	public static final BitSet FOLLOW_identifier_in_synpred24_cs5673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_85_in_synpred24_cs5677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred25_cs6545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_synpred25_cs6549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred26_cs7555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_synpred26_cs7559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred27_cs7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_synpred27_cs7584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred28_cs8028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_68_in_synpred28_cs8032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred29_cs8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_197_in_synpred29_cs8051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_name_in_synpred30_cs8066 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_DOT_in_synpred30_cs8070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_180_in_synpred30_cs8074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arguments_in_synpred31_cs8620 = new BitSet(new long[]{0x0000200000000400L,0x0000000008000000L});
	public static final BitSet FOLLOW_set_in_synpred31_cs8624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_synpred32_cs8671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_81_in_synpred32_cs8676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_statement_in_synpred33_cs8770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_synpred34_cs8792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_79_in_synpred34_cs8796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_190_in_synpred35_cs9346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_120_in_synpred36_cs9368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_121_in_synpred37_cs9740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_synpred38_cs10097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_local_variable_declaration_in_synpred39_cs10717 = new BitSet(new long[]{0x0000000000000002L});
}
